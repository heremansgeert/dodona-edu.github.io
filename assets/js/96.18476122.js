(window.webpackJsonp=window.webpackJsonp||[]).push([[96],{802:function(t,a,s){"use strict";s.r(a);var e=s(29),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"test-suite-format"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#test-suite-format"}},[t._v("#")]),t._v(" Test suite format")]),t._v(" "),s("p",[t._v("In TESTed, a test suite specifies which test cases are executed against a submission.\nTESTed differs from other test frameworks in that its test suites are independent of any programming language.\nAs a result, a single test suite is sufficient to check submissions for the same exercise in different programming\nlanguages.")]),t._v(" "),s("p",[t._v("The TESTed test suite format is formally specified\nby "),s("a",{attrs:{href:"https://github.com/dodona-edu/universal-judge/blob/master/tested/testplan.py",target:"_blank",rel:"noopener noreferrer"}},[t._v("this Python module"),s("OutboundLink")],1),t._v(".\nIt can also generate a JSON Schema to make the validation of test suites easier.\nThe "),s("a",{attrs:{href:"https://github.com/dodona-edu/universal-judge/tree/master/exercise",target:"_blank",rel:"noopener noreferrer"}},[t._v("source code repository"),s("OutboundLink")],1),t._v(" for TESTed contains a number of examples of test suites.")]),t._v(" "),s("p",[t._v("The first section of this reference describes the structure of the test suite.\nA dot notation is used to indicate where the attribute is located in the hierarchical structure.\nA star ("),s("code",[t._v("*")]),t._v(") is used to indicate a list of objects.\nFor example, "),s("code",[t._v("plan.tabs.*.runs.*.run")]),t._v(" can roughly be converted to json like this:")]),t._v(" "),s("div",{staticClass:"language-json5 extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json5"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("                   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// `plan`")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token property unquoted"}},[t._v("tabs")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// `plan.tabs`")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("                 "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// `plan.tabs.*`")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token property unquoted"}},[t._v("runs")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("          "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// `plan.tabs.*.runs`")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("               "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// `plan.tabs.*.runs.*` ")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token property unquoted"}},[t._v("run")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"example"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// `plan.tabs.*.runs.*.run`")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("In the sections after that, some aspects are discussed in more detail.")]),t._v(" "),s("h2",{attrs:{id:"plan"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#plan"}},[t._v("#")]),t._v(" "),s("code",[t._v("plan")])]),t._v(" "),s("p",[t._v("Top-level object of a test suite.\nSince this object is not named in a test suite, we ignore it in all titles below.")]),t._v(" "),s("h3",{attrs:{id:"namespace"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#namespace"}},[t._v("#")]),t._v(" "),s("code",[t._v(".namespace")])]),t._v(" "),s("p",[t._v("The name of the submission file ("),s("code",[t._v("<namespace>.<ext>")]),t._v(").")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("namespace")]),t._v(" is also used as the namespace of the code.\nThe default namespace is "),s("code",[t._v("submission")]),t._v(".\nFor example, Java submissions must include a class called "),s("code",[t._v("Submission")]),t._v(".")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("Hint")]),t._v(" "),s("p",[t._v("The namespace is best written in "),s("code",[t._v("snake_case")]),t._v(",\nwhich enables using the right style convention for each programming language.")])]),t._v(" "),s("h2",{attrs:{id:"tabs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tabs"}},[t._v("#")]),t._v(" "),s("code",[t._v(".tabs.*")])]),t._v(" "),s("p",[t._v("A list of all tabs that will be executed.")]),t._v(" "),s("p",[t._v("The tabs in a test suite correspond with the visual grouping of test cases into tabs on Dodona.\nA tab contains a list of the runs that must be executed.")]),t._v(" "),s("h3",{attrs:{id:"name"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#name"}},[t._v("#")]),t._v(" "),s("code",[t._v(".name")])]),t._v(" "),s("p",[t._v("The name of the tab; displayed on Dodona.")]),t._v(" "),s("h3",{attrs:{id:"hidden"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hidden"}},[t._v("#")]),t._v(" "),s("code",[t._v(".hidden")])]),t._v(" "),s("p",[t._v("A boolean indicating if the tab must be hidden when all its test cases succeed.")]),t._v(" "),s("h2",{attrs:{id:"tabs-runs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tabs-runs"}},[t._v("#")]),t._v(" "),s("code",[t._v(".tabs.*.runs.*")])]),t._v(" "),s("p",[t._v("This is a list of all runs (generated executables) that must be executed.")]),t._v(" "),s("p",[t._v("A run is a generated executable\nthat contains a collection of contexts and an optional test case that evaluates the submission.")]),t._v(" "),s("h2",{attrs:{id:"tabs-runs-run"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tabs-runs-run"}},[t._v("#")]),t._v(" "),s("code",[t._v(".tabs.*.runs.*.run")])]),t._v(" "),s("p",[t._v("The test case that executes the submission.\nIt will be visualized as a separate context on Dodona.")]),t._v(" "),s("h3",{attrs:{id:"input"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#input"}},[t._v("#")]),t._v(" "),s("code",[t._v(".input")])]),t._v(" "),s("p",[t._v("The run input contains all information that is necessary to evaluates the written program\n("),s("code",[t._v("main")]),t._v("-call or the code itself) by the student.")]),t._v(" "),s("h4",{attrs:{id:"input-stdin"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#input-stdin"}},[t._v("#")]),t._v(" "),s("code",[t._v(".input.stdin")])]),t._v(" "),s("p",[t._v("The content that is made available on standard input.\nThis can either be an ("),s("a",{attrs:{href:"#emptychannel"}},[t._v("EmptyChannel")]),t._v(") object,\nor a "),s("a",{attrs:{href:"#textdata"}},[t._v("TextData")]),t._v(" object providing the path name of a text file or a string containing the content.")]),t._v(" "),s("h4",{attrs:{id:"input-arguments"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#input-arguments"}},[t._v("#")]),t._v(" "),s("code",[t._v(".input.arguments")])]),t._v(" "),s("p",[t._v("list of string arguments that are passed when executing the submission.")]),t._v(" "),s("h4",{attrs:{id:"input-main-call"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#input-main-call"}},[t._v("#")]),t._v(" "),s("code",[t._v(".input.main_call")])]),t._v(" "),s("p",[t._v("A boolean indicating if the submission must be executed. By default, the submission will not be executed.")]),t._v(" "),s("h3",{attrs:{id:"output"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#output"}},[t._v("#")]),t._v(" "),s("code",[t._v(".output")])]),t._v(" "),s("p",[t._v("This object contains all the necessary information to evaluate the executed submission.")]),t._v(" "),s("h4",{attrs:{id:"output-stdout"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#output-stdout"}},[t._v("#")]),t._v(" "),s("code",[t._v(".output.stdout")])]),t._v(" "),s("p",[t._v("The output channel for standard output.\nPossible output channels are:")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#emptychannel"}},[t._v("EmptyChannel")]),t._v(" (default): No output is expected on this channel.\nThis is the default option.")]),t._v(" "),s("li",[s("a",{attrs:{href:"#ignoredchannel"}},[t._v("IgnoredChannel")]),t._v(": No output is expected on this channel, but generated output is ignored.")]),t._v(" "),s("li",[s("a",{attrs:{href:"#textoutputchannel"}},[t._v("TextOutputChannel")]),t._v(": Expected output on this channel.")])]),t._v(" "),s("h4",{attrs:{id:"output-stderr"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#output-stderr"}},[t._v("#")]),t._v(" "),s("code",[t._v(".output.stderr")])]),t._v(" "),s("p",[t._v("The output channel for standard error.\nPossible output channels are:")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#emptychannel"}},[t._v("EmptyChannel")]),t._v(" (default): No output is expected on this channel.\nThis is the default option.")]),t._v(" "),s("li",[s("a",{attrs:{href:"#ignoredchannel"}},[t._v("IgnoredChannel")]),t._v(": No output is expected on this channel, but generated output is ignored.")]),t._v(" "),s("li",[s("a",{attrs:{href:"#textoutputchannel"}},[t._v("TextOutputChannel")]),t._v(": Expected output on this channel.")])]),t._v(" "),s("h4",{attrs:{id:"output-file"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#output-file"}},[t._v("#")]),t._v(" "),s("code",[t._v(".output.file")])]),t._v(" "),s("p",[t._v("The output channel for a file.\nPossible output channels are:")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#ignoredchannel"}},[t._v("IgnoredChannel")]),t._v(" (default): No output is expected on this channel, but generated output is ignored.")]),t._v(" "),s("li",[s("a",{attrs:{href:"#fileoutputchannel"}},[t._v("FileOutputChannel")]),t._v(": Expected output on this channel.")])]),t._v(" "),s("p",[s("em",[s("strong",[t._v("Note:")])]),t._v(" TESTed currently supports at most one expected file for each execution of the submission.\nAdditionally, there is currently no way to check that "),s("em",[t._v("no")]),t._v(" files were generated.")]),t._v(" "),s("h4",{attrs:{id:"output-exception"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#output-exception"}},[t._v("#")]),t._v(" "),s("code",[t._v(".output.exception")])]),t._v(" "),s("p",[t._v("The output channel for an exception.\nThe possible output channels are:")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#emptychannel"}},[t._v("EmptyChannel")]),t._v(" (default): No exception is expected.")]),t._v(" "),s("li",[s("a",{attrs:{href:"#ignoredchannel"}},[t._v("IgnoredChannel")]),t._v(": No exception is expected, but any exceptions raised are ignored.")]),t._v(" "),s("li",[s("a",{attrs:{href:"#exceptionoutputchannel"}},[t._v("ExceptionOutputChannel")]),t._v(": Expected exception.")])]),t._v(" "),s("h4",{attrs:{id:"output-exit-code"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#output-exit-code"}},[t._v("#")]),t._v(" "),s("code",[t._v(".output.exit_code")])]),t._v(" "),s("p",[t._v("The output channel for the exit code upon termination of executing the submission.\nThe exit code must be passed in the object "),s("a",{attrs:{href:"#exitcodeoutputchannel"}},[t._v("ExitCodeOutputChannel")]),t._v(".\nBy default, the expected exit code is zero (0).")]),t._v(" "),s("h3",{attrs:{id:"description"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#description"}},[t._v("#")]),t._v(" "),s("code",[t._v(".description")])]),t._v(" "),s("p",[t._v("A description of the context as displayed by Dodona.\nWhen no description is given, it will be automatically generated by TESTed.")]),t._v(" "),s("h3",{attrs:{id:"link-files"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#link-files"}},[t._v("#")]),t._v(" "),s("code",[t._v(".link_files.*")])]),t._v(" "),s("p",[t._v("A list of files that must be linked in the feedback on Dodona (see "),s("a",{attrs:{href:"#link-files-2"}},[t._v("documentation for the contexts")]),t._v(").")]),t._v(" "),s("h2",{attrs:{id:"tabs-runs-contexts"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tabs-runs-contexts"}},[t._v("#")]),t._v(" "),s("code",[t._v(".tabs.*.runs.*.contexts.*")])]),t._v(" "),s("p",[t._v("A list of contexts that will be executed.\nA context is a list of dependent test cases that must be executed in succession.\nIn addition to the test cases, a context can contain setup and teardown code,\nwhich is also described in a way that is independent of any programming language.")]),t._v(" "),s("h3",{attrs:{id:"before"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#before"}},[t._v("#")]),t._v(" "),s("code",[t._v(".before")])]),t._v(" "),s("p",[t._v("An object whose keys are programming languages.\nThe corresponding values are "),s("a",{attrs:{href:"#textdata"}},[t._v("TextData")]),t._v(" objects that are executed before the test cases.")]),t._v(" "),s("h3",{attrs:{id:"after"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#after"}},[t._v("#")]),t._v(" "),s("code",[t._v(".after")])]),t._v(" "),s("p",[t._v("An object whose keys are programming languages.\nThe corresponding values are "),s("a",{attrs:{href:"#textdata"}},[t._v("TextData")]),t._v(" objects that are executed after the test cases.")]),t._v(" "),s("h3",{attrs:{id:"description-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#description-2"}},[t._v("#")]),t._v(" "),s("code",[t._v(".description")])]),t._v(" "),s("p",[t._v("A description of the context as displayed by Dodona.\nWhen no description is given, it will be automatically generated.")]),t._v(" "),s("h3",{attrs:{id:"link-files-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#link-files-2"}},[t._v("#")]),t._v(" "),s("code",[t._v(".link_files.*")])]),t._v(" "),s("p",[t._v("A list of files that must be linked in the feedback on Dodona.\nEach object is used to enable file linking in the feedback.")]),t._v(" "),s("h4",{attrs:{id:"link-files-name"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#link-files-name"}},[t._v("#")]),t._v(" "),s("code",[t._v(".link_files.*.name")])]),t._v(" "),s("p",[t._v("The name of a file.\nAll exact matches of the filename will be linked to the content.")]),t._v(" "),s("h4",{attrs:{id:"link-files-content"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#link-files-content"}},[t._v("#")]),t._v(" "),s("code",[t._v(".link_files.*.content")])]),t._v(" "),s("p",[t._v("The URL of a text file (usually a relative URL to a file in the description directory of the exercise).")]),t._v(" "),s("h4",{attrs:{id:"link-files-location"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#link-files-location"}},[t._v("#")]),t._v(" "),s("code",[t._v(".link_files.*.location")])]),t._v(" "),s("p",[t._v("The type of content.\nCurrently, the only value supported is "),s("code",[t._v("href")]),t._v(", which is also the default value.\nThis attribute is only included for legacy reasons and may become deprecated in the future.")]),t._v(" "),s("h4",{attrs:{id:"link-files-storage"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#link-files-storage"}},[t._v("#")]),t._v(" "),s("code",[t._v(".link_files.*.storage")])]),t._v(" "),s("p",[t._v("The storage method of the content.\nCurrently, the only value supported is "),s("code",[t._v("disk")]),t._v(", which is also the default value.\nThis attribute is only included for legacy reasons and may become deprecated in the future.")]),t._v(" "),s("h2",{attrs:{id:"tabs-runs-contexts-testcases"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tabs-runs-contexts-testcases"}},[t._v("#")]),t._v(" "),s("code",[t._v(".tabs.*.runs.*.contexts.*.testcases.*")])]),t._v(" "),s("p",[t._v("A test case is a statement or an expression that must be executed and evaluated.")]),t._v(" "),s("h3",{attrs:{id:"input-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#input-2"}},[t._v("#")]),t._v(" "),s("code",[t._v(".input")])]),t._v(" "),s("p",[t._v("A statement or expression (see "),s("a",{attrs:{href:"#statements-and-expressions"}},[t._v("Statements and expressions")]),t._v(").")]),t._v(" "),s("h3",{attrs:{id:"description-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#description-3"}},[t._v("#")]),t._v(" "),s("code",[t._v(".description")])]),t._v(" "),s("p",[t._v("A description of the test case as displayed by Dodona.\nWhen no description is given, it will be automatically generated by TESTed.")]),t._v(" "),s("h3",{attrs:{id:"output-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#output-2"}},[t._v("#")]),t._v(" "),s("code",[t._v(".output")])]),t._v(" "),s("p",[t._v("An object that contains all the necessary information to evaluate a test case.")]),t._v(" "),s("h4",{attrs:{id:"output-stdout-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#output-stdout-2"}},[t._v("#")]),t._v(" "),s("code",[t._v(".output.stdout")])]),t._v(" "),s("p",[t._v("The output channel for standard output.\nPossible output channels are:")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#emptychannel"}},[t._v("EmptyChannel")]),t._v(" (default): No output is expected on this channel.\nThis is the default option.")]),t._v(" "),s("li",[s("a",{attrs:{href:"#ignoredchannel"}},[t._v("IgnoredChannel")]),t._v(": No output is expected on this channel, but generated output is ignored.")]),t._v(" "),s("li",[s("a",{attrs:{href:"#textoutputchannel"}},[t._v("TextOutputChannel")]),t._v(": Expected output on this channel.")])]),t._v(" "),s("h4",{attrs:{id:"output-stderr-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#output-stderr-2"}},[t._v("#")]),t._v(" "),s("code",[t._v(".output.stderr")])]),t._v(" "),s("p",[t._v("The output channel for standard error.\nPossible output channels are:")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#emptychannel"}},[t._v("EmptyChannel")]),t._v(" (default): No output is expected on this channel.\nThis is the default option.")]),t._v(" "),s("li",[s("a",{attrs:{href:"#ignoredchannel"}},[t._v("IgnoredChannel")]),t._v(": No output is expected on this channel, but generated output is ignored.")]),t._v(" "),s("li",[s("a",{attrs:{href:"#textoutputchannel"}},[t._v("TextOutputChannel")]),t._v(": Expected output on this channel.")])]),t._v(" "),s("h4",{attrs:{id:"output-file-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#output-file-2"}},[t._v("#")]),t._v(" "),s("code",[t._v(".output.file")])]),t._v(" "),s("p",[t._v("The output channel for a file.\nPossible output channels are:")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#ignoredchannel"}},[t._v("IgnoredChannel")]),t._v(" (default): No output is expected on this channel, but generated output is ignored.")]),t._v(" "),s("li",[s("a",{attrs:{href:"#fileoutputchannel"}},[t._v("FileOutputChannel")]),t._v(": Expected output on this channel.")])]),t._v(" "),s("p",[s("em",[s("strong",[t._v("Note:")])]),t._v(" TESTed currently supports at most one expected file for each execution of the submission.\nAdditionally, there is currently no way to check that "),s("em",[t._v("no")]),t._v(" files were generated.")]),t._v(" "),s("h4",{attrs:{id:"output-exception-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#output-exception-2"}},[t._v("#")]),t._v(" "),s("code",[t._v(".output.exception")])]),t._v(" "),s("p",[t._v("The output channel for an exception.\nThe possible output channels are:")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#emptychannel"}},[t._v("EmptyChannel")]),t._v(" (default): No exception is expected.")]),t._v(" "),s("li",[s("a",{attrs:{href:"#ignoredchannel"}},[t._v("IgnoredChannel")]),t._v(": No exception is expected, but any exceptions raised are ignored.")]),t._v(" "),s("li",[s("a",{attrs:{href:"#exceptionoutputchannel"}},[t._v("ExceptionOutputChannel")]),t._v(": Expected exception.")])]),t._v(" "),s("h4",{attrs:{id:"output-result"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#output-result"}},[t._v("#")]),t._v(" "),s("code",[t._v(".output.result")])]),t._v(" "),s("p",[t._v("The output channel for the result of an expression.\nThe possible output channels are:")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#emptychannel"}},[t._v("EmptyChannel")]),t._v(" (default): No result is expected.")]),t._v(" "),s("li",[s("a",{attrs:{href:"#ignoredchannel"}},[t._v("IgnoredChannel")]),t._v(": No exception is expected, but any exceptions raised are ignored.")]),t._v(" "),s("li",[s("a",{attrs:{href:"#valueoutputchannel"}},[t._v("ValueOutputChannel")]),t._v(": The expected result of the expression.")])]),t._v(" "),s("h2",{attrs:{id:"textdata"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#textdata"}},[t._v("#")]),t._v(" TextData")]),t._v(" "),s("p",[t._v("A "),s("code",[t._v("TextData")]),t._v(" object represents textual data.")]),t._v(" "),s("h3",{attrs:{id:"type"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#type"}},[t._v("#")]),t._v(" "),s("code",[t._v(".type")])]),t._v(" "),s("p",[t._v("The type of data: "),s("code",[t._v("text")]),t._v(" or "),s("code",[t._v("file")]),t._v(".\nIf "),s("code",[t._v("type")]),t._v(" is "),s("code",[t._v("text")]),t._v(", the "),s("code",[t._v(".data")]),t._v(" is interpreted as the textual data itself.\nIf "),s("code",[t._v("type")]),t._v(" is "),s("code",[t._v("file")]),t._v(", the "),s("code",[t._v(".data")]),t._v(" is interpreted as the pathname of a text file in the workdir directory of the judge\nthat contains the textual data.")]),t._v(" "),s("h3",{attrs:{id:"data"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#data"}},[t._v("#")]),t._v(" "),s("code",[t._v(".data")])]),t._v(" "),s("p",[t._v("A string.")]),t._v(" "),s("h2",{attrs:{id:"channels"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#channels"}},[t._v("#")]),t._v(" Channels")]),t._v(" "),s("p",[t._v("The output channels represent all possible side effects of executing the submission.\nHere's an overview of all output channels currently supported by TESTed:")]),t._v(" "),s("h3",{attrs:{id:"emptychannel"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#emptychannel"}},[t._v("#")]),t._v(" EmptyChannel")]),t._v(" "),s("p",[t._v("An "),s("code",[t._v("EmptyChannel")]),t._v(" describes that no output is expected on a specific file descriptor (e.g. stdout or stderr).\nAny output generated will be considered as incorrect by TESTed.\nThe "),s("code",[t._v("EmptyChannel")]),t._v(" is represented by a string constant "),s("code",[t._v("none")]),t._v(".")]),t._v(" "),s("p",[t._v("For example, disallowing any output on standard output:")]),t._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"output"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"stdout"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"none"')]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("For most output types, this is the default value, meaning you don't need to specify it.")]),t._v(" "),s("h3",{attrs:{id:"ignoredchannel"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ignoredchannel"}},[t._v("#")]),t._v(" IgnoredChannel")]),t._v(" "),s("p",[t._v("An IgnoredChannel object describes that no output is expected on a specific file descriptor (e.g. stdout or stderr).\nAny output generated on the file descriptor will be ignored, and is considered correct by TESTed.\nIn other words, if you do not want output, you should use "),s("a",{attrs:{href:"#emptychannel"}},[s("code",[t._v("EmptyChannel")])]),t._v(",\nwhile if you don't care about the output, you should use "),s("code",[t._v("IgnoredChannel")]),t._v(".\nThe "),s("code",[t._v("EmptyChannel")]),t._v(" is represented by a string constant "),s("code",[t._v("ignored")]),t._v(".")]),t._v(" "),s("p",[t._v("For example, ignoring any output on standard output:")]),t._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"output"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"stdout"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ignored"')]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"exceptionoutputchannel"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#exceptionoutputchannel"}},[t._v("#")]),t._v(" ExceptionOutputChannel")]),t._v(" "),s("p",[t._v("An "),s("code",[t._v("ExceptionOutputChannel")]),t._v("describes an expected exception, thrown upon executing the submission by an error message and\nan evaluator used to evaluate the exception.\nIt is represented by an object with two attributes.")]),t._v(" "),s("p",[t._v("For example, if you require an error with the message "),s("code",[t._v('"Error"')]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"output"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"exception"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"exception"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"message"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Valid exceptions"')]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v('Since evaluating anything more than the exception message requires programming-language-specific code,\nTESTed supports the concept of "evaluators".\nThis is a function you can write,\nwhich will be called by TESTed to evaluate whether a thrown exception is the correct one.\nSee the attribute documentation below or the '),s("a",{attrs:{href:"#evaluators"}},[t._v("Evaluators section")]),t._v(" for more information.")]),t._v(" "),s("p",[t._v("For example, requiring a "),s("code",[t._v("assertion")]),t._v(" exception, in an exercise supporting "),s("code",[t._v("Python")]),t._v(", "),s("code",[t._v("Java")]),t._v(" and "),s("code",[t._v("Haskell")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"output"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"exception"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"exception"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"message"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Some assertions went wrong"')]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"evaluator"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"specific"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"evaluators"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"python"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"file"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"evaluator.py"')]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"java"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"file"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Evaluator.java"')]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"haskell"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"file"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Evaluator.hs"')]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h4",{attrs:{id:"exception-message"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#exception-message"}},[t._v("#")]),t._v(" "),s("code",[t._v(".exception.message")])]),t._v(" "),s("p",[t._v("An object representing an expected error message.")]),t._v(" "),s("h4",{attrs:{id:"evaluator"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#evaluator"}},[t._v("#")]),t._v(" "),s("code",[t._v(".evaluator")])]),t._v(" "),s("p",[t._v("The evaluator to use to determine whether the exception is valid or not.\nTESTed currently supports the following two evaluators:")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#genericexceptionevaluator"}},[t._v("GenericExceptionEvaluator")]),t._v(" (default): Built-in evaluator for exceptions.\n"),s("strong",[t._v("Note:")]),t._v(" Only the error message (not the exception type) is evaluated with the built-in evaluator.")]),t._v(" "),s("li",[s("a",{attrs:{href:"#specificevaluator"}},[t._v("SpecificEvaluator")]),t._v(": An evaluator in the programming language of the submission.")])]),t._v(" "),s("h3",{attrs:{id:"exitcodeoutputchannel"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#exitcodeoutputchannel"}},[t._v("#")]),t._v(" ExitCodeOutputChannel")]),t._v(" "),s("p",[t._v("An "),s("code",[t._v("ExitCodeOutputChannel")]),t._v(" object describes the expected exit code of the executed submission.")]),t._v(" "),s("p",[t._v("For example, if you require an exit code of -25:")]),t._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"output"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"exit_code"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"value"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("-25")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),s("p",[t._v("When the expected and actual exit codes are both "),s("code",[t._v("0")]),t._v(", no feedback is generated on this output channel.")])]),t._v(" "),s("h4",{attrs:{id:"value"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#value"}},[t._v("#")]),t._v(" "),s("code",[t._v(".value")])]),t._v(" "),s("p",[t._v("The expected exit code as an integer.")]),t._v(" "),s("h3",{attrs:{id:"fileoutputchannel"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fileoutputchannel"}},[t._v("#")]),t._v(" FileOutputChannel")]),t._v(" "),s("p",[t._v("A "),s("code",[t._v("FileOutputChannel")]),t._v(" object represents a file that is created upon executing the submission.")]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),s("p",[t._v("Currently, these are some known limitations for testing file creation:")]),t._v(" "),s("ul",[s("li",[t._v("Only a single file can be evaluated per test case.")]),t._v(" "),s("li",[t._v("Only text files are supported (no binary files).")])])]),t._v(" "),s("p",[t._v("For example, if the generated file "),s("code",[t._v("gen.txt")]),t._v(" must be identical to a sample file "),s("code",[t._v("expected.txt")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"output"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"file"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"expected_path"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"gen.txt"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"actual_path"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"expected.txt"')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h4",{attrs:{id:"expected-path"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#expected-path"}},[t._v("#")]),t._v(" "),s("code",[t._v(".expected_path")])]),t._v(" "),s("p",[t._v("A relative path to a text file in the "),s("code",[t._v("workdir")]),t._v(" that contains the expected output.")]),t._v(" "),s("h4",{attrs:{id:"actual-path"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#actual-path"}},[t._v("#")]),t._v(" "),s("code",[t._v(".actual_path")])]),t._v(" "),s("p",[t._v("A relative path where a text file is expectedly generated upon execution of the submission.")]),t._v(" "),s("h4",{attrs:{id:"evaluator-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#evaluator-2"}},[t._v("#")]),t._v(" "),s("code",[t._v(".evaluator")])]),t._v(" "),s("p",[t._v("An evaluator used to evaluate the generated text file.\nTESTed currently supports the following two evaluators:")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#generictextevaluator"}},[t._v("GenericTextEvaluator")]),t._v("(default): Built-in evaluator for text and text files.")]),t._v(" "),s("li",[s("a",{attrs:{href:"#programmedevaluator"}},[t._v("ProgrammedEvaluator")]),t._v(": A custom evaluator.")])]),t._v(" "),s("h3",{attrs:{id:"textoutputchannel"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#textoutputchannel"}},[t._v("#")]),t._v(" TextOutputChannel")]),t._v(" "),s("p",[t._v("A "),s("code",[t._v("TextOutputChannel")]),t._v(" object represents text that is expected to be generated on an output channel (e.g. stdout or\nstderr).")]),t._v(" "),s("p",[t._v("For example, if the text "),s("code",[t._v('"Hello world"')]),t._v(" must be written to "),s("code",[t._v("stdout")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"output"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"stdout"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"data"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello world"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"text"')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("It is also possible to use a file containing the expected output:")]),t._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"output"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"stdout"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"data"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"./expected-output.txt"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"file"')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h4",{attrs:{id:"type-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#type-2"}},[t._v("#")]),t._v(" "),s("code",[t._v(".type")])]),t._v(" "),s("p",[t._v("Similar to the "),s("code",[t._v(".type")]),t._v(" attribute of the "),s("a",{attrs:{href:"#textdata"}},[s("code",[t._v("TextData")]),t._v(" object")]),t._v(".\nThe type of data: "),s("code",[t._v("text")]),t._v(" or "),s("code",[t._v("file")]),t._v(".\nIf "),s("code",[t._v("type")]),t._v(" is "),s("code",[t._v("text")]),t._v(", the "),s("code",[t._v(".data")]),t._v(" is interpreted as the textual data itself.\nIf "),s("code",[t._v("type")]),t._v(" is "),s("code",[t._v("file")]),t._v(", the "),s("code",[t._v(".data")]),t._v(" is interpreted as the pathname of a text file in the workdir directory of the judge\nthat contains the textual data.")]),t._v(" "),s("h4",{attrs:{id:"data-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#data-2"}},[t._v("#")]),t._v(" "),s("code",[t._v(".data")])]),t._v(" "),s("p",[t._v("Similar to the "),s("code",[t._v(".data")]),t._v(" attribute of the "),s("a",{attrs:{href:"#textdata"}},[s("code",[t._v("TextData")]),t._v(" object")]),t._v(".\nA string.")]),t._v(" "),s("h4",{attrs:{id:"evaluator-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#evaluator-3"}},[t._v("#")]),t._v(" "),s("code",[t._v(".evaluator")])]),t._v(" "),s("p",[t._v("An evaluator used to evaluate the generated text.\nTESTed currently supports the following two evaluators:")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#generictextevaluator"}},[t._v("GenericTextEvaluator")]),t._v("(default): Built-in evaluator for text and text files.")]),t._v(" "),s("li",[s("a",{attrs:{href:"#programmedevaluator"}},[t._v("ProgrammedEvaluator")]),t._v(": A custom evaluator.")])]),t._v(" "),s("h3",{attrs:{id:"valueoutputchannel"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#valueoutputchannel"}},[t._v("#")]),t._v(" ValueOutputChannel")]),t._v(" "),s("p",[t._v("A "),s("code",[t._v("ValueOutputChannel")]),t._v(" object represents the value obtained upon evaluating the expression of the test case.")]),t._v(" "),s("p",[t._v("For example, if a function call must produce a list with two strings ("),s("code",[t._v('"a"')]),t._v(" and "),s("code",[t._v('"c"')]),t._v("):")]),t._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"output"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"result"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"value"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"data"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"data"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"text"')]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"data"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"c"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"text"')]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"sequence"')]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h4",{attrs:{id:"value-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#value-2"}},[t._v("#")]),t._v(" "),s("code",[t._v(".value")])]),t._v(" "),s("p",[t._v("The expected value.\nSee "),s("a",{attrs:{href:"#statements-and-expressions"}},[t._v("Statements and expressions")]),t._v(" to learn how values must be described.")]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),s("p",[t._v("The expected value must be a literal value, and can not be a function call or a variable.")])]),t._v(" "),s("h4",{attrs:{id:"evaluator-4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#evaluator-4"}},[t._v("#")]),t._v(" "),s("code",[t._v(".evaluator")])]),t._v(" "),s("p",[t._v("An evaluator used to evaluate the generated value.\nTESTed currently supports the following three evaluators:")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#genericvalueevaluator"}},[t._v("GenericValueEvaluator")]),t._v(" (default): Built-in evaluator that compares the generated value with\nthe expected value.")]),t._v(" "),s("li",[s("a",{attrs:{href:"#programmedevaluator"}},[t._v("ProgrammedEvaluator")]),t._v(": A custom evaluator that is independent of the programming language of the\nsubmission.")]),t._v(" "),s("li",[s("a",{attrs:{href:"#specificevaluator"}},[t._v("SpecificEvaluator")]),t._v(": A custom evaluator that depends on the programming language of the\nsubmission.")])]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),s("p",[t._v("The first two evaluators only support datatypes that are also "),s("a",{attrs:{href:"#data-types"}},[t._v("supported by TESTed")]),t._v(".\nTo support custom datatypes, you must use a "),s("code",[t._v("SpecificEvaluator")]),t._v(".")])]),t._v(" "),s("h2",{attrs:{id:"evaluators"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#evaluators"}},[t._v("#")]),t._v(" Evaluators")]),t._v(" "),s("p",[t._v("There are three ways of checking results in TESTed:")]),t._v(" "),s("ol",[s("li",[s("em",[t._v("Built-in checks")]),t._v("\nThese are programming-language-independent, and are the preferred way to use TESTed.")]),t._v(" "),s("li",[s("em",[t._v("Programmed checks")]),t._v("\nIn this case, you, as the exercise author, provide an implementation of a function which will be called by TESTed\nwhen checking the results.\nYou only have to implement this function once in one programming language.\nTESTed takes care of translating the results between multiple programming languages.\nThis means these types of checks are still programming-language-independent.\nA good example is checking non-deterministic behavior, such as randomness or dynamic results, e.g. when results are\ndependent on the current date.")]),t._v(" "),s("li",[s("em",[t._v("Language-specific checks")]),t._v("\nHere, you need to provide the implementation of a function for each programming language the exercise needs to\nsupport.\nThe downside is that the test suite is no longer programming-language-independent.\nFor example, if a new language is added to TESTed, your test suite will need updating.\nHowever, this does allow you to test programming-language-specific aspects, such as custom datatypes.")])]),t._v(" "),s("p",[t._v("Internally, these checks are implemented using evaluators.\nThe "),s("em",[t._v("built-in checks")]),t._v(' are implemented using "generic evaluators", which are the default for all output channels.\nThis means you often don\'t need to specify them.')]),t._v(" "),s("p",[s("em",[t._v("Programmed checks")]),t._v(" are achieved using the "),s("a",{attrs:{href:"#specificevaluator"}},[s("code",[t._v("SpecificEvaluator")])]),t._v(".\n"),s("em",[t._v("Language-specific checks")]),t._v(" are implemented using the "),s("a",{attrs:{href:"#programmedevaluator"}},[s("code",[t._v("ProgrammedEvaluator")])]),t._v(".")]),t._v(" "),s("p",[t._v("Each evaluator has an attribute "),s("code",[t._v(".type")]),t._v(" with the internal type of the evaluator.\nGeneric evaluators also have an attribute "),s("code",[t._v(".name")]),t._v(" with the internal name of the evaluator.")]),t._v(" "),s("h3",{attrs:{id:"genericexceptionevaluator"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#genericexceptionevaluator"}},[t._v("#")]),t._v(" GenericExceptionEvaluator")]),t._v(" "),s("p",[t._v("A "),s("code",[t._v("GenericExceptionEvaluator")]),t._v(" object contains all the necessary information to use the built-in evaluator for\nexceptions.")]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),s("p",[t._v("This evaluator only evaluates error messages.\nIt does not take into account exception types because of their programming language dependencies.")])]),t._v(" "),s("p",[t._v("For example, an "),s("a",{attrs:{href:"#exceptionoutputchannel"}},[s("code",[t._v("ExceptionOutputChannel")])]),t._v(" with the generic evaluator:")]),t._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"output"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"exception"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"exception"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"message"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Valid exceptions"')]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"evaluator"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"builtin"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"name"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"exception"')]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("Note that you never have to actually specify the example above, since the generic evaluator is the default value.")]),t._v(" "),s("h4",{attrs:{id:"type-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#type-3"}},[t._v("#")]),t._v(" "),s("code",[t._v(".type")])]),t._v(" "),s("p",[t._v("A string with constant value "),s("code",[t._v("builtin")]),t._v(".")]),t._v(" "),s("h4",{attrs:{id:"name-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#name-2"}},[t._v("#")]),t._v(" "),s("code",[t._v(".name")])]),t._v(" "),s("p",[t._v("A string with constant value "),s("code",[t._v("exception")]),t._v(".")]),t._v(" "),s("h4",{attrs:{id:"options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#options"}},[t._v("#")]),t._v(" "),s("code",[t._v(".options")])]),t._v(" "),s("p",[t._v("The "),s("em",[t._v("GenericExceptionEvaluator")]),t._v(" does not support any options at the moment.")]),t._v(" "),s("h3",{attrs:{id:"genericvalueevaluator"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#genericvalueevaluator"}},[t._v("#")]),t._v(" GenericValueEvaluator")]),t._v(" "),s("p",[t._v("A "),s("code",[t._v("GenericValueEvaluator")]),t._v(" object contains all the necessary information to use the built-in evaluator for values.")]),t._v(" "),s("p",[t._v("For example, a "),s("a",{attrs:{href:"#valueoutputchannel"}},[s("code",[t._v("ValueOutputChannel")])]),t._v(" with the generic evaluator:")]),t._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"output"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"result"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"evaluator"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"builtin"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"name"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"value"')]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"value"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"data"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"data"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"text"')]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"data"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"c"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"text"')]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"sequence"')]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h4",{attrs:{id:"type-4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#type-4"}},[t._v("#")]),t._v(" "),s("code",[t._v(".type")])]),t._v(" "),s("p",[t._v("A string with constant value "),s("code",[t._v("builtin")]),t._v(".")]),t._v(" "),s("h4",{attrs:{id:"name-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#name-3"}},[t._v("#")]),t._v(" "),s("code",[t._v(".name")])]),t._v(" "),s("p",[t._v("A string with constant value "),s("code",[t._v("value")]),t._v(".")]),t._v(" "),s("h4",{attrs:{id:"options-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#options-2"}},[t._v("#")]),t._v(" "),s("code",[t._v(".options")])]),t._v(" "),s("p",[t._v("The "),s("em",[t._v("GenericValueEvaluator")]),t._v(" does not support any options at the moment.")]),t._v(" "),s("h3",{attrs:{id:"generictextevaluator"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#generictextevaluator"}},[t._v("#")]),t._v(" GenericTextEvaluator")]),t._v(" "),s("p",[t._v("A "),s("code",[t._v("GenericTextEvaluator")]),t._v(" object contains all the necessary information to use the built-in evaluator for textual data.")]),t._v(" "),s("h4",{attrs:{id:"type-5"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#type-5"}},[t._v("#")]),t._v(" "),s("code",[t._v(".type")])]),t._v(" "),s("p",[t._v("A string with constant value "),s("code",[t._v("builtin")]),t._v(".")]),t._v(" "),s("h4",{attrs:{id:"name-4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#name-4"}},[t._v("#")]),t._v(" "),s("code",[t._v(".name")])]),t._v(" "),s("p",[t._v("A string with constant value "),s("code",[t._v("text")]),t._v(" or "),s("code",[t._v("file")]),t._v(".")]),t._v(" "),s("h4",{attrs:{id:"options-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#options-3"}},[t._v("#")]),t._v(" "),s("code",[t._v(".options")])]),t._v(" "),s("p",[t._v("By default, exact matching is used to compare a generated text with an expected text.\nThe following options can be used to adjust the matching behaviour:")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("ignoreWhitespace")]),t._v(": Ignore leading and trailing whitespace.")]),t._v(" "),s("li",[s("code",[t._v("caseInsensitive")]),t._v(": Ignore differences between uppercase and lowercase.")]),t._v(" "),s("li",[s("code",[t._v("tryFloatingPoint")]),t._v(": Try to compare the text as floats.")]),t._v(" "),s("li",[s("code",[t._v("applyRounding")]),t._v(": Apply rounding when comparing text as floats.")]),t._v(" "),s("li",[s("code",[t._v("roundTo")]),t._v(": Precision of floating points when rounding numbers. Mandatory option when rounding is applied.")])]),t._v(" "),s("h3",{attrs:{id:"programmedevaluator"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#programmedevaluator"}},[t._v("#")]),t._v(" ProgrammedEvaluator")]),t._v(" "),s("p",[t._v("A "),s("code",[t._v("ProgrammedEvaluator")]),t._v(" object contains all the necessary information to use a custom evaluator for values that works\nindependent of the programming language of the submission.")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("Hint")]),t._v(" "),s("p",[t._v("For performance reasons, we strongly recommend implementing custom evaluators in Python if this is an option.\nIf the programmed evaluator is implemented in Python, it is executed in the same process as TESTed and no language\nbarriers need to be crossed.")]),t._v(" "),s("p",[t._v("Context switching between the TESTed core and a programmed evaluator comes with an overhead for starting new processes,\ncompilation, and serializing and deserializing values and function calls.")])]),t._v(" "),s("p",[t._v("For example, using a programmed evaluator for the return value:")]),t._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"output"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"result"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"value"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"text"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"data"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"input-3"')]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"evaluator"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"programmed"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"function"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"file"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"evaluator.py"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"name"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"evaluate_value"')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"language"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"python"')]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h4",{attrs:{id:"type-6"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#type-6"}},[t._v("#")]),t._v(" "),s("code",[t._v(".type")])]),t._v(" "),s("p",[t._v("A string with constant value "),s("code",[t._v("programmed")]),t._v(".")]),t._v(" "),s("h4",{attrs:{id:"language"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#language"}},[t._v("#")]),t._v(" "),s("code",[t._v(".language")])]),t._v(" "),s("p",[t._v("The programming language of the evaluation function.\nNote that this is independent of the programming language of the submission.")]),t._v(" "),s("h4",{attrs:{id:"function"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#function"}},[t._v("#")]),t._v(" "),s("code",[t._v(".function")])]),t._v(" "),s("p",[t._v("An "),s("a",{attrs:{href:"#evaluationfunction"}},[s("code",[t._v("EvaluationFunction")])]),t._v(" object that represents the custom evaluation function.")]),t._v(" "),s("h4",{attrs:{id:"arguments"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#arguments"}},[t._v("#")]),t._v(" "),s("code",[t._v(".arguments.*")])]),t._v(" "),s("p",[t._v("A list of arguments that are passed when calling the evaluation function (see "),s("a",{attrs:{href:"#evaluationfunction"}},[t._v("EvaluationFunction")]),t._v("\nand "),s("a",{attrs:{href:"#statements-and-expressions"}},[t._v("Statements and expressions")]),t._v(").")]),t._v(" "),s("h3",{attrs:{id:"specificevaluator"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#specificevaluator"}},[t._v("#")]),t._v(" SpecificEvaluator")]),t._v(" "),s("p",[t._v("A "),s("code",[t._v("SpecificEvaluator")]),t._v(" object contains all the necessary information to use a custom evaluator for values that depends on\nthe specific programming language of the submission.")]),t._v(" "),s("p",[t._v("For example, using a specific evaluator for the return value:")]),t._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"output"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"result"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"evaluator"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"specific"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"evaluators"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"python"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"file"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"evaluator.py"')]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"java"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"file"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Evaluator.java"')]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"haskell"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"file"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Evaluator.hs"')]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"c"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"file"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"evaluator.c"')]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"javascript"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"file"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"evaluator.js"')]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h4",{attrs:{id:"type-7"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#type-7"}},[t._v("#")]),t._v(" "),s("code",[t._v(".type")])]),t._v(" "),s("p",[t._v("A string with constant value "),s("code",[t._v("specific")]),t._v(".")]),t._v(" "),s("h4",{attrs:{id:"evaluators-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#evaluators-2"}},[t._v("#")]),t._v(" "),s("code",[t._v(".evaluators")])]),t._v(" "),s("p",[t._v("An object mapping programming languages onto a "),s("a",{attrs:{href:"#evaluationfunction"}},[s("code",[t._v("EvaluationFunction")])]),t._v(" object that represents the\ncustom evaluation function for that programming language.\nThe keys of the objects are strings, e.g. "),s("code",[t._v('"python"')]),t._v(" or "),s("code",[t._v('"java"')]),t._v(".")]),t._v(" "),s("div",{staticClass:"custom-block danger"},[s("p",{staticClass:"custom-block-title"},[t._v("DANGER")]),t._v(" "),s("p",[t._v("A submission can not be evaluated if there is no evaluator function associated with its programming language.\nFor example, in the fragment above, the exercise will not be solvable in Kotlin.")])]),t._v(" "),s("h3",{attrs:{id:"evaluationfunction"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#evaluationfunction"}},[t._v("#")]),t._v(" EvaluationFunction")]),t._v(" "),s("p",[t._v("An "),s("code",[t._v("EvaluationFunction")]),t._v(" object represents a function that can be called as an evaluator function.")]),t._v(" "),s("p",[t._v("When used with a programmed evaluator, the function takes three arguments:")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("expected")]),t._v(": the expected return value from the test suite")]),t._v(" "),s("li",[s("code",[t._v("actual")]),t._v(": the actual return value, produced by the submission")]),t._v(" "),s("li",[s("code",[t._v("arguments")]),t._v(": a list of additional arguments from the test suite")])]),t._v(" "),s("p",[t._v("It must return a "),s("a",{attrs:{href:"#evaluationresult"}},[s("code",[t._v("EvaluationResult")])]),t._v(".")]),t._v(" "),s("p",[t._v("For example:")]),t._v(" "),s("tabs",{attrs:{options:{useUrlFragment:!1}}},[s("tab",{attrs:{id:"haskell-3",name:"Haskell"}},[s("div",{staticClass:"language-haskell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-haskell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("{-# LANGUAGE ScopedTypeVariables #-}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("module")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Evaluator")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token import-statement"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" EvaluationUtils")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token import-statement"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" Control"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Exception")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("evaluate_value")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("String")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("String")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("EvaluationResult")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("evaluate_value")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("expected")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("actual")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("arguments")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("correct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("actual")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("expected")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("True")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("False")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("evaluationResult")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("result")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("correct")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("readableExpected")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Just")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("expected")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("readableActual")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Just")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("actual")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("messages")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("message")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hallo"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),s("tab",{attrs:{id:"java-3",name:"Java"}},[s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token import"}},[s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("util"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Evaluator")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("EvaluationResult")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("evaluateValue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" expected"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" actual"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" arguments"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("EvaluationResult")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("builder")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("expected"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("expected"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("withReadableExpected")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("expected"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("withReadableActual")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("actual "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" actual"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("withMessage")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("EvaluationResult"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Message")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hallo"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("build")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),s("tab",{attrs:{id:"javascript-3",name:"JavaScript"}},[s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("evaluateValue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("expected"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" actual"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" args")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"result"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" expected "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" actual"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"expected"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" expected"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"actual"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" actual"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"messages"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"description"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hallo"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"format"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"text"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nexports"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("evaluateValue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" evaluateValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),s("tab",{attrs:{id:"kotlin-3",name:"Kotlin"}},[s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" Evaluator "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("companion")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("object")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token annotation builtin"}},[t._v("@JvmStatic")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("evaluateValue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("expected"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Any"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("actual")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Any"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arguments"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" List"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Any"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" EvaluationResult "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" EvaluationResult"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Builder")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n                result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" expected "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("actual")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                readableExpected "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" expected"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                readableActual "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("actual")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?:")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-literal singleline"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')])]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("withMessage")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("EvaluationResult"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Message")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string-literal singleline"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hallo"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("build")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),s("tab",{attrs:{id:"python-3",name:"Python"}},[s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" evaluation_utils "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" EvaluationResult"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Message\n\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("evaluate_value")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("expected"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" actual"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" EvaluationResult"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("expected "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" actual"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" expected"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" actual"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Message"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hallo"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])],1),t._v(" "),s("p",[t._v("When used with a programming-language-specific evaluator, the function takes one argument:")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("actual")]),t._v(": the actual return value, produced by the submission")])]),t._v(" "),s("p",[t._v("It must also return a "),s("a",{attrs:{href:"#evaluationresult"}},[s("code",[t._v("EvaluationResult")])]),t._v(".")]),t._v(" "),s("p",[t._v("For example, the evaluator function for a programming-language-specific evaluator:")]),t._v(" "),s("tabs",{attrs:{options:{useUrlFragment:!1}}},[s("tab",{attrs:{id:"c-3",name:"C"}},[s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<string.h>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdbool.h>")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"evaluation_result.h"')])]),t._v("\n\nEvaluationResult"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("evaluate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" actual"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    bool result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("strcmp")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"correct"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" actual"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    EvaluationResult"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" r "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("create_result")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    r"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    r"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("readableExpected "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"correct"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    r"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("readableActual "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" actual"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    r"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("messages"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("create_message")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hallo"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),s("tab",{attrs:{id:"haskell-4",name:"Haskell"}},[s("div",{staticClass:"language-haskell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-haskell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("{-# LANGUAGE ScopedTypeVariables #-}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("module")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Evaluator")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token import-statement"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" EvaluationUtils")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token import-statement"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" Control"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Exception")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("evaluate")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("String")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("EvaluationResult")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("evaluate")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("value")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("correct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("value")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"correct"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("True")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("False")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("evaluationResult")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("result")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("correct")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("readableExpected")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Just")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"correct"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("readableActual")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Just")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("value")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("messages")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("message")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hallo"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),s("tab",{attrs:{id:"java-4",name:"Java"}},[s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token import"}},[s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("util"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Evaluator")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("EvaluationResult")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("evaluate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" actual"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" correct "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"correct"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("actual"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("EvaluationResult")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("builder")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("correct"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("withReadableExpected")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"correct"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("withReadableActual")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("actual "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" actual"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("withMessage")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("EvaluationResult"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Message")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hallo"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("build")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),s("tab",{attrs:{id:"javascript-4",name:"JavaScript"}},[s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("evaluate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("actual")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" correct "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" actual "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"correct"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"result"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" correct"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"readable_expected"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"correct"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"readable_actual"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" actual"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"messages"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"description"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hallo"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"format"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"text"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nexports"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("evaluate "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" evaluate"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),s("tab",{attrs:{id:"kotlin-4",name:"Kotlin"}},[s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" Evaluator "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("companion")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("object")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token annotation builtin"}},[t._v("@JvmStatic")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("evaluate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("actual")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Any"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" EvaluationResult "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" EvaluationResult"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Builder")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n                result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-literal singleline"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"correct"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("actual")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                readableExpected "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("actual")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                readableActual "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("actual")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?:")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-literal singleline"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')])]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("withMessage")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("EvaluationResult"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Message")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string-literal singleline"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hallo"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("build")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),s("tab",{attrs:{id:"python-4",name:"Python"}},[s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" evaluation_utils "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" EvaluationResult"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Message\n\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("evaluate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("actual"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    correct "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" actual "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"correct"')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" EvaluationResult"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("correct"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"correct"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" actual"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Message"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hallo"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])],1),t._v(" "),s("h4",{attrs:{id:"file"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#file"}},[t._v("#")]),t._v(" "),s("code",[t._v(".file")])]),t._v(" "),s("p",[t._v("The path name of the source code relative to the evaluation directory of the exercise.\nThe source code must at least define the custom evaluator function.")]),t._v(" "),s("h4",{attrs:{id:"name-5"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#name-5"}},[t._v("#")]),t._v(" "),s("code",[t._v(".name")])]),t._v(" "),s("p",[t._v("The name of the custom evaluator function, with a default value of "),s("code",[t._v("evaluate")]),t._v(".")]),t._v(" "),s("h3",{attrs:{id:"evaluationresult"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#evaluationresult"}},[t._v("#")]),t._v(" EvaluationResult")]),t._v(" "),s("p",[t._v("The result of an evaluator function.\nIn most languages, TESTed provides utilities to create a correct return type.\nIn other languages, you must return an object with the following attributes:")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("result")]),t._v(": the result of the check\n"),s("ul",[s("li",[s("code",[t._v(".enum")]),t._v(": the actual result (useful statuses include "),s("code",[t._v("compilation error")]),t._v(", "),s("code",[t._v("correct")]),t._v(", "),s("code",[t._v("wrong")]),t._v(", "),s("code",[t._v("internal error")]),t._v(").\nCheck the Dodona docs for more information on the status.")]),t._v(" "),s("li",[s("code",[t._v(".human")]),t._v(": an optional human-readable description of the status.\nThis allows you to give more information.")])])]),t._v(" "),s("li",[s("code",[t._v("readable_expected")]),t._v(": a human-readable representation of the expected value")]),t._v(" "),s("li",[s("code",[t._v("readable_actual")]),t._v(": a human-readable representation of the actual value")]),t._v(" "),s("li",[s("code",[t._v("messages")]),t._v(": an optional list of additional messages to display")])]),t._v(" "),s("h2",{attrs:{id:"statements-and-expressions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#statements-and-expressions"}},[t._v("#")]),t._v(" Statements and expressions")]),t._v(" "),s("p",[t._v("TESTed supports a restricted language to describe expressions and statements in a generic way.\nThe language contains literal values (and their data types), variables, assignments, object construction and\nfunction/method calls.")]),t._v(" "),s("h3",{attrs:{id:"assignment"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#assignment"}},[t._v("#")]),t._v(" Assignment")]),t._v(" "),s("p",[t._v("Variable assignment is the only statement that is currently supported by TESTed.\nAn assignment is represented by an object.")]),t._v(" "),s("p",[t._v("For example, assigning the result of a function call to a variable called "),s("code",[t._v("codes01")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"input"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"integer"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"variable"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"codes01"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"expression"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"function"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"name"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"echo"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"arguments"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h4",{attrs:{id:"variable"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#variable"}},[t._v("#")]),t._v(" "),s("code",[t._v(".variable")])]),t._v(" "),s("p",[t._v("The name of the variable.\nGenerally, safe characters are ASCII letters and numbers, as well as an underscore.\nOther characters may limit in which programming languages the test suite is usable.")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("It is recommended to use "),s("code",[t._v("snake_case")]),t._v(" for the variable name.\nThis way, TESTed will transform it into the correct convention for each programming language.")])]),t._v(" "),s("h4",{attrs:{id:"expression"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#expression"}},[t._v("#")]),t._v(" "),s("code",[t._v(".expression")])]),t._v(" "),s("p",[t._v("The "),s("a",{attrs:{href:"#expressions"}},[t._v("expression")]),t._v(" that is assigned to the variable.")]),t._v(" "),s("h4",{attrs:{id:"type-8"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#type-8"}},[t._v("#")]),t._v(" "),s("code",[t._v(".type")])]),t._v(" "),s("p",[t._v("The "),s("a",{attrs:{href:"#data-types"}},[t._v("data type")]),t._v(" of the variable.")]),t._v(" "),s("h3",{attrs:{id:"expressions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#expressions"}},[t._v("#")]),t._v(" Expressions")]),t._v(" "),s("p",[t._v("TESTed currently supports three different kinds of expressions:\n"),s("a",{attrs:{href:"#identifier"}},[t._v("identifiers")]),t._v(", "),s("a",{attrs:{href:"#function-call"}},[t._v("function calls")]),t._v(" and "),s("a",{attrs:{href:"#literal-values"}},[t._v("literal values")]),t._v(".")]),t._v(" "),s("h4",{attrs:{id:"identifier"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#identifier"}},[t._v("#")]),t._v(" Identifier")]),t._v(" "),s("p",[t._v("An identifier is a string that represents a variable.")]),t._v(" "),s("p",[t._v("For example, to use a previously defined variable:")]),t._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"input"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"integer"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"variable"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"codes01"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"expression"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"previously_defined_variable"')]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h4",{attrs:{id:"function-call"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#function-call"}},[t._v("#")]),t._v(" Function call")]),t._v(" "),s("p",[t._v("A "),s("code",[t._v("FunctionCall")]),t._v(" object represents a function call, a method call, a constructor or an object property")]),t._v(" "),s("p",[t._v("For example, calling a top-level function:")]),t._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"input"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"function"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"name"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"echo"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"arguments"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"text"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"data"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"input-1"')]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("Calling the method "),s("code",[t._v("the_method")]),t._v(" on an object instance called "),s("code",[t._v("some_object")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"input"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"function"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"namespace"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"some_object"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"name"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"the_method"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"arguments"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"text"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"data"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"input-1"')]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("Accessing the property "),s("code",[t._v("property")]),t._v(" on an object instance called "),s("code",[t._v("some_object")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"input"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"property"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"namespace"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"some_object"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"name"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"the_method"')]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h5",{attrs:{id:"type-9"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#type-9"}},[t._v("#")]),t._v(" "),s("code",[t._v(".type")])]),t._v(" "),s("p",[t._v('Indicates the type of "function call".\nTESTed supports three kinds of function calls:')]),t._v(" "),s("ul",[s("li",[s("code",[t._v("function")]),t._v(": a function or method")]),t._v(" "),s("li",[s("code",[t._v("constructor")]),t._v(": an object constructor")]),t._v(" "),s("li",[s("code",[t._v("property")]),t._v(": an object property")])]),t._v(" "),s("p",[t._v("The name of the object is given as the "),s("code",[t._v(".namespace")]),t._v(" attribute.\nNot providing a namespace means the global namespace will be used.\nFor example, not providing a namespace for a property call will use global variables instead.")]),t._v(" "),s("h5",{attrs:{id:"namespace-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#namespace-2"}},[t._v("#")]),t._v(" "),s("code",[t._v(".namespace")])]),t._v(" "),s("p",[t._v("The object or namespace on which the function, method or property should be called.\nNot providing a namespace means the global namespace will be used.\nFor example, not providing a namespace for a property call will use global variables instead.")]),t._v(" "),s("h5",{attrs:{id:"arguments-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#arguments-2"}},[t._v("#")]),t._v(" "),s("code",[t._v(".arguments.*")])]),t._v(" "),s("p",[t._v("An array of expressions or "),s("code",[t._v("NamedArguments")]),t._v(" that are passed as arguments when calling the function, method or\nconstructor.")]),t._v(" "),s("p",[t._v("The result of any given expression is passed to the function as a positional argument.")]),t._v(" "),s("p",[t._v("A named argument represents an argument that is passed to a specific function parameter, identified by its name, when\ncalling a function.\nWhile in many programming languages, the order of named arguments is of no consequence, the order does matter in TESTed.\nNamed arguments are converted to positional arguments for programming language that lack support for named arguments.\nTheir position is determined by their position in the array of arguments.")]),t._v(" "),s("p",[t._v("A "),s("code",[t._v("NamedArguments")]),t._v(" object has two attributes:")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("name")]),t._v(": The parameter name.")]),t._v(" "),s("li",[s("code",[t._v("value")]),t._v(": The value of the argument, which must be an "),s("a",{attrs:{href:"#expressions"}},[t._v("expression")]),t._v(".")])]),t._v(" "),s("p",[t._v("For example, a function call in which the first argument is positional, while the second argument is a named argument:")]),t._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"input"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"function"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"name"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"echo"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"arguments"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"text"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"data"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"input-1"')]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"name"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"separator"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"value"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"text"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"data"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-"')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h4",{attrs:{id:"literal-values"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#literal-values"}},[t._v("#")]),t._v(" Literal values")]),t._v(" "),s("p",[t._v("Any value that has a "),s("a",{attrs:{href:"#data-types"}},[t._v("supported data type")]),t._v(" can be written as a literal.\nThese are divided into six kinds of literal values, depending on how the value is encoded in JSON.")]),t._v(" "),s("p",[t._v("The six kinds are "),s("a",{attrs:{href:"#numbers"}},[t._v("numbers")]),t._v(", "),s("a",{attrs:{href:"#strings"}},[t._v("text")]),t._v(",\n"),s("a",{attrs:{href:"#booleans"}},[t._v("booleans")]),t._v(", "),s("a",{attrs:{href:"#sequences"}},[t._v("sequences")]),t._v(", "),s("a",{attrs:{href:"#dictionaries"}},[t._v("dictionaries")]),t._v(" and "),s("a",{attrs:{href:"#nothing"}},[t._v('"nothing"')]),t._v(".")]),t._v(" "),s("p",[t._v("Each literal value is represented by a JSON object with two properties:")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("type")]),t._v(": the "),s("a",{attrs:{href:"#data-types"}},[t._v("data type")]),t._v(" of the value")]),t._v(" "),s("li",[s("code",[t._v("data")]),t._v(": the value, encoded in JSON")])]),t._v(" "),s("h5",{attrs:{id:"numbers"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#numbers"}},[t._v("#")]),t._v(" Numbers")]),t._v(" "),s("p",[t._v("Numbers are encoded as a numeric JSON value, or one of the following special string constants:")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("nan")]),t._v(': special code for "Not a Number" (NaN)')]),t._v(" "),s("li",[s("code",[t._v("inf")]),t._v(": +∞")]),t._v(" "),s("li",[s("code",[t._v("-inf")]),t._v(": -∞")])]),t._v(" "),s("p",[t._v("For example, an integer would be:")]),t._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"integer"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"value"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("Infinity would be represented as:")]),t._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"integer"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"value"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"inf"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h5",{attrs:{id:"strings"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#strings"}},[t._v("#")]),t._v(" Strings")]),t._v(" "),s("p",[t._v("Strings are encoded as a JSON string.")]),t._v(" "),s("p",[t._v("For example:")]),t._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"text"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"value"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello World"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h5",{attrs:{id:"booleans"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#booleans"}},[t._v("#")]),t._v(" Booleans")]),t._v(" "),s("p",[t._v("Booleans are encoded using JSON booleans.")]),t._v(" "),s("p",[t._v("For example:")]),t._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"boolean"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"value"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h5",{attrs:{id:"sequences"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sequences"}},[t._v("#")]),t._v(" Sequences")]),t._v(" "),s("p",[t._v("Sequences are encoded as a JSON list.\nEach element of the list is again an "),s("a",{attrs:{href:"#expressions"}},[t._v("expression")]),t._v(".")]),t._v(" "),s("p",[t._v("For example, a set with one literal element:")]),t._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"set"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"value"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"boolean"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"value"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h5",{attrs:{id:"dictionaries"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dictionaries"}},[t._v("#")]),t._v(" Dictionaries")]),t._v(" "),s("p",[t._v("Objects are encoded using a list of key-value pairs.\nA key-value pair is an object with two properties:")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("key")]),t._v(": an "),s("a",{attrs:{href:"#expressions"}},[t._v("expression")]),t._v(" representing the key")]),t._v(" "),s("li",[s("code",[t._v("value")]),t._v(": an "),s("a",{attrs:{href:"#expressions"}},[t._v("expression")]),t._v(" representing the value")])]),t._v(" "),s("p",[t._v("We cannot use a JSON object, since some programming languages support objects/maps/dicts where the keys are not just strings.\nFor example, an object where the key is a list ("),s("code",[t._v("[5]")]),t._v("), and the value a boolean ("),s("code",[t._v("false")]),t._v("):")]),t._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"map"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"value"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"key"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"list"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"value"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"integer"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"value"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"value"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"boolean"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"value"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h5",{attrs:{id:"nothing"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nothing"}},[t._v("#")]),t._v(" Nothing")]),t._v(" "),s("p",[t._v("Nothing is represented as JSON "),s("code",[t._v("null")]),t._v(".")]),t._v(" "),s("p",[t._v("For example:")]),t._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"nothing"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"value"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token null keyword"}},[t._v("null")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"data-types"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#data-types"}},[t._v("#")]),t._v(" Data types")]),t._v(" "),s("p",[t._v("TESTed supports three different kinds of data types: "),s("a",{attrs:{href:"#basic-types"}},[t._v("basic data types")]),t._v(",\n"),s("a",{attrs:{href:"#advanced-types"}},[t._v("advanced data types")]),t._v(" and "),s("a",{attrs:{href:"#custom-types"}},[t._v("custom types")]),t._v(".")]),t._v(" "),s("p",[t._v("A complete list of all supported data types and their mapping to the different programming languages can be found "),s("a",{attrs:{href:"/en/tested/types"}},[t._v("here")]),t._v(".")]),t._v(" "),s("h4",{attrs:{id:"basic-types"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#basic-types"}},[t._v("#")]),t._v(" Basic types")]),t._v(" "),s("p",[t._v("Basic types represent abstract data types such as integers, not specific implementations thereof like unsigned 8-bit\nintegers.\nThey are used as the default data type for a concept in a specific programming language,\nbut each programming language can have multiple data types that map to the concept represented by a basic type.")]),t._v(" "),s("p",[t._v("See "),s("a",{attrs:{href:"/en/tested/types#basic-types"}},[s("em",[t._v("Data type support in TESTed")])]),t._v(" for a list of types.")]),t._v(" "),s("h4",{attrs:{id:"advanced-types"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#advanced-types"}},[t._v("#")]),t._v(" Advanced types")]),t._v(" "),s("p",[t._v("Advanced types represent specific implementations of data types, like unsigned 8-bit integers.\nEach advanced type corresponds to at most one data type in a programming language,\nand some programming languages will not have support for specific implementations.")]),t._v(" "),s("p",[t._v("See "),s("a",{attrs:{href:"/en/tested/types#advanced-types"}},[s("em",[t._v("Data type support in TESTed")])]),t._v(" for a list of types.")]),t._v(" "),s("h4",{attrs:{id:"custom-types"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#custom-types"}},[t._v("#")]),t._v(" Custom types")]),t._v(" "),s("p",[t._v('TESTed has limited support for using custom types.\nThe "data" of this type will be outputted verbatim in the various programming languages.\nA custom value is indicated with the type '),s("code",[t._v('"custom"')]),t._v(".")]),t._v(" "),s("div",{staticClass:"custom-block danger"},[s("p",{staticClass:"custom-block-title"},[t._v("DANGER")]),t._v(" "),s("p",[t._v("As custom types are outputted verbatim, it is difficult to use them while still keeping the test suite\nprogramming-language-independent.\nFor that reason, we strongly discourage using them.")])])],1)}),[],!1,null,null,null);a.default=n.exports}}]);