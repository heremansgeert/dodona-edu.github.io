(window.webpackJsonp=window.webpackJsonp||[]).push([[119],{861:function(e,t,a){"use strict";a.r(t);var n=a(29),s=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"referentie-voor-dsl-testplannen"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#referentie-voor-dsl-testplannen"}},[e._v("#")]),e._v(" Referentie voor DSL-testplannen")]),e._v(" "),a("p",[e._v("Een testplan voor TESTed legt vast welke testgevallen uitgevoerd worden op een ingediende oplossing.\nTESTed verschilt van andere judges doordat testplannen niet afhankelijk zijn van één bepaalde programmeertaal.\nDerhalve volstaat één testplan om ingediende oplossingen in verschillende programmeertalen van dezelfde oefening te evalueren.")]),e._v(" "),a("p",[e._v("Naast het "),a("a",{attrs:{href:"/nl/tested/json"}},[e._v("geavanceerde formaat")]),e._v(" voor testplannen hebben we ook een kleine domeinspecifieke taal ("),a("em",[e._v("domain-specific language")]),e._v(", DSL) ontwikkeld om het schrijven van testplannen makkelijker te maken.\nDit document is de referentiegids voor het formaat van DSL-testplannen en bevat alle opties en mogelijkheden.")]),e._v(" "),a("p",[e._v("DSL-testplannen worden geschreven in YAML.\nEen JSON Schema van het formaat is beschikbaar in de repository van TESTed.\nDit schema kan zorgen voor automatische controles en automatisch aanvullen in uw tekstverwerker.")]),e._v(" "),a("h2",{attrs:{id:"structuur-en-opbouw"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#structuur-en-opbouw"}},[e._v("#")]),e._v(" Structuur en opbouw")]),e._v(" "),a("p",[e._v("De structuur van een DSL-testplan volgt de algemene structuur van testen in Dodona, en bestaat uit drie niveaus:")]),e._v(" "),a("ol",[a("li",[a("a",{attrs:{href:"#tabs"}},[e._v("Tabs")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#contexten"}},[e._v("Contexten")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#testgevallen"}},[e._v("Testgevallen")])])]),e._v(" "),a("p",[e._v("In de rest van de paragraaf beschrijven we elk niveau.\nVerplichte attributen worden aangeduid met een ster (*).\nOp het "),a("a",{attrs:{href:"#volledig-voorbeeld"}},[e._v("eind van dit document")]),e._v(" staat een volledig voorbeeld.")]),e._v(" "),a("h3",{attrs:{id:"top-van-het-testplan"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#top-van-het-testplan"}},[e._v("#")]),e._v(" Top van het testplan")]),e._v(" "),a("p",[e._v("Een testplan start met ofwel een lijst van "),a("a",{attrs:{href:"#tabs"}},[e._v("tabs")]),e._v(", ofwel een object.\nDat object heeft drie attributen:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("tabs")]),e._v("*: een lijst van "),a("a",{attrs:{href:"#tabs"}},[e._v("tab")]),e._v("-objecten")]),e._v(" "),a("li",[a("code",[e._v("namespace")]),e._v(': de "namespace" voor de code van de ingediende oplossing, zoals de klassennaam in Java.')]),e._v(" "),a("li",[a("code",[e._v("config")]),e._v(": de globale "),a("a",{attrs:{href:"#configuratieopties"}},[e._v("configuratieopties")])])]),e._v(" "),a("h3",{attrs:{id:"tabs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tabs"}},[e._v("#")]),e._v(" Tabs")]),e._v(" "),a("p",[e._v("Een tab-object komt overeen met een tab in de uitvoer op Dodona.\nHet heeft vier mogelijke attributen:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("tab")]),e._v("*: de naam van de tab die getoond wordt in Dodona")]),e._v(" "),a("li",[a("code",[e._v("contexts")]),e._v("*: een lijst van "),a("a",{attrs:{href:"#contexten"}},[e._v("contexten")]),e._v(" (als dit gebruikt wordt, mag het attribuut "),a("code",[e._v("testcases")]),e._v(" niet\ngebruikt worden)")]),e._v(" "),a("li",[a("code",[e._v("testcases")]),e._v("*: een lijst van "),a("a",{attrs:{href:"#testgevallen"}},[e._v("testgevallen")]),e._v(" (als dit gebruikt wordt, mag het attribuut "),a("code",[e._v("contexts")]),e._v(" niet\ngebruikt worden)")]),e._v(" "),a("li",[a("code",[e._v("config")]),e._v(": de "),a("a",{attrs:{href:"#configuratieopties"}},[e._v("configuratieopties")]),e._v(" voor deze tab en al zijn kinderen")])]),e._v(" "),a("p",[e._v("In veel oefeningen is er precies een testgeval per context.\nDat is exact wat het attribuut "),a("code",[e._v("testcases")]),e._v(" toelaat: achter de schermen zal elk testgeval in een eigen context geplaatst worden.")]),e._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("Hint")]),e._v(" "),a("p",[e._v("Hoewel er vier mogelijke attributen zijn, zal elk tab-object hoogstens drie attributen hebben, want "),a("code",[e._v("contexts")]),e._v(" en "),a("code",[e._v("testcases")]),e._v(" kunnen niet samen gebruikt worden.")])]),e._v(" "),a("h3",{attrs:{id:"contexten"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#contexten"}},[e._v("#")]),e._v(" Contexten")]),e._v(" "),a("p",[e._v("Een context is een groep testgevallen die afhankelijk zijn van elkaar.\nHet context-object heeft drie attributen:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("testcases")]),e._v("*: een lijst van "),a("a",{attrs:{href:"#testgevallen"}},[e._v("testgevallen")])]),e._v(" "),a("li",[a("code",[e._v("config")]),e._v(": de "),a("a",{attrs:{href:"#configuratieopties"}},[e._v("configuratieopties")]),e._v(" voor deze context en al zijn kinderen")]),e._v(" "),a("li",[a("code",[e._v("context")]),e._v(": een optionele beschrijving van de context")]),e._v(" "),a("li",[a("code",[e._v("files")]),e._v(": een optionele lijst van "),a("a",{attrs:{href:"#bestanden"}},[e._v("bestanden")])])]),e._v(" "),a("p",[e._v("In de meeste gevallen is aangewezen om de beschrijving leeg te laten.")]),e._v(" "),a("p",[e._v("Elke context heeft minstens één testgeval.\nOmdat elke context apart wordt uitgevoerd, zijn de volgende beperkingen van toepassing:")]),e._v(" "),a("ul",[a("li",[e._v('Enkel het eerste testgeval mag de "'),a("em",[e._v("main\ncall")]),e._v('" bevatten, bijvoorbeeld met argumenten voor de commandoregel of standaardinvoer.')]),e._v(" "),a("li",[e._v("Enkel het laatste testgeval met de test bevatten voor de exitcode.")])]),e._v(" "),a("p",[e._v("Merk op dat het eerste en laatste testgeval wel hetzelfde testgeval kunnen zijn:\nals er maar een testgeval is, kan het zowel de "),a("em",[e._v("main call")]),e._v(" als de test voor de exitcode bevatten.")]),e._v(" "),a("h3",{attrs:{id:"testgevallen"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#testgevallen"}},[e._v("#")]),e._v(" Testgevallen")]),e._v(" "),a("p",[e._v("Testgevallen zijn de bouwstenen van een testplannen, en bevatten de invoer en de verwachte uitvoer (de "),a("em",[e._v("testen")]),e._v(").\nBinnen dezelfde context zijn de volgende beperkingen van toepassing:")]),e._v(" "),a("ul",[a("li",[e._v('Enkel het eerste testgeval mag de "'),a("em",[e._v("main\ncall")]),e._v('" bevatten, bijvoorbeeld met argumenten voor de commandoregel of standaardinvoer.')]),e._v(" "),a("li",[e._v("Enkel het laatste testgeval met de test bevatten voor de exitcode.")])]),e._v(" "),a("p",[e._v("Merk op dat het eerste en laatste testgeval wel hetzelfde testgeval kunnen zijn:\nals er maar een testgeval is, kan het zowel de "),a("em",[e._v("main call")]),e._v(" als de test voor de exitcode bevatten.")]),e._v(" "),a("p",[e._v("Een testgeval-object kan de volgende attributen hebben:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("config")]),e._v(": de "),a("a",{attrs:{href:"#configuratieopties"}},[e._v("configuratieopties")]),e._v(" voor dit testgeval en al zijn kinderen")]),e._v(" "),a("li",[a("code",[e._v("files")]),e._v(": een optionele lijst van "),a("a",{attrs:{href:"#bestanden"}},[e._v("bestanden")])])]),e._v(" "),a("p",[e._v("Daarnaast kan een testgeval ook de attributen die hieronder beschreven worden hebben, maar merk op:")]),e._v(" "),a("ul",[a("li",[e._v('Een testgeval kan slechts één "invoer" hebben, wat betekent dat de attributen '),a("code",[e._v("arguments")]),e._v("/"),a("code",[e._v("stdin")]),e._v(", "),a("code",[e._v("expression")]),e._v(" en "),a("code",[e._v("statement")]),e._v(" niet tegelijk gebruikt kunnen worden.")]),e._v(" "),a("li",[e._v("De attributen "),a("code",[e._v("return")]),e._v(" en "),a("code",[e._v("return_raw")]),e._v(" kunnen niet tegelijk gebruikt worden, want er kan slechts één returnwaarde per expressie zijn.")]),e._v(" "),a("li",[e._v("De attributen "),a("code",[e._v("return")]),e._v("/"),a("code",[e._v("return_raw")]),e._v(" vereisen ofwel het attribuut "),a("code",[e._v("expression")]),e._v(" ofwel "),a("code",[e._v("statement")]),e._v(".")])]),e._v(" "),a("h4",{attrs:{id:"stdin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stdin"}},[e._v("#")]),e._v(" "),a("code",[e._v("stdin")])]),e._v(" "),a("p",[e._v("De gegevens voor "),a("a",{attrs:{href:"https://nl.wikipedia.org/wiki/Standaardstromen",target:"_blank",rel:"noopener noreferrer"}},[e._v("standaardinvoer"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("p",[e._v("Als dit attribuut gebruikt wordt, kunnen "),a("code",[e._v("expression")]),e._v(" en "),a("code",[e._v("statement")]),e._v(" niet meer gebruikt worden als invoer,\nnoch kunnen "),a("code",[e._v("return")]),e._v(" of "),a("code",[e._v("return_raw")]),e._v(" als test gebruikt worden.")]),e._v(" "),a("h4",{attrs:{id:"arguments"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arguments"}},[e._v("#")]),e._v(" "),a("code",[e._v("arguments")])]),e._v(" "),a("p",[e._v("Een lijst van strings die als argumenten via de "),a("a",{attrs:{href:"https://nl.wikipedia.org/wiki/Command-line-interface",target:"_blank",rel:"noopener noreferrer"}},[e._v("commandoregel"),a("OutboundLink")],1),e._v(" aan het programma doorgegeven worden.")]),e._v(" "),a("p",[e._v("Als dit attribuut gebruikt wordt, kunnen "),a("code",[e._v("expression")]),e._v(" en "),a("code",[e._v("statement")]),e._v(" niet meer gebruikt worden als invoer,\nnoch kunnen "),a("code",[e._v("return")]),e._v(" of "),a("code",[e._v("return_raw")]),e._v(" als test gebruikt worden.")]),e._v(" "),a("h4",{attrs:{id:"main-call"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#main-call"}},[e._v("#")]),e._v(" "),a("code",[e._v("main_call")])]),e._v(" "),a("p",[e._v("Een optioneel attribuut dat op "),a("code",[e._v("true")]),e._v(" gezet kan worden als er een "),a("em",[e._v("main call")]),e._v(" moet zijn zonder stdin of argumenten.")]),e._v(" "),a("p",[e._v("Als dit attribuut gebruikt wordt, kunnen "),a("code",[e._v("expression")]),e._v(" en "),a("code",[e._v("statement")]),e._v(" niet meer gebruikt worden als invoer,\nnoch kunnen "),a("code",[e._v("return")]),e._v(" of "),a("code",[e._v("return_raw")]),e._v(" als test gebruikt worden.")]),e._v(" "),a("h4",{attrs:{id:"expression-statement"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#expression-statement"}},[e._v("#")]),e._v(" "),a("code",[e._v("expression")]),e._v(" / "),a("code",[e._v("statement")])]),e._v(" "),a("p",[e._v("Bevat de te evalueren expressie of het uit te voeren statement in dit testgeval.\nDeze attributen zijn synoniemen.")]),e._v(" "),a("p",[e._v("Expressies en statements gebruiken de syntaxis van Python, met een aantal beperkingen, die we "),a("a",{attrs:{href:"#expressies-en-statements"}},[e._v("hier")]),e._v(" beschrijven.")]),e._v(" "),a("h4",{attrs:{id:"stdout-stderr"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stdout-stderr"}},[e._v("#")]),e._v(" "),a("code",[e._v("stdout")]),e._v(" / "),a("code",[e._v("stderr")])]),e._v(" "),a("p",[e._v("Specifieert het verwachte resultaat op respectievelijk standaarduitvoer (stdout) en standaardfout (stderr).")]),e._v(" "),a("p",[e._v("De waarde van het attribuut is ofwel een string (dat dan het verwachte resultaat is), of een object voor meer complexe situaties.\nHet object heeft volgende attributen:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("data")]),e._v(": het verwachte resultaat, zoals bij het gebruik van een string")]),e._v(" "),a("li",[a("code",[e._v("config")]),e._v(": the "),a("a",{attrs:{href:"#testopties"}},[e._v("configuratieopties")])])]),e._v(" "),a("h4",{attrs:{id:"exception"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#exception"}},[e._v("#")]),e._v(" "),a("code",[e._v("exception")])]),e._v(" "),a("p",[e._v("Specifieert het verwachte bericht van een verwachte uitzondering of fout (een "),a("em",[e._v("exception")]),e._v(").\nMerk op dat TESTed momenteel niet kan oordelen over het soort of type van de fout.\nHet is bijvoorbeeld niet mogelijk om te controleren of een "),a("em",[e._v("assertion error")]),e._v(" gebruikt is.")]),e._v(" "),a("h4",{attrs:{id:"return-return-raw"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#return-return-raw"}},[e._v("#")]),e._v(" "),a("code",[e._v("return")]),e._v(" / "),a("code",[e._v("return_raw")])]),e._v(" "),a("p",[e._v("Specifieert de verwachte returnwaarde.\nIn de meeste gevallen is het beter om "),a("code",[e._v("return")]),e._v(" te gebruiken, waarbij de verwachte waarde als een YAML-waarde genoteerd wordt (string, getal, boolean, enz.).\nVoor meer geavanceerde waarden is gebruik van "),a("code",[e._v("return_raw")]),e._v(" mogelijk,\ndat toelaat om dezelfde Python-syntaxis te gebruiken als voor de "),a("a",{attrs:{href:"#expressies-en-statements"}},[e._v("expressies en statements")]),e._v(",\nmet de beperking dat alleen waarden toegelaten zijn.\nEen returnwaarde kan bijvoorbeeld geen funtieoproep zijn.")]),e._v(" "),a("p",[e._v("Zoals al vermeld zijn deze attributen enkel toegelaten als "),a("code",[e._v("expression")]),e._v(" of "),a("code",[e._v("statement")]),e._v(" als invoer voor het testgeval gebruikt is.\nDe attributen "),a("code",[e._v("return")]),e._v(" en "),a("code",[e._v("return_raw")]),e._v(" kunnen ook niet tegelijk gebruikt worden.")]),e._v(" "),a("h4",{attrs:{id:"exit-code"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#exit-code"}},[e._v("#")]),e._v(" "),a("code",[e._v("exit_code")])]),e._v(" "),a("p",[e._v("Specifieert de verwachte exitcode van het programma.")]),e._v(" "),a("p",[e._v("Enkel het laatste testgeval in een context kan dit attribuut hebben, maar het laatste testgeval kan ook het eerste zijn als er maar één testgeval is.")]),e._v(" "),a("h3",{attrs:{id:"bestanden"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bestanden"}},[e._v("#")]),e._v(" Bestanden")]),e._v(" "),a("p",[e._v("Soms zijn parameters of andere strings de naam van een bestand.\nAls die bestanden een snelkoppeling naar het eigenlijke bestand moeten worden, dan moet er een lijst van bestanden meegegeven worden.\nElk object in die lijst heeft twee attributen:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("name")]),e._v(": de naam van het bestand zoals het voorkomt in de invoer")]),e._v(" "),a("li",[a("code",[e._v("url")]),e._v(": de locatie waar de snelkoppeling naar moet wijzen, relatief ten opzicht van de map van de oefening.")])]),e._v(" "),a("h2",{attrs:{id:"configuratieopties"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#configuratieopties"}},[e._v("#")]),e._v(" Configuratieopties")]),e._v(" "),a("p",[e._v("Het configuratie-object kan op elk niveau gebruikt worden en zal ook van toepassing zijn op alle onderliggende niveaus.\nEen configuratie-object op tabniveau gebruiken zal er bijvoorbeeld voor zorgen dat die configuratie ook van toepassing is op alle contexten, en uiteindelijk ook op alle testgevallen in die tab.")]),e._v(" "),a("p",[e._v("Een configuratie-object kan volgende attributen hebben:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("stdout")]),e._v(": de "),a("a",{attrs:{href:"#testopties"}},[e._v("configuratieopties")]),e._v(" voor standaarduitvoer (stdout)")]),e._v(" "),a("li",[a("code",[e._v("stderr")]),e._v(": de "),a("a",{attrs:{href:"#testopties"}},[e._v("configuratieopties")]),e._v(" voor standaardfout (stderr)")]),e._v(" "),a("li",[a("code",[e._v("return")]),e._v(": de "),a("a",{attrs:{href:"#testopties"}},[e._v("configuratieopties")]),e._v(" voor de verwachte returnwaarde")])]),e._v(" "),a("h3",{attrs:{id:"testopties"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#testopties"}},[e._v("#")]),e._v(" Testopties")]),e._v(" "),a("p",[e._v("Dit object bevat een aantal configuratieopties die invloed hebben op hoe de testresultaten beoordeeld worden door TESTed.\nDe volgende opties zijn beschikbaar:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("applyRounding")]),e._v(": pas afronding toe als waarden als vlottendekommagetal vergeleken worden")]),e._v(" "),a("li",[a("code",[e._v("roundTo")]),e._v(": het aantal cijfers om op af te ronden, als "),a("code",[e._v("applyRouding")]),e._v(" gebruikt wordt")]),e._v(" "),a("li",[a("code",[e._v("caseInsensitive")]),e._v(": negeer hoofdletters en kleine letters bij het vergelijken van strings")]),e._v(" "),a("li",[a("code",[e._v("ignoreWhitespace")]),e._v(": negeer witruimte aan het begin en einde")]),e._v(" "),a("li",[a("code",[e._v("tryFloatingPoint")]),e._v(": probeer tekst eerst als vlottendekommagetal te vergelijken")])]),e._v(" "),a("h2",{attrs:{id:"expressies-en-statements"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#expressies-en-statements"}},[e._v("#")]),e._v(" Expressies en statements")]),e._v(" "),a("p",[e._v("In een testplan worden expressies en statements als YAML-strings geschreven, gebruik makende van de syntaxis van Python.\nEen functieoproep met het argument "),a("code",[e._v('"hello"')]),e._v(" wordt bijvoorbeeld:")]),e._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("expression")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("\"a_function_name('hello')\"")]),e._v("\n")])])]),a("p",[e._v("Aangezien de syntaxis van Python voor een aantal zaken van TESTed geen aparte syntaxis heeft, zijn er aantal conventies:")]),e._v(" "),a("ul",[a("li",[e._v("Functieoproepen vier naam begint met een hoofdletters worden beschouwd als\n"),a("em",[e._v("constructors")]),e._v(", bijvoorbeeld "),a("code",[e._v("Constructor(56)")]),e._v(".")]),e._v(" "),a("li",[e._v("Identifiers die volledig in hoofdletters geschreven zijn worden beschouwd als globale constanten, bijvoorbeeld "),a("code",[e._v("VERY_LONG_NAME")]),e._v(".")]),e._v(" "),a("li",[e._v("Het casten van waarden gebeurt op de gebruikelijke manier van Python. Het casten van een getal naar "),a("code",[e._v("int64")]),e._v(" wordt bijvoorbeeld "),a("code",[e._v("int64(56)")]),e._v(".")])]),e._v(" "),a("p",[e._v("Bijkomend worden grote delen van de syntaxis niet ondersteund, daar TESTed enkel beperkte ondersteuning heeft voor expressies en statements.\nVolgende zaken worden ondersteund:")]),e._v(" "),a("ul",[a("li",[e._v("Eenvoudige waarden, zoals "),a("code",[e._v("5")]),e._v(", "),a("code",[e._v("-9.3")]),e._v(" of "),a("code",[e._v('"Hello world"')]),e._v(".")]),e._v(" "),a("li",[e._v("Complexe waarden, zoals "),a("code",[e._v("[5, 6, 7]")]),e._v(", "),a("code",[e._v('{5, "Hello"}')]),e._v(" of "),a("code",[e._v('{"key": "value"}')]),e._v(".")]),e._v(" "),a("li",[e._v("Functieoproepen, inclusief "),a("em",[e._v("named parameters")]),e._v(", zoals "),a("code",[e._v("the_function(5, named=6)")]),e._v(".\nMerk op dat de "),a("em",[e._v("named\nparameters")]),e._v(" omgezet worden naar normale parameters op basis van hun positie in programmeertalen die geen ondersteuning hebben voor\n"),a("em",[e._v("named parameters")]),e._v(".")]),e._v(" "),a("li",[e._v("Constructors (middels onze conventie).")]),e._v(" "),a("li",[e._v("Declareren en toewijzen van variabelen ("),a("em",[e._v("assignments")]),e._v("), zoals "),a("code",[e._v("some_variable = 5")]),e._v(".")]),e._v(" "),a("li",[e._v("Refereren naar variabelen, zoals "),a("code",[e._v("the_function(some_variable)")]),e._v(".")])]),e._v(" "),a("p",[e._v("Noemenswaardige weglatingen zijn alle soorten van functie- of klassendefinities, alsook alle operatoren.")]),e._v(" "),a("h2",{attrs:{id:"spiekbriefje-voor-yaml"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spiekbriefje-voor-yaml"}},[e._v("#")]),e._v(" Spiekbriefje voor YAML")]),e._v(" "),a("p",[e._v("Deze paragraaf bevat een heel kort overzicht van het deel van functionaliteit van YAML die we gebruiken in de DSL.")]),e._v(" "),a("h3",{attrs:{id:"objecten"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#objecten"}},[e._v("#")]),e._v(" Objecten")]),e._v(" "),a("p",[e._v("Objecten in YAML zijn sleutel-waardeparen, waarbij de sleutel (het attribuut) en de waarde gescheiden worden door een dubbelpunt:")]),e._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("key")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" value\n")])])]),a("p",[e._v("Geneste objecten worden aangeduid door een insprong:")]),e._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("root")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("child0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("subchild0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"leaf"')]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("subchild1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"leaf"')]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("child1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("subchild0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"leaf"')]),e._v("\n")])])]),a("h3",{attrs:{id:"lijsten"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lijsten"}},[e._v("#")]),e._v(" Lijsten")]),e._v(" "),a("p",[e._v("Lijsten kunnen in YAML geschreven worden ofwel op één regel (gebruik makende van de JSON-syntaxis) ofwel met een waarde per regel.\nBijvoorbeeld, een lijst op een regel:")]),e._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Item 0"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Item 1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Item 2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Item 3"')]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])]),a("p",[e._v("Bij de notatie van één waarde per regel moet elke regel voorafgegaan worden door een liggend streepje (-) en spatie:")]),e._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Item 0"')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Item 1"')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Item 2"')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Item 3"')]),e._v("\n")])])]),a("p",[e._v("Lijsten en objecten kunnen ook gecombineerd worden:")]),e._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("list")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Item 0"')]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("items")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Item 1"')]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Item 2"')]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("items")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("3")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Item 3"')]),e._v("\n")])])]),a("h3",{attrs:{id:"strings"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#strings"}},[e._v("#")]),e._v(" Strings")]),e._v(" "),a("p",[e._v("Gewone strings worden in YAML geschreven tussen dubbele aanhalingstekens:")]),e._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("description")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Hello"')]),e._v("\n")])])]),a("p",[e._v("Een string met regeleindes wordt op dergelijke wijze nogal lelijk:")]),e._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("description")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Hello\\nWorld"')]),e._v("\n")])])]),a("p",[e._v("YAML ondersteunt een speciale notatie voor strings met regeleindes.\nDezelfde string als het laatste voorbeeld geschreven in die notatie wordt dan:")]),e._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("description")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("|")]),a("span",{pre:!0,attrs:{class:"token scalar string"}},[e._v("\n  Hello\n  World")]),e._v("\n")])])]),a("p",[e._v('Het omgekeerde is ook mogelijk, namelijk de "gevouwen strings" ('),a("em",[e._v("folded strings")]),e._v(").\nBij deze notatie zal YAML de regeleindes verwijderen:")]),e._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("description")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")]),a("span",{pre:!0,attrs:{class:"token scalar string"}},[e._v("\n  Hello\n  World")]),e._v("\n")])])]),a("p",[e._v("Dit is equivalent aan:")]),e._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("description")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Hello World"')]),e._v("\n")])])]),a("h2",{attrs:{id:"volledig-voorbeeld"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#volledig-voorbeeld"}},[e._v("#")]),e._v(" Volledig voorbeeld")]),e._v(" "),a("p",[e._v("Hieronder staat een testplan waar alle opties gebruikt worden:")]),e._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Een tab op Dodona.")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("tab")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Naam van de tab"')]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("contexts")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# De bestanden gebruikt in deze context.")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("files")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"file.txt"')]),e._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("url")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"media/workdir/file.txt"')]),e._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("testcases")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# Een assignment van de variable "data".')]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("statement")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('\'data = ["list\\nline", "file.txt"]\'')]),e._v("\n          "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Functieoproep waarbij de variabele gebruikt wordt.")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("statement")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'function(data, 0.5)'")]),e._v("\n          "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Verwachte returnwaarde van die functie.")]),e._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("return")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("testcases")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# Een functieoproep waarbij de waarde gecast wordt naar "uint8".')]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("statement")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'echo(uint8(5))'")]),e._v("\n          "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# De verwachte returnwaarde wordt ook gecast naar "uint8".')]),e._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("return_raw")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"uint8(5)"')]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Een tweede tab in hetzelfde testplan.")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("tab")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Exception"')]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("contexts")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("testcases")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Opnieuw een functieoproep.")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("statement")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'function_error()'")]),e._v("\n          "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# De verwachte tekst op stdout.")]),e._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("stdout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Invalid"')]),e._v("\n          "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# De verwachte tekst op stderr.")]),e._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("stderr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Error"')]),e._v("\n          "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# We verwachten ook een fout of exception met de boodschap "Unknown".')]),e._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("exception")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Unknown"')]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Een derde tab.")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("tab")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Arguments"')]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("testcases")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Dit programma krijgt invoer mee via stdin")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("stdin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Alice"')]),e._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Er zijn ook argumenten voor de commandoregel.")]),e._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("arguments")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"stdin"')]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# We verwachten deze tekst op stdout.")]),e._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("stdout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Hello Alice"')]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Een vierde tab.")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("tab")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Config"')]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# We configureren alles op het niveau van de tab.")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("config")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("stdout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Tekst op stdout proberen we eerst als getal te vergelijken.")]),e._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("tryFloatingPoint")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token boolean important"}},[e._v("true")]),e._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Als we een getal vergelijken, ronden we af op 2 cijfers.")]),e._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("applyRounding")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token boolean important"}},[e._v("true")]),e._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("roundTo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Op stderr negeren we witruimte en")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# het verschil met hoofdletters en kleine letters")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("stderr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("ignoreWhitespace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token boolean important"}},[e._v("true")]),e._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("caseInsensitive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token boolean important"}},[e._v("true")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("contexts")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("config")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("stdout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n          "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# In deze context overschrijven de configuratie van de tab.")]),e._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("roundTo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("testcases")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("statement")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'diff(5, 2)'")]),e._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("stdout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"2"')]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("statement")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'diff(5, 2)'")]),e._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("stdout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n            "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("data")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"2.5"')]),e._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# In deze test overschrijven we de configuratie van de context.")]),e._v("\n            "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("config")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n              "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("roundTo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("4")]),e._v("\n\n")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);