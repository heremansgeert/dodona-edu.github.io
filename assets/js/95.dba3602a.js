(window.webpackJsonp=window.webpackJsonp||[]).push([[95],{795:function(v,_,t){"use strict";t.r(_);var e=t(29),d=Object(e.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"data-type-support-in-tested"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#data-type-support-in-tested"}},[v._v("#")]),v._v(" Data type support in TESTed")]),v._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[v._v("Up-to-date information")]),v._v(" "),t("p",[v._v("These data are sourced from the language modules in TESTed.\nThey contain the most up-to-date information on data type support.")])]),v._v(" "),t("p",[v._v("This reference lists which types are used in the various programming languages and how they map to the TESTed data types.")]),v._v(" "),t("h2",{attrs:{id:"basic-types"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#basic-types"}},[v._v("#")]),v._v(" Basic types")]),v._v(" "),t("p",[v._v("In the first column, we list the TESTed data type, followed by a column for each programming language.")]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("TESTed")]),v._v(" "),t("th",[v._v("Python")]),v._v(" "),t("th",[v._v("JavaScript")]),v._v(" "),t("th",[v._v("Java")]),v._v(" "),t("th",[v._v("Kotlin")]),v._v(" "),t("th",[v._v("Haskell")]),v._v(" "),t("th",[v._v("C")]),v._v(" "),t("th",[v._v("Bash")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("integer")]),v._v(" "),t("td",[t("code",[v._v("int")])]),v._v(" "),t("td",[t("code",[v._v("number")])]),v._v(" "),t("td",[t("code",[v._v("int")]),v._v("/"),t("code",[v._v("long")]),v._v("¹")]),v._v(" "),t("td",[t("code",[v._v("Int")])]),v._v(" "),t("td",[t("code",[v._v("Int")])]),v._v(" "),t("td",[t("code",[v._v("int")])]),v._v(" "),t("td",[v._v("-")])]),v._v(" "),t("tr",[t("td",[v._v("real")]),v._v(" "),t("td",[t("code",[v._v("float")])]),v._v(" "),t("td",[t("code",[v._v("number")])]),v._v(" "),t("td",[t("code",[v._v("double")])]),v._v(" "),t("td",[t("code",[v._v("Double")])]),v._v(" "),t("td",[t("code",[v._v("Double")])]),v._v(" "),t("td",[t("code",[v._v("double")])]),v._v(" "),t("td",[v._v("-")])]),v._v(" "),t("tr",[t("td",[v._v("boolean")]),v._v(" "),t("td",[t("code",[v._v("bool")])]),v._v(" "),t("td",[t("code",[v._v("boolean")])]),v._v(" "),t("td",[t("code",[v._v("boolean")])]),v._v(" "),t("td",[t("code",[v._v("Boolean")])]),v._v(" "),t("td",[t("code",[v._v("Bool")])]),v._v(" "),t("td",[t("code",[v._v("bool")])]),v._v(" "),t("td",[v._v("-")])]),v._v(" "),t("tr",[t("td",[v._v("text")]),v._v(" "),t("td",[t("code",[v._v("str")])]),v._v(" "),t("td",[t("code",[v._v("String")])]),v._v(" "),t("td",[t("code",[v._v("String")])]),v._v(" "),t("td",[t("code",[v._v("String")])]),v._v(" "),t("td",[t("code",[v._v("String")])]),v._v(" "),t("td",[t("code",[v._v("char*")])]),v._v(" "),t("td",[t("code",[v._v("text")])])]),v._v(" "),t("tr",[t("td",[v._v("sequence")]),v._v(" "),t("td",[t("code",[v._v("list")])]),v._v(" "),t("td",[t("code",[v._v("array")])]),v._v(" "),t("td",[t("code",[v._v("List")])]),v._v(" "),t("td",[t("code",[v._v("List")])]),v._v(" "),t("td",[t("code",[v._v("[]")]),v._v("²")]),v._v(" "),t("td",[v._v("-")]),v._v(" "),t("td",[v._v("-")])]),v._v(" "),t("tr",[t("td",[v._v("set")]),v._v(" "),t("td",[t("code",[v._v("set")])]),v._v(" "),t("td",[t("code",[v._v("Set")])]),v._v(" "),t("td",[t("code",[v._v("Set")])]),v._v(" "),t("td",[t("code",[v._v("Set")])]),v._v(" "),t("td",[v._v("-")]),v._v(" "),t("td",[v._v("-")]),v._v(" "),t("td",[v._v("-")])]),v._v(" "),t("tr",[t("td",[v._v("map")]),v._v(" "),t("td",[t("code",[v._v("dict")])]),v._v(" "),t("td",[t("code",[v._v("object")])]),v._v(" "),t("td",[t("code",[v._v("Map")])]),v._v(" "),t("td",[t("code",[v._v("Map")])]),v._v(" "),t("td",[v._v("-")]),v._v(" "),t("td",[v._v("-")]),v._v(" "),t("td",[v._v("-")])]),v._v(" "),t("tr",[t("td",[v._v("nothing")]),v._v(" "),t("td",[t("code",[v._v("None")])]),v._v(" "),t("td",[t("code",[v._v("null")])]),v._v(" "),t("td",[t("code",[v._v("null")])]),v._v(" "),t("td",[t("code",[v._v("null")])]),v._v(" "),t("td",[t("code",[v._v("Nothing")])]),v._v(" "),t("td",[t("code",[v._v("void")])]),v._v(" "),t("td",[v._v("-")])])])]),v._v(" "),t("p",[v._v("¹ depending on the value"),t("br"),v._v("\n² the built-in list type")]),v._v(" "),t("h2",{attrs:{id:"advanced-types"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#advanced-types"}},[v._v("#")]),v._v(" Advanced types")]),v._v(" "),t("p",[v._v("The first column shows the name of the advanced type (below the table are some definitions of these types).\nThe second column indicates what the basic type is of the advanced type.")]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("TESTed")]),v._v(" "),t("th",[v._v("Basic")]),v._v(" "),t("th",[v._v("Python")]),v._v(" "),t("th",[v._v("JavaScript")]),v._v(" "),t("th",[v._v("Java")]),v._v(" "),t("th",[v._v("Kotlin")]),v._v(" "),t("th",[v._v("Haskell")]),v._v(" "),t("th",[v._v("C")]),v._v(" "),t("th",[v._v("Bash")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("int8")]),v._v(" "),t("td",[v._v("integer")]),v._v(" "),t("td",[v._v("+")]),v._v(" "),t("td",[v._v("+")]),v._v(" "),t("td",[t("code",[v._v("byte")])]),v._v(" "),t("td",[t("code",[v._v("Byte")])]),v._v(" "),t("td",[t("code",[v._v("Data.Int.Int8")])]),v._v(" "),t("td",[v._v("+")]),v._v(" "),t("td",[v._v("-")])]),v._v(" "),t("tr",[t("td",[v._v("uint8")]),v._v(" "),t("td",[v._v("integer")]),v._v(" "),t("td",[v._v("+")]),v._v(" "),t("td",[v._v("+")]),v._v(" "),t("td",[v._v("+")]),v._v(" "),t("td",[t("code",[v._v("UByte")])]),v._v(" "),t("td",[t("code",[v._v("Data.Word.Word8")])]),v._v(" "),t("td",[v._v("+")]),v._v(" "),t("td",[v._v("-")])]),v._v(" "),t("tr",[t("td",[v._v("int16")]),v._v(" "),t("td",[v._v("integer")]),v._v(" "),t("td",[v._v("+")]),v._v(" "),t("td",[v._v("+")]),v._v(" "),t("td",[t("code",[v._v("short")])]),v._v(" "),t("td",[t("code",[v._v("Short")])]),v._v(" "),t("td",[t("code",[v._v("Data.Int.Int16")])]),v._v(" "),t("td",[t("code",[v._v("short")])]),v._v(" "),t("td",[v._v("-")])]),v._v(" "),t("tr",[t("td",[v._v("uint16")]),v._v(" "),t("td",[v._v("integer")]),v._v(" "),t("td",[v._v("+")]),v._v(" "),t("td",[v._v("+")]),v._v(" "),t("td",[v._v("+")]),v._v(" "),t("td",[t("code",[v._v("UShort")])]),v._v(" "),t("td",[t("code",[v._v("Data.Word.Word16")])]),v._v(" "),t("td",[t("code",[v._v("unsigned short")])]),v._v(" "),t("td",[v._v("-")])]),v._v(" "),t("tr",[t("td",[v._v("int32")]),v._v(" "),t("td",[v._v("integer")]),v._v(" "),t("td",[v._v("+")]),v._v(" "),t("td",[v._v("+")]),v._v(" "),t("td",[t("code",[v._v("int")])]),v._v(" "),t("td",[t("code",[v._v("Int")])]),v._v(" "),t("td",[t("code",[v._v("Data.Int.Int32")])]),v._v(" "),t("td",[t("code",[v._v("int")])]),v._v(" "),t("td",[v._v("-")])]),v._v(" "),t("tr",[t("td",[v._v("uint32")]),v._v(" "),t("td",[v._v("integer")]),v._v(" "),t("td",[v._v("+")]),v._v(" "),t("td",[v._v("+")]),v._v(" "),t("td",[v._v("+")]),v._v(" "),t("td",[t("code",[v._v("UInt")])]),v._v(" "),t("td",[t("code",[v._v("Data.Word.Word32")])]),v._v(" "),t("td",[t("code",[v._v("unsigned int")])]),v._v(" "),t("td",[v._v("-")])]),v._v(" "),t("tr",[t("td",[v._v("int64")]),v._v(" "),t("td",[v._v("integer")]),v._v(" "),t("td",[v._v("+")]),v._v(" "),t("td",[v._v("+")]),v._v(" "),t("td",[t("code",[v._v("long")])]),v._v(" "),t("td",[t("code",[v._v("Long")])]),v._v(" "),t("td",[t("code",[v._v("Data.Int.Int64")])]),v._v(" "),t("td",[t("code",[v._v("long")])]),v._v(" "),t("td",[v._v("-")])]),v._v(" "),t("tr",[t("td",[v._v("uint64")]),v._v(" "),t("td",[v._v("integer")]),v._v(" "),t("td",[v._v("+")]),v._v(" "),t("td",[v._v("+")]),v._v(" "),t("td",[v._v("+")]),v._v(" "),t("td",[t("code",[v._v("ULong")])]),v._v(" "),t("td",[t("code",[v._v("Data.Word.Word64")])]),v._v(" "),t("td",[t("code",[v._v("unsigned long")])]),v._v(" "),t("td",[v._v("-")])]),v._v(" "),t("tr",[t("td",[v._v("bigint")]),v._v(" "),t("td",[v._v("integer")]),v._v(" "),t("td",[t("code",[v._v("int")])]),v._v(" "),t("td",[t("code",[v._v("BigInt")])]),v._v(" "),t("td",[t("code",[v._v("BigInteger")])]),v._v(" "),t("td",[t("code",[v._v("BigInteger")])]),v._v(" "),t("td",[t("code",[v._v("Integer")])]),v._v(" "),t("td",[v._v("-")]),v._v(" "),t("td",[v._v("-")])]),v._v(" "),t("tr",[t("td",[v._v("single_precision")]),v._v(" "),t("td",[v._v("real")]),v._v(" "),t("td",[v._v("+")]),v._v(" "),t("td",[v._v("+")]),v._v(" "),t("td",[t("code",[v._v("float")])]),v._v(" "),t("td",[t("code",[v._v("Float")])]),v._v(" "),t("td",[t("code",[v._v("Float")])]),v._v(" "),t("td",[t("code",[v._v("float")])]),v._v(" "),t("td",[v._v("-")])]),v._v(" "),t("tr",[t("td",[v._v("double_precision")]),v._v(" "),t("td",[v._v("real")]),v._v(" "),t("td",[v._v("+")]),v._v(" "),t("td",[v._v("+")]),v._v(" "),t("td",[t("code",[v._v("double")])]),v._v(" "),t("td",[t("code",[v._v("Double")])]),v._v(" "),t("td",[t("code",[v._v("Double")])]),v._v(" "),t("td",[t("code",[v._v("double")])]),v._v(" "),t("td",[v._v("-")])]),v._v(" "),t("tr",[t("td",[v._v("double_extended")]),v._v(" "),t("td",[v._v("real")]),v._v(" "),t("td",[v._v("+")]),v._v(" "),t("td",[v._v("+")]),v._v(" "),t("td",[v._v("+")]),v._v(" "),t("td",[v._v("+")]),v._v(" "),t("td",[v._v("-")]),v._v(" "),t("td",[t("code",[v._v("double double")])]),v._v(" "),t("td",[v._v("-")])]),v._v(" "),t("tr",[t("td",[v._v("fixed_precision")]),v._v(" "),t("td",[v._v("rational")]),v._v(" "),t("td",[t("code",[v._v("Decimal")])]),v._v(" "),t("td",[v._v("-")]),v._v(" "),t("td",[t("code",[v._v("BigDecimal")])]),v._v(" "),t("td",[t("code",[v._v("BigDecimal")])]),v._v(" "),t("td",[v._v("-")]),v._v(" "),t("td",[v._v("-")]),v._v(" "),t("td",[v._v("-")])]),v._v(" "),t("tr",[t("td",[v._v("array")]),v._v(" "),t("td",[v._v("sequence")]),v._v(" "),t("td",[v._v("+")]),v._v(" "),t("td",[v._v("+")]),v._v(" "),t("td",[t("code",[v._v("array")])]),v._v(" "),t("td",[t("code",[v._v("Array")])]),v._v(" "),t("td",[v._v("-")]),v._v(" "),t("td",[v._v("-")]),v._v(" "),t("td",[v._v("-")])]),v._v(" "),t("tr",[t("td",[v._v("list")]),v._v(" "),t("td",[v._v("sequence")]),v._v(" "),t("td",[t("code",[v._v("List")])]),v._v(" "),t("td",[v._v("+")]),v._v(" "),t("td",[t("code",[v._v("List")])]),v._v(" "),t("td",[t("code",[v._v("List")])]),v._v(" "),t("td",[t("code",[v._v("[]")]),v._v("²")]),v._v(" "),t("td",[v._v("-")]),v._v(" "),t("td",[v._v("-")])]),v._v(" "),t("tr",[t("td",[v._v("tuple")]),v._v(" "),t("td",[v._v("sequence")]),v._v(" "),t("td",[t("code",[v._v("Tuple")])]),v._v(" "),t("td",[v._v("+")]),v._v(" "),t("td",[v._v("+")]),v._v(" "),t("td",[v._v("+")]),v._v(" "),t("td",[t("code",[v._v("()")]),v._v("¹")]),v._v(" "),t("td",[v._v("-")]),v._v(" "),t("td",[v._v("-")])]),v._v(" "),t("tr",[t("td",[v._v("char")]),v._v(" "),t("td",[v._v("text")]),v._v(" "),t("td",[v._v("+")]),v._v(" "),t("td",[v._v("+")]),v._v(" "),t("td",[t("code",[v._v("char")])]),v._v(" "),t("td",[t("code",[v._v("Char")])]),v._v(" "),t("td",[t("code",[v._v("Char")])]),v._v(" "),t("td",[t("code",[v._v("char")])]),v._v(" "),t("td",[v._v("+")])]),v._v(" "),t("tr",[t("td",[v._v("undefined")]),v._v(" "),t("td",[v._v("nothing")]),v._v(" "),t("td",[v._v("+")]),v._v(" "),t("td",[t("code",[v._v("undefined")])]),v._v(" "),t("td",[v._v("+")]),v._v(" "),t("td",[v._v("+")]),v._v(" "),t("td",[v._v("+")]),v._v(" "),t("td",[v._v("+")]),v._v(" "),t("td",[v._v("-")])])])]),v._v(" "),t("p",[v._v("¹ built-in tuple type"),t("br"),v._v("\n² built-in list type")]),v._v(" "),t("p",[v._v('A "+" (plus sign) indicates that the programming language has limited supported ('),t("code",[v._v("reduced")]),v._v(").\nThis often means there is no distinct type available in the language, but exercises using this type can still be solved in that language.\nAn example is tuples: multiple languages have no tuple type, but exercises using tuples can still be solved by using the basic type ("),t("code",[v._v("sequence")]),v._v(").\nFor example, an exercise using tuples will be solvable in Java by using a list.")]),v._v(" "),t("p",[v._v('A "-" (minus sign) means that the programming language has no support ('),t("code",[v._v("unsupported")]),v._v(").\nThis means exercises using those types will not be solvable in the programming language.\nFor example, JavaScript does not support "),t("code",[v._v("fixed precision")]),v._v(",\nmeaning exercises using this type will not be solvable in JavaScript.")]),v._v(" "),t("p",[v._v("Below are some definitions of the types:")]),v._v(" "),t("ul",[t("li",[t("code",[v._v("intN")]),v._v(" - signed integers, at least "),t("code",[v._v("N")]),v._v(" bits; e.g. "),t("code",[v._v("int16")]),v._v(" must have at least 16 bits")]),v._v(" "),t("li",[t("code",[v._v("uintN")]),v._v(" - unsigned integers, at least "),t("code",[v._v("N")]),v._v(" bits")]),v._v(" "),t("li",[t("code",[v._v("bigint")]),v._v(" - arbitrary precision integers")]),v._v(" "),t("li",[t("code",[v._v("single_precision")]),v._v(" - IEEE 754 single precision real number")]),v._v(" "),t("li",[t("code",[v._v("double_precision")]),v._v(" - IEEE 754 double precision real number")]),v._v(" "),t("li",[t("code",[v._v("double_extended")]),v._v(" - IEEE 754 double extended precision real number")]),v._v(" "),t("li",[t("code",[v._v("fixed_precision")]),v._v(" - fixed precision real number")]),v._v(" "),t("li",[t("code",[v._v("array")]),v._v(" - continuous piece of memory for elements of a fixed size. The difference with list is best explained in Java.")]),v._v(" "),t("li",[t("code",[v._v("list")]),v._v(" - ordered sequence of elements, where duplicates are allowed")]),v._v(" "),t("li",[t("code",[v._v("tuple")]),v._v(" - read-only, immutable list")]),v._v(" "),t("li",[t("code",[v._v("char")]),v._v(" - a single character")]),v._v(" "),t("li",[t("code",[v._v("undefined")]),v._v(" - separate from null, as in JavaScript")])])])}),[],!1,null,null,null);_.default=d.exports}}]);