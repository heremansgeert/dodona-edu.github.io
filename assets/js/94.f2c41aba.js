(window.webpackJsonp=window.webpackJsonp||[]).push([[94],{798:function(t,s,a){"use strict";a.r(s);var e=a(29),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"adding-support-for-a-new-programming-language-to-tested"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#adding-support-for-a-new-programming-language-to-tested"}},[t._v("#")]),t._v(" Adding support for a new programming language to TESTed")]),t._v(" "),a("p",[t._v("In this guide, we explain in detail how to add support for a new programming language to TESTed.\nIn this guide, we add support for the programming language C.\nWe do also note where we do C-specific stuff,\nso it should also be usable as a guide for adding support for other languages.")]),t._v(" "),a("p",[t._v("Some useful links that can help you:")]),t._v(" "),a("ul",[a("li",[t._v("Existing configurations: "),a("a",{attrs:{href:"https://github.com/dodona-edu/universal-judge/tree/master/tested/languages",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/dodona-edu/universal-judge/tree/master/tested/languages"),a("OutboundLink")],1),t._v(", including the configuration for C, which is what we are adding here.")]),t._v(" "),a("li",[t._v("Test exercises: "),a("a",{attrs:{href:"https://github.com/dodona-edu/universal-judge/tree/master/exercise",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/dodona-edu/universal-judge/tree/master/exercise"),a("OutboundLink")],1)])]),t._v(" "),a("h2",{attrs:{id:"tested-locally"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tested-locally"}},[t._v("#")]),t._v(" TESTed locally")]),t._v(" "),a("p",[t._v("Since language support is added to TESTed itself, you need to get the code for TESTed locally.\nWe recommend following the guide in the "),a("a",{attrs:{href:"https://github.com/dodona-edu/universal-judge#installing-tested",target:"_blank",rel:"noopener noreferrer"}},[t._v("readme of the TESTed repository"),a("OutboundLink")],1),t._v(".\nNote that you only need to install the Python dependencies.\nDependencies of other languages (e.g. ghc for Haskell) are optional.")]),t._v(" "),a("p",[t._v("For this guide, you also need to have an installation of gcc available,\nsince that is the compiler we're going to use (version 8.1 or up).")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Window users")]),t._v(" "),a("p",[t._v("We recommend using the "),a("a",{attrs:{href:"https://ubuntu.com/wsl",target:"_blank",rel:"noopener noreferrer"}},[t._v("Windows Subsystem for Linux"),a("OutboundLink")],1),t._v(" on Linux.\nWhile TESTed itself is written in Python and thus platform independent,\nthe dependencies of the programming languages are not always available on Windows.")])]),t._v(" "),a("h3",{attrs:{id:"running-tested"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#running-tested"}},[t._v("#")]),t._v(" Running TESTed")]),t._v(" "),a("p",[t._v("After cloning the repository and installing the necessary dependencies,\nthe folder in which TESTed is located should look like this:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("universal-judge\n├── exercise/     # Test exercises\n├── tested/       # Sources\n├── tests/        # Tests\n├── workdir/      # Working directory when manually running TESTed\n├── config.json   # Used in Dodona\n└── run           # Used in Dodona\n")])])]),a("p",[t._v("In this guide, we assume you run the commands in the root directory of the repository.\nThe main way to run TESTed is to use the following command:")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" python -m tested --help\nusage: __main__.py "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-h"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-c CONFIG"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-o OUTPUT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\nThe programming language agnostic educational "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v(" framework.\n\noptional arguments:\n  -h, --help            show this "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("help")]),t._v(" message and "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("exit")]),t._v("\n  -c CONFIG, --config CONFIG\n                        Where to "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("read")]),t._v(" the config from\n  -o OUTPUT, --output OUTPUT\n                        Where the judge output should be written to.\n  -v, --verbose         Include verbose logs. It is recommended to also use -o "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" this case.\n")])])]),a("p",[t._v("This is fine when running TESTed in production,\nbut for development it is annoying to always have to specify the configuration.\nTherefore, you can use the development mode, in which the configuration is hard-coded:")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" python -m tested.manual\n")])])]),a("p",[t._v("This will run an exercise according to the hard-coded values in "),a("code",[t._v("tested/manual.py")]),t._v(".\nRunning in this mode will put all generated files into the "),a("code",[t._v("workdir")]),t._v(" folder.\nThis can be very useful, e.g. to inspect the generated code.\nIf "),a("code",[t._v("workdir")]),t._v(" does not exist, you might need to create it.")]),t._v(" "),a("h2",{attrs:{id:"plan-of-action"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#plan-of-action"}},[t._v("#")]),t._v(" Plan of action")]),t._v(" "),a("p",[t._v("Adding support for a programming language in TESTed boils down to implementing a programming language module for that programming language.\nImplementing such a module is theoretically as easy as creating one subclass,\nbut we recommend the following structure:")]),t._v(" "),a("ol",[a("li",[t._v("The configuration file,\nwhich contains some options for the programming language.\nThis also includes the type configuration, which specifies the data type support.")]),t._v(" "),a("li",[t._v("The configuration class, which has more dynamic options, like the compilation command that should be used when evaluating a submission.")]),t._v(" "),a("li",[t._v("The templates, which are used to generate the necessary test code.")])]),t._v(" "),a("p",[t._v("TESTed includes a utility to generate the necessary files in the correct location.\nBased on a few questions, stubs will be generated for the configuration file, the configuration class and the templates.")]),t._v(" "),a("p",[t._v("You can run the utility as follows:")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" python -m tested.generation\n")])])]),a("p",[t._v("Note that this will only generate the necessary files.\nIt will not modify existing files,\nso you must not forget to do the steps in the "),a("a",{attrs:{href:"#register-the-language"}},[t._v("Registration")]),t._v(" section later.")]),t._v(" "),a("p",[t._v("We will now look at the various features of the programming language C.\nWe will assume the generation tool was not used, so the files need to be created manually.\nIf you did use the generation tool, skip the instructions on creating files.")]),t._v(" "),a("h2",{attrs:{id:"the-programming-language-c"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#the-programming-language-c"}},[t._v("#")]),t._v(" The programming language C")]),t._v(" "),a("p",[t._v("Before starting with adding support for C,\nwe will look briefly at which features of C we want to support:\nwhich features of the language can we support in TESTed and which features from TESTed can we support in C?")]),t._v(" "),a("p",[t._v("Of course, we want to support as much as possible.\nHowever, there are some limitations, specifically in the data type support.")]),t._v(" "),a("h5",{attrs:{id:"unsupported-basic-types"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#unsupported-basic-types"}},[t._v("#")]),t._v(" Unsupported basic types")]),t._v(" "),a("p",[t._v("In our support for C, we won't support the following basic types:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("sequence")]),t._v(":\nArrays are a special case in C.\nFor example, static arrays cannot be used as a return value,\nand are not ideal as function parameter either.\nTo use dynamic arrays effectively, you need a pointer to the data and the size of the array.\nThis has implications:\nfor example, if you want to pass an array as a parameter to a function, you need to pass two parameters.\nTESTed has no support for this at the moment.\nAs such, arrays are not supported.")]),t._v(" "),a("li",[a("code",[t._v("set")]),t._v(":\nC does not have any built-in sets.")]),t._v(" "),a("li",[a("code",[t._v("map")]),t._v(":\nC does not have any built-in maps.\nThere are structs, but it is not possible to get the field names at runtime, so there is no way to serialize them.")])]),t._v(" "),a("h5",{attrs:{id:"unsupported-advanced-types"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#unsupported-advanced-types"}},[t._v("#")]),t._v(" Unsupported advanced types")]),t._v(" "),a("p",[t._v("Of the basic types that we do support, we cannot support the following advanced types:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("big_int")]),t._v(":\nC does not have a type for arbitrary size numbers.")]),t._v(" "),a("li",[a("code",[t._v("fixed_precision")]),t._v(":\nC does not have a type for fixed precision floats.")]),t._v(" "),a("li",[a("strong",[t._v("Other data types")]),t._v(":\nThis concerns types such as "),a("code",[t._v("array")]),t._v(" and "),a("code",[t._v("list")]),t._v(".\nSimilarly, "),a("code",[t._v("tuple")]),t._v(" is also not supported.")])]),t._v(" "),a("p",[t._v("The first step is to create a folder in which we will put the code of the C module.\nThis folder should be named after the programming language\nand created in the correct location within the source directory.\nCreate a new folder "),a("code",[t._v("tested/languages/c")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("universal-judge/\n├─ tested/\n│ ├─ languages/\n│ │ ├── c/        <- new folder\n│ │ ├── haskell/\n│ │ ├── java/\n│ │ ├── python/\n│ │ ├── config.py\n│ │ ...\n│ ...\n...\n")])])]),a("h2",{attrs:{id:"configuration-file"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#configuration-file"}},[t._v("#")]),t._v(" Configuration file")]),t._v(" "),a("p",[t._v("The configuration file is a JSON file with some properties of the programming language.\nTechnically, this file is optional: you only need to implement the configuration class (which we'll do later).\nHowever, using the configuration file is easier.\nCreate the configuration file "),a("code",[t._v("tested/languages/c/config.json")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-json5 extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json5"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// General options about the language.")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"general"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Files which will be available in the compilation and execution step.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// We'll discuss these later, but these are dependencies that are needed")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// during the compilation step in C.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"dependencies"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"values.h"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"values.c"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"evaluation_result.h"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"evaluation_result.c"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// If the language uses a selector during compilation.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// This is true for most languages, including C.  ")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"selector"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"extensions"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Extension of the generated test code.  ")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"file"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"c"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Extensions of the templates.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Defaults to the file extension and mako.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"templates"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"c"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mako"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The default value, so not really necessary.")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Language constructs are translated into the style of the programming language")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"naming_conventions"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Possibilities are snake_case, camelCase and PascalCase")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"namespace"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"snake_case"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// snake_case is the default")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"function"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"snake_case"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Indicate for which language constructs recognized by TESTed")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// we want to add support.")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// By default, all constructs are false, meaning no support.")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"constructs"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Object-oriented stuff, such as classes and constructors.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"objects"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Throwable exceptions.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"exceptions"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Functions")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"function_calls"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Assignments (often a variable)")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// However, e.g. in Haskell this is implemented as a constant function")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// returning the same value. So, it is a "conceptual" assignment, not')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// necessarily a real one.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// For example, `x = 5` is technically a function in Haskell, but is")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// considered an assignment in TESTed.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"assignments"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// If collections (e.g. lists) can have elements of different types.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// For example, there is support in Python; it is difficult ")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// in Java and Haskell does not support it at all.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"heterogeneous_collections"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// If a function can accept arguments of different types.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// For example, Java supports this with method overloading.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// On the other hand, C does not support this.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// An example is `echo("string")` and `echo(5)`.')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"heterogeneous_arguments"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// If programmed checks are supported in this language.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Technically, not a language construct.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"evaluation"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// If named function arguments are supported.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// This implies the arguments can be passed in a different order.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// For example, Python supports this.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"named_arguments"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// If default values for function arguments are supported.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"default_parameters"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Indicate which datatypes are supported in this language.")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// By default, all basic types are supported, but advanced types are not.")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// There are three possible values:")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// - supported: full support")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// - unsupported: no support")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// - reduced: only for advanced types. This indicates that the type will")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   be reduced to its basic type. E.g. a list will become a sequence.")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"datatypes"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// BASIC TYPES")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"integer"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"supported"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"rational"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"supported"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"char"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"supported"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"text"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"supported"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"boolean"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"supported"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"sequence"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"unsupported"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ADVANCED TYPES")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"set"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"unsupported"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"map"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"unsupported"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"nothing"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"supported"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"int8"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"supported"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"uint8"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"supported"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"int16"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"supported"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"uint16"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"supported"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"int32"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"supported"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"uint32"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"supported"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"int64"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"supported"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"uint64"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"supported"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"bigint"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"reduced"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"single_precision"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"supported"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"double_precision"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"supported"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"double_extended"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"supported"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"fixed_precision"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"unsupported"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"array"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"unsupported"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"list"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"unsupported"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"tuple"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"unsupported"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Indicate limits on data structures.")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// For example, some languages have limits on the possible types for keys")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// in map-like data structures.")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// For example, maps are implemented using Objects in JavaScript, which means")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// that not all types are usable as keys.")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// This is an advanced configuration. We recommend leaving it until later.")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// For C, the list is empty, since C does not support either data structure.")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"restrictions"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"map_key"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"set"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"user-facing-type-configuration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#user-facing-type-configuration"}},[t._v("#")]),t._v(" User-facing type configuration")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("Experimental")]),t._v(" "),a("p",[t._v("This file is currently experimental, and thus optional.")])]),t._v(" "),a("p",[t._v("When generating problem statements,\nTESTed needs to know how certain data types should be shown to the user.\nFor this purpose, you can provide a type configuration file.\nCreate the configuration file "),a("code",[t._v("tested/languages/c/types.json")]),t._v(".\nSee the existing files for examples.\nNote that this is experimental, so changes are possible.")]),t._v(" "),a("h2",{attrs:{id:"configuration-class"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#configuration-class"}},[t._v("#")]),t._v(" Configuration class")]),t._v(" "),a("p",[t._v("The configuration class is the only mandatory part of adding language support.\nIt serves as the API between TESTed and the language module.\nBecause TESTed is written in Python, the class needs to be Python as well.")]),t._v(" "),a("p",[t._v("Create a file "),a("code",[t._v("tested/languages/c/config.py")]),t._v(" and add a class the inherits from "),a("code",[t._v("Language")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("C")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Language"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# See the docs of the parent class for all available options.")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Most of the default implementations fall back to using the JSON")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# configuration file, but you could also override them all and not")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# use the configuration file.")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# The compilation command used by TESTed.")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# See below for more information, or check the method documentation")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# for technical details.")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("compilation")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" config"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Config"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" files"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" List"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" CallbackResult"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    main_file "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" files"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    exec_file "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("main_file"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stem\n    result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" executable_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exec_file"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"gcc"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-std=c11"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-Wall"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"evaluation_result.c"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"values.c"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n             main_file"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-o"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Execution command used by TESTed.")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# This will execute the result of the compilation command.")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# See below for more information, or check the method documentation")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# for technical details.")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("execution")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" config"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Config"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                cwd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("file")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" List"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" Command"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    local_file "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cwd "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" executable_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("file")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("local_file"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("absolute"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("solution")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" solution"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bundle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Bundle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Contains some code to change the main function.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# See the actual implementation for the details.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pass")]),t._v("\n")])])]),a("h3",{attrs:{id:"compilation-step"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#compilation-step"}},[t._v("#")]),t._v(" Compilation step")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Interpreted languages")]),t._v(" "),a("p",[t._v("Whenever possible, we recommend adding a compilation step, even if the language is not compiled.\nFor example, in Python and JavaScript the compilation step is used to check the syntax of the submission.\nHowever, if the language does not support it (e.g. Bash),\nyou can skip this implementation; the default implementation does nothing.")])]),t._v(" "),a("p",[t._v("The first parameter in the "),a("code",[t._v("compilation")]),t._v(" method is a class with some configuration options.\nThese options include all exercise options.\nFor example, you could enable the exercise author to choose the C version used by TESTed (e.g. C99 instead of C11).\nHowever, in this case, we only support C11.")]),t._v(" "),a("p",[t._v("The second parameter is a list of files TESTed considers to be useful to have during compilation.\nIt will contain the dependencies specified by the configuration file, the submission and the generated test code files.\nBy convention, the last file in the list is the one with the main function, and should thus be the one being compiled.")]),t._v(" "),a("p",[t._v("All of these files will be in the same directory as the main file.\nIt's not mandatory to actually use the files, e.g. for C,\nGCC will take care of loading all other files, so we only use the main file.\nAs we do, you can also hardcode the name of files defined as a dependency in the configuration file.")]),t._v(" "),a("p",[t._v("The method must be a tuple with two elements: the compilation command and the resulting file or file filter.")]),t._v(" "),a("p",[t._v("The compilation command will be executed by TESTed with the "),a("code",[t._v("subprocess")]),t._v(" Python module.")]),t._v(" "),a("p",[t._v('The resulting file or file filter is used to copy the compiled binary to the execution directory.\nOnly this file will be available during execution.\nYou can return a list of files if the result of compilation is a file with a predicable name.\nFor example, in C we always know the name of the binary, so we just return that.\nWhen returning a list, you should also place the "main" file at the end.')]),t._v(" "),a("p",[t._v("However, this is not always the case.\nFor example, compiling a "),a("code",[t._v(".java")]),t._v(" file will result in one or more "),a("code",[t._v(".class")]),t._v(" files,\ndepending on the content of the "),a("code",[t._v(".java")]),t._v(" file.\nTherefore, you can return a filter function, which determines which files are kept.\nTESTed will call the filter function for each file in the compilation directory after compiling.")]),t._v(" "),a("p",[t._v("An example of calling this method with the parameters and return values for C:")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" compilation"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'submission.c'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'evaluation_result.c'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'context_0_0.c'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'selector.c'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'gcc'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'-std=c11'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'-Wall'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'evaluation_result.c'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'values.c'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'selector.c'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'-o'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'selector.exe'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'selector.exe'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("Return an empty compilation command to skip compilation.")]),t._v(" "),a("h3",{attrs:{id:"execution"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#execution"}},[t._v("#")]),t._v(" Execution")]),t._v(" "),a("p",[t._v("After compiling the submission and test code, the test code must be executed to get the results of the evaluation.\nThis method has four parameters:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("config")]),t._v(":\nSame as for the compilation method.\nFor example, the Java implementation uses this to set the maximum JVM memory.")]),t._v(" "),a("li",[a("code",[t._v("cwd")]),t._v(":\nthe directory in which the execution is taking place")]),t._v(" "),a("li",[a("code",[t._v("file")]),t._v(":\nthe executable file that must be executed")]),t._v(" "),a("li",[a("code",[t._v("arguments")]),t._v(":\narguments that should be passed to the process.\nThis is used, for example, to select which context should be executed.")])]),t._v(" "),a("p",[t._v("The return value is again a command that will be passed to the "),a("code",[t._v("subprocess")]),t._v(" module.")]),t._v(" "),a("p",[t._v("In the case of C, this is simple: we execute the executable file and pass the arguments to it.")]),t._v(" "),a("p",[t._v("An example is:")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" execution"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/test/path'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'executable.exe'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'arg1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'arg2'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/test/path/executable.exe'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'arg1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'arg2'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("p",[t._v("In most languages, we are done by now with the configuration.\nHowever, a C program can only have one main function.\nSince the submission can have a main function, and the generated test code also has a main function, there is a conflict.\nAs such, we use the "),a("code",[t._v("submission")]),t._v(" method to modify the submission by renaming the main function.")]),t._v(" "),a("h2",{attrs:{id:"templates"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#templates"}},[t._v("#")]),t._v(" Templates")]),t._v(" "),a("p",[t._v("Finally, we need to implement a set of templates that will be used by TESTed to generate the test code\n(and translate the test suite into the programming language of the submission).")]),t._v(" "),a("p",[t._v("Some templates are mandatory (as they are used by the configuration class),\nbut it is often useful to create a few more templates, to enable reuse.\nFor C, we create the following templates:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("run.c")]),t._v(": template for a run, used to execute multiple contexts ("),a("strong",[t._v("mandatory")]),t._v(")")]),t._v(" "),a("li",[a("code",[t._v("selector.c")]),t._v(": template to select which context to run when using batch compilation ("),a("strong",[t._v("mandatory")]),t._v(" if batch compilation is supported)")]),t._v(" "),a("li",[a("code",[t._v("declaration.mako")]),t._v(": translates a variable declaration to C")]),t._v(" "),a("li",[a("code",[t._v("function.mako")]),t._v(": translates a function call to C")]),t._v(" "),a("li",[a("code",[t._v("statement.mako")]),t._v(": translates a TESTed statement (thus also expressions) to C ("),a("strong",[t._v("mandatory")]),t._v(")")]),t._v(" "),a("li",[a("code",[t._v("value.mako")]),t._v(": translates a literal to C (we also have a two helper templates: "),a("code",[t._v("value_arguments.mako")]),t._v(", "),a("code",[t._v("value_basic.mako")]),t._v(")")])]),t._v(" "),a("p",[t._v("All templates are located in "),a("code",[t._v("tested/languages/c/templates")]),t._v(".")]),t._v(" "),a("h3",{attrs:{id:"run-template"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#run-template"}},[t._v("#")]),t._v(" Run template")]),t._v(" "),a("p",[t._v("This is conceptually the most complex template.\nIt is responsible for generating the test code for one run.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Runs in TESTed")]),t._v(" "),a("p",[t._v("Normally, TESTed will execute every context separately.\nHowever, this means starting a new process for each context, which can introduce a lot of overhead.\nAs such, TESTed will combine contexts into one run, which is then run in a single process.")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Mako white space")]),t._v(" "),a("p",[t._v("TESTed uses the templating system Mako for these templates.\nThe default configuration in TESTed will strip Mako-induced white space.\nFor example, the "),a("code",[t._v("for")]),t._v("-loop above will not be intended in the final file.")]),t._v(" "),a("p",[t._v("Newlines in the template will result in newlines in the final file.\nThis can be prevented by using a backslash:")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" test "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" \\⏎\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("⏎\n")])])]),a("p",[t._v("Will result in:")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" test "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("⏎\n")])])])]),t._v(" "),a("p",[t._v("In C, the annotated implementation is:")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdio.h>")])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Include the values module, reponsible for serialisation.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"values.h"')])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Include the submission code.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"${submission_name}.c"')])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Import all programming language-specific checks.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" name in evaluator_names"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"${name}.c"')])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" endfor\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Create the variables which will contain the names of the files used to")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// save the return values and the exceptions.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// C doesn't support exceptions, but TESTed still requires the file to be present.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// We also define two functions to write a seperator to the file.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// These will be used between each context and each test case,")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// allowing TESTed to seperate the results in the output files.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" FILE"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" $"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("execution_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("_value_file "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" FILE"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" $"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("execution_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("_exception_file "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" $"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("execution_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("_write_separator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fprintf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("execution_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("_value_file"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"--${secret_id}-- SEP"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fprintf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("execution_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("_exception_file"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"--${secret_id}-- SEP"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fprintf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("stdout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"--${secret_id}-- SEP"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fprintf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("stderr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"--${secret_id}-- SEP"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" $"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("execution_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("_write_context_separator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fprintf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("execution_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("_value_file"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"--${context_secret_id}-- SEP"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fprintf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("execution_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("_exception_file"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"--${context_secret_id}-- SEP"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fprintf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("stdout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"--${context_secret_id}-- SEP"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fprintf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("stderr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"--${context_secret_id}-- SEP"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" continued after the text block\n")])])]),a("p",[t._v('If a return value is produced, it must be serialized before it is written to the output file.\nThis serialization converts the programming-language-specific value into the language-independent format used by TESTed.\nIt is useful to implement this as a separate module, which is called "values" by convention.')]),t._v(" "),a("p",[t._v("TESTed will expect the following functions to be available:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("send_value(value)")]),t._v(" serialise and write a value to the return output file.")]),t._v(" "),a("li",[a("code",[t._v("send_exception(exception)")]),t._v(" serialise and write an exception to the exception file.")]),t._v(" "),a("li",[a("code",[t._v("send_specific_value(value)")]),t._v(" serialise and write the result of a programming-language-specific check for the return channel.")]),t._v(" "),a("li",[a("code",[t._v("send_specific_exception(exception)")]),t._v(" serialise and write the result of a programming-language-specific check for the exception channel.")])]),t._v(" "),a("p",[t._v("However, since C does not support exceptions, we don't implement those.\nThe other functions are implemented using a macro:")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" continued from before the text block\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Uses the function from the values module.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("undef")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[t._v("send_value")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name function"}},[t._v("send_value")]),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("write_value")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("execution_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("_value_file"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("undef")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[t._v("send_specific_value")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name function"}},[t._v("send_specific_value")]),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("write_evaluated")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("execution_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("_value_file"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" continued after the text block\n")])])]),a("p",[t._v("Finally, we execute the contexts.\nWe generate a function per context:")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" continued from before the text block\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Generate a function for each context in this run:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ctx in "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("enumerate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("contexts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" $"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("execution_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("_context_$"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Optional code fragment before executing a context.")]),t._v("\n        $"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("ctx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("before"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Execute each test case.")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" testcase in ctx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("testcases"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Write the separator to the output files.")]),t._v("\n            $"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("execution_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("_write_separator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Use another template to generate the statement that must be executed.")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("include file"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"statement.mako"')]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"statement=testcase.input_statement()"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" endfor\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Optional code fragment after executing a context.")]),t._v("\n        $"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("ctx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("after"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" endfor\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" continued after the text block\n")])])]),a("p",[t._v("Now, we must still generate the code that will call these context functions:")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Generate a function that will execute the run.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" $"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("execution_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Create the output files.")]),t._v("\n    $"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("execution_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("_value_file "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fopen")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"${value_file}"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"w"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    $"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("execution_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("_exception_file "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fopen")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"${exception_file}"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"w"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Similary to the separator for test cases, we write the context")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// seperator between each execution of a context.")]),t._v("\n    $"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("execution_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("_write_context_separator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// This is a special test case: it is used when you want to test")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// the main function of the submission.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" run_testcase"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exists"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\\\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" argument in "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"solution"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" run_testcase"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("arguments"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"${argument}"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \\\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" endfor\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" exit_code "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("solution_main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("len")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("run_testcase"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exit_code "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" exit_code"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" endif\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Execute all contexts from the test suite.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ctx in "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("enumerate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("contexts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Don't forget the separator.")]),t._v("\n        $"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("execution_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("_write_context_separator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Call the function we generated previously.")]),t._v("\n        $"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("execution_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("_context_$"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" endfor\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// We are done, so close the result files.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fclose")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("execution_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("_value_file"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fclose")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("execution_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("_exception_file"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// TESTed also supportes batch compilation, in which case")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// we don't need a main function. Otherwise we do.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// In batch compilation the main is not needed, since this")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// module will be called from the selector module.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("ifndef")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[t._v("INCLUDED")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" $"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("execution_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")])]),t._v("\n")])])]),a("h3",{attrs:{id:"selector-template"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#selector-template"}},[t._v("#")]),t._v(" Selector template")]),t._v(" "),a("p",[t._v("In batch compilation, TESTed will use a selector template to choose which context is executed.\nWe set "),a("code",[t._v("INCLUDED")]),t._v(" to "),a("code",[t._v("true")]),t._v(", since this will allow us to include the run file from before:")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<string.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdio.h>")])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("INCLUDED")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[t._v("true")])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" cont in contexts"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Include individual context files.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// This is the same code as in the file before.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// We will probably merge these in the future.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"${cont}.c"')])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" endfor\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Main function.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" argc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" argv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("argc "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fprintf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("stderr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"No run context selected."')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Code to execute the correct context.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" argv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" cont in contexts"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("strcmp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"${cont}"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" $"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("cont"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" endfor\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fprintf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("stderr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"Non-existing run context '%s' selected.\"")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"statement-template"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#statement-template"}},[t._v("#")]),t._v(" Statement template")]),t._v(" "),a("p",[t._v("Used to convert a TESTed statement to the programming language of the submission.\nIn this case, we generate C code:")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("## Convert a statement and"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("or expression into Java code"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v(" from tested"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("utils import get_args "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\\\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v(" from tested"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("serialisation import Value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Identifier"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" FunctionCall"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Assignment "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\\\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("page args"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"statement,full=False"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\\\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isinstance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("statement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Identifier"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    ## If the expression is an identifier"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" just echo it"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    $"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("statement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\\\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" elif "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isinstance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("statement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" FunctionCall"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    ## Delegate to the function template "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" function calls"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("include file"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"function.mako"')]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"function=statement"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\\\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" elif "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isinstance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("statement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get_args")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    ## We have a value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" delegate to the value template"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("include file"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"value.mako"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"value=statement"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\\\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" assert "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isinstance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("statement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get_args")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Assignment"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\\\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" full"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("include file"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"declaration.mako"')]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tp=statement.type, value=statement.expression"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" \\\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" endif\n    $"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("statement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("variable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("include file"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"statement.mako"')]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"statement=statement.expression"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\\\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" endif\n")])])]),a("p",[t._v("One non-intuitive aspect is the "),a("code",[t._v("full")]),t._v(" parameter.\nIt indicates if a variable declaration is needed or not:")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" variabele "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// with declaration")]),t._v("\nvariabele "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// without declaration")]),t._v("\n")])])]),a("p",[t._v("See the actual templates for examples of how to handle most constructs.")]),t._v(" "),a("h2",{attrs:{id:"register-the-language"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#register-the-language"}},[t._v("#")]),t._v(" Register the language")]),t._v(" "),a("p",[t._v("We must also register the language module in TESTed.\nYou must always do this, even if you used the generator to generate the stubs.")]),t._v(" "),a("p",[t._v("In the file "),a("code",[t._v("tested/languages/__init__.py")]),t._v(", modify "),a("code",[t._v("LANGUAGES")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("LANGUAGES "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'c'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" C"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# This is what we added here, mapping a name to the configuration class.")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'haskell'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Haskell"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'java'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'javascript'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" JavaScript"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'kotlin'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Kotlin"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'python'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Python"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'runhaskell'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" RunHaskell"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"testing-the-language-implementation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#testing-the-language-implementation"}},[t._v("#")]),t._v(" Testing the language implementation")]),t._v(" "),a("p",[t._v("To test the language implementation, there is a set of tests.\nYou should also add support for your new programming language:")]),t._v(" "),a("ol",[a("li",[t._v("Add solutions in your programming language to one or more of the test exercises (in the folder "),a("code",[t._v("exercise")]),t._v(").\nSee the existing solutions for what your solution should do.")]),t._v(" "),a("li",[t._v("Modify "),a("code",[t._v("tests/test_functionality.py")]),t._v(" and other test files to also test the new programming language.")])])])}),[],!1,null,null,null);s.default=n.exports}}]);