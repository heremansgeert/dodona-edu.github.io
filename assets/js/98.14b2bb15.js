(window.webpackJsonp=window.webpackJsonp||[]).push([[98],{804:function(t,s,e){"use strict";e.r(s);var a=e(29),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"adding-new-programming-languages"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#adding-new-programming-languages"}},[t._v("#")]),t._v(" Adding new programming languages")]),t._v(" "),e("p",[t._v("TESTed is extensible with new programming languages.\nIt is designed around a common core,\nthat implements the bulk of the functionality required by a software test framework in a generic way.\nThis core calls an internal API whenever it needs functionality that depends on a specific programming language.\nAll programming languages supported by TESTed have a language module that implements this internal API.")]),t._v(" "),e("p",[t._v("This tutorial explains in detail how a language module can implement the internal API for a new programming language,\nessentially extending TESTed with support for the new programming language.\nWe will use the C programming language as an example\nbut indicate explicitly where we make configurations that are specific for the C programming language.\nAs such, you can follow this tutorial to extend TESTed with support for other programming languages.")]),t._v(" "),e("p",[t._v("Some useful links that can help you:")]),t._v(" "),e("ul",[e("li",[t._v("Implementations of modules for all programming languages currently supported by TESTed, including the C module that is\nused as an example in this tutorial: "),e("a",{attrs:{href:"https://github.com/dodona-edu/universal-judge/tree/master/tested/languages",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/dodona-edu/universal-judge/tree/master/tested/languages"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("li",[t._v("Test exercises: "),e("a",{attrs:{href:"https://github.com/dodona-edu/universal-judge/tree/master/exercise",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/dodona-edu/universal-judge/tree/master/exercise"),e("OutboundLink")],1)])]),t._v(" "),e("h2",{attrs:{id:"installing-and-running-tested"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#installing-and-running-tested"}},[t._v("#")]),t._v(" Installing and running TESTed")]),t._v(" "),e("p",[t._v("Because support for programming languages is added to TESTed itself,\nrunning and testing TESTed will be essential during development of language modules.\nYou therefore need to install TESTed locally.\nWe recommend following the instructions from\nthe "),e("a",{attrs:{href:"https://github.com/dodona-edu/universal-judge#installing-tested",target:"_blank",rel:"noopener noreferrer"}},[t._v("README"),e("OutboundLink")],1),t._v(" in the GitHub repository of TESTed.\nNote that you only need to install the Python dependencies.\nDependencies for other programming languages (e.g. "),e("code",[t._v("ghc")]),t._v(" for Haskell) are optional.")]),t._v(" "),e("p",[t._v("To follow the parts of this tutorial that focus on the C programming language,\nyou also need to have a local installation of the "),e("code",[t._v("gcc")]),t._v(" compiler (version 8.1 or up).")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("Windows users")]),t._v(" "),e("p",[t._v("We recommend using the "),e("a",{attrs:{href:"https://learn.microsoft.com/en-us/windows/wsl/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Windows Subsystem for Linux"),e("OutboundLink")],1),t._v(" for development on Windows machines.\nWhile TESTed is itself written in Python and thus platform independent,\ndependencies for programming languages are not always available on Windows for each language.")])]),t._v(" "),e("h3",{attrs:{id:"running-tested"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#running-tested"}},[t._v("#")]),t._v(" Running TESTed")]),t._v(" "),e("p",[t._v("After cloning the GitHub repository of TESTed and installing the necessary dependencies,\nthe directory in which TESTed is installed should look like this:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("universal-judge\n├── exercise/     # Test exercises\n├── tested/       # Sources\n├── tests/        # Tests\n├── workdir/      # Working directory when manually running TESTed\n├── config.json   # Used in Dodona\n└── run           # Used in Dodona\n")])])]),e("p",[t._v("In this tutorial, we assume you run the commands in the root directory of the repository.\nTest if you can run TESTed using the following command:")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" python "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-m")]),t._v(" tested "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--help")]),t._v("\nusage: __main__.py "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-h"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-c CONFIG"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-o OUTPUT"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-v"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\nThe programming language agnostic educational "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v(" framework.\n\noptional arguments:\n  -h, "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--help")]),t._v("            show this "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("help")]),t._v(" message and "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("exit")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-c")]),t._v(" CONFIG, "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--config")]),t._v(" CONFIG\n                        Where to "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("read")]),t._v(" the config from\n  "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-o")]),t._v(" OUTPUT, "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--output")]),t._v(" OUTPUT\n                        Where the judge output should be written to.\n  -v, "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--verbose")]),t._v("         Include verbose logs. It is recommended to also use "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-o")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" this case.\n")])])]),e("p",[t._v("The above command is how you run TESTed in production.\nFor development, however, the need to always specify an exercise configuration is somewhat cumbersome.\nFor that purpose, you can run TESTed in development mode which uses a hard-coded configuration:")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" python "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-m")]),t._v(" tested.manual\n")])])]),e("p",[t._v("Running TESTed in development mode uses the hard-coded values defined in "),e("code",[t._v("tested/manual.py")]),t._v(" to evaluate an exercise\nand puts all files that are generated intermediately into the "),e("code",[t._v("workdir")]),t._v(" directory of TESTed.\nThe latter can be very useful, for example, to inspect the test code that is generated by a language module.\nIf the "),e("code",[t._v("workdir")]),t._v(" directory does not exist yet, you might need to create it.")]),t._v(" "),e("h2",{attrs:{id:"design-choices"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#design-choices"}},[t._v("#")]),t._v(" Design choices")]),t._v(" "),e("p",[t._v("Extending TESTed with support for a new programming language comes down\nto implementing the internal API in a language module for that programming language.\nIn theory, implementing such a language module is nothing more than creating one subclass.\nBut we recommend the following structure:")]),t._v(" "),e("ol",[e("li",[t._v("A configuration file that contains some specific options for the programming language.\nThis also includes the type configuration, which specifies the data type support for the programming language.")]),t._v(" "),e("li",[t._v("A configuration class that has some more dynamic options, such as the compilation command used when evaluating\nsubmissions.")]),t._v(" "),e("li",[t._v("Templates that are used to generate test code.")])]),t._v(" "),e("p",[t._v("TESTed contains a utility that generates stubs for these files in the correct location.\nBased on your answers to a few questions, stubs will be generated for a configuration file, a configuration class and\nthe templates. Run the utility using the following command:")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" python "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-m")]),t._v(" tested.generation\n")])])]),e("p",[t._v("Note that this command will only generate stub files for a new programming language.\nIt will not modify core TESTed files, so you should not forget to register the new language in TESTed later\n(see "),e("a",{attrs:{href:"#register-the-language"}},[e("em",[t._v("Registration")])]),t._v(").")]),t._v(" "),e("p",[t._v("We will now look at the steps you need to take to add support for the C programming language to TESTed.\nWe assume the generation tool was not used, so in each step we will manually create the files.\nIf you did use the generation tool, skip the parts where the files are created.")]),t._v(" "),e("h2",{attrs:{id:"the-c-programming-language"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#the-c-programming-language"}},[t._v("#")]),t._v(" The C programming language")]),t._v(" "),e("p",[t._v("Before starting to add support for C, we first look briefly into what features of C we want to support:\nwhat language features can we support in TESTed and what TESTed features can we support in C?")]),t._v(" "),e("p",[t._v("Of course, we want to support as much of the TESTed features as possible.\nHowever, there are some limitations, especially in regard to data type support.")]),t._v(" "),e("h3",{attrs:{id:"unsupported-basic-types"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#unsupported-basic-types"}},[t._v("#")]),t._v(" Unsupported basic types")]),t._v(" "),e("p",[t._v("In the C language module, we will not support the following basic types:")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("sequence")]),t._v(":\nArrays in C are special, compared to other programming languages.\nStatic arrays cannot be used as a return value, and are not ideal as function parameters either.\nOn the other hand, effectively using a dynamic array requires a pointer to the data and the size of the array.\nThis has implications: for example, you need to pass two parameters if you want to pass an array to a function.\nTESTed currently has no support to pass literal values through multiple parameters,\nso sequences are currently not supported for the C programming language.\nArrays as return values could be possible by using a struct that wraps the pointer and its size.\nHowever, this is non-standard and thus not supported at the moment.")]),t._v(" "),e("li",[e("code",[t._v("set")]),t._v(": C does not have built-in sets.")]),t._v(" "),e("li",[e("code",[t._v("map")]),t._v(": C does not have built-in maps.\nC has structs, but it is not possible to get access to their field names at runtime,\nso there is no way to serialize them.")])]),t._v(" "),e("h3",{attrs:{id:"unsupported-advanced-types"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#unsupported-advanced-types"}},[t._v("#")]),t._v(" Unsupported advanced types")]),t._v(" "),e("p",[t._v("Obviously, the C language module will not support any advanced type that has an unsupported basic type.\nIn addition, the C language module will also not support the following advanced types:")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("bigint")]),t._v(": C does not have built-in arbitrary precision integers.")]),t._v(" "),e("li",[e("code",[t._v("fixed_precision")]),t._v(": C does not have built-in fixed precision real numbers.")])]),t._v(" "),e("p",[t._v("The first step is to create a directory for the configuration code of the C language module.\nThis directory must be named after the programming language\nand created as a subdirectory of the "),e("code",[t._v("tested/languages")]),t._v(" directory.\nCreate a new directory "),e("code",[t._v("tested/languages/c")]),t._v(":")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("universal-judge/\n├─ tested/\n│ ├─ languages/\n│ │ ├── c/        <- new folder\n│ │ ├── haskell/\n│ │ ├── java/\n│ │ ├── python/\n│ │ ├── config.py\n│ │ ...\n│ ...\n...\n")])])]),e("h2",{attrs:{id:"configuration-file"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#configuration-file"}},[t._v("#")]),t._v(" Configuration file")]),t._v(" "),e("p",[t._v("A configuration file for a programming language in TESTed is a JSON file\nconfiguring some static properties of the language.\nTechnically, this file is optional: you only need to implement the configuration class,\nwhich we will do in "),e("a",{attrs:{href:"#configuration-class"}},[e("em",[t._v("Configuration class")])]),t._v(".\nHowever, using a configuration file makes the implementation of the configuration class much easier.\nCreate a configuration file "),e("code",[t._v("tested/languages/c/config.json")]),t._v(" (however, you probably want to remove the comments, as\nthose are not support by JSON):")]),t._v(" "),e("div",{staticClass:"language-json5 extra-class"},[e("pre",{pre:!0,attrs:{class:"language-json5"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// General options about the language.")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"general"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Files which will be available in the compilation and execution step.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// We'll discuss these later, but these are dependencies that are needed")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// during the compilation step in C.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"dependencies"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"values.h"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"values.c"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"evaluation_result.h"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"evaluation_result.c"')]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// If the language uses a selector during compilation.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// This is true for most languages, including C.  ")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"selector"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"extensions"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Extension of the generated test code.  ")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"file"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"c"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Extensions of the templates.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Defaults to the file extension and mako.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"templates"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"c"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mako"')]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The default value, so not really necessary.")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Language constructs are translated into the style of the programming language")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"naming_conventions"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Possibilities are snake_case, camelCase and PascalCase")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"namespace"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"snake_case"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// snake_case is the default")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"function"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"snake_case"')]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Indicate for which language constructs recognized by TESTed")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// we want to add support.")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// By default, all constructs are false, meaning no support.")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"constructs"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Object-oriented stuff, such as classes and constructors.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"objects"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Throwable exceptions.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"exceptions"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Functions")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"function_calls"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Assignments (often a variable)")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// However, e.g. in Haskell this is implemented as a constant function")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// returning the same value. So, it is a "conceptual" assignment, not')]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// necessarily a real one.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// For example, `x = 5` is technically a function in Haskell, but is")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// considered an assignment in TESTed.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"assignments"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// If collections (e.g. lists) can have elements of different types.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// For example, there is support in Python; it is difficult ")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// in Java and Haskell does not support it at all.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"heterogeneous_collections"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// If a function can accept arguments of different types.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// For example, Java supports this with method overloading.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// On the other hand, C does not support this.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// An example is `echo("string")` and `echo(5)`.')]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"heterogeneous_arguments"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// If programmed checks are supported in this language.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Technically, not a language construct.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"evaluation"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// If named function arguments are supported.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// This implies the arguments can be passed in a different order.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// For example, Python supports this.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"named_arguments"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// If default values for function arguments are supported.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"default_parameters"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Indicate which datatypes are supported in this language.")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// By default, all basic types are supported, but advanced types are not.")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// There are three possible values:")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// - supported: full support")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// - unsupported: no support")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// - reduced: only for advanced types. This indicates that the type will")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   be reduced to its basic type. E.g. a list will become a sequence.")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"datatypes"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// BASIC TYPES")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"integer"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"supported"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"rational"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"supported"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"char"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"supported"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"text"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"supported"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"boolean"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"supported"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"sequence"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"unsupported"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ADVANCED TYPES")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"set"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"unsupported"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"map"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"unsupported"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"nothing"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"supported"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"int8"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"supported"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"uint8"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"supported"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"int16"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"supported"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"uint16"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"supported"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"int32"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"supported"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"uint32"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"supported"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"int64"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"supported"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"uint64"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"supported"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"bigint"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"unsupported"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"single_precision"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"supported"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"double_precision"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"supported"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"double_extended"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"supported"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"fixed_precision"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"unsupported"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"array"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"unsupported"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"list"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"unsupported"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"tuple"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"unsupported"')]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Indicate limits on data structures.")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// For example, some languages have limits on the possible types for keys")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// in map-like data structures.")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// For example, maps are implemented using Objects in JavaScript, which means")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// that not all types are usable as keys.")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// This is an advanced configuration. We recommend leaving it until later.")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// For C, the list is empty, since C does not support either data structure.")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"restrictions"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"map_key"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"set"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h2",{attrs:{id:"language-specific-names-for-data-types"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#language-specific-names-for-data-types"}},[t._v("#")]),t._v(" Language-specific names for data types")]),t._v(" "),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[t._v("Experimental")]),t._v(" "),e("p",[t._v("Currently,\nconfiguration of language-specific names for data types is an experimental feature of TESTed and thus optional.")])]),t._v(" "),e("p",[t._v("TESTed supports describing problem statements in a generic way,\nusing a templating system\nin which placeholders will be replaced by text that depends on a specific programming language.\nOne aspect of this process is\nthat the same data type might be known under different names in different programming languages.\nFor this purpose, create a type configuration file "),e("code",[t._v("tested/languages/c/types.json")]),t._v(".\nSee the different files for the different programming languages for examples.\nNote that this feature of TESTed is still experimental, so future changes are possible.")]),t._v(" "),e("h2",{attrs:{id:"configuration-class"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#configuration-class"}},[t._v("#")]),t._v(" Configuration class")]),t._v(" "),e("p",[t._v("A configuration class is the only mandatory part of extending TESTed with support for a programming language.\nIt implements the internal API that TESTed uses as an interface between the core module and a language module.\nBecause the core module of TESTed is implemented in Python,\na configuration class needs to be implemented in Python as well.")]),t._v(" "),e("p",[t._v("Create a Python module "),e("code",[t._v("tested/languages/c/config.py")]),t._v(" and define a class that inherits from "),e("code",[t._v("Language")]),t._v(":")]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("C")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Language"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# See the docs of the parent class for all available options.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Most of the default implementations fall back to using the JSON")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# configuration file, but you could also override them all and not")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# use the configuration file.")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# The compilation command used by TESTed.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# See below for more information, or check the method documentation")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# for technical details.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("compilation")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" config"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Config"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" files"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" List"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" CallbackResult"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        main_file "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" files"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        exec_file "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Path"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("main_file"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stem\n        result "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" executable_name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exec_file"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"gcc"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-std=c11"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-Wall"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"evaluation_result.c"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"values.c"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                 main_file"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-o"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" result"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("result"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Execution command used by TESTed.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# This will execute the result of the compilation command.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# See below for more information, or check the method documentation")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# for technical details.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("execution")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" config"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Config"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                  cwd"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Path"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("file")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arguments"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" List"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" Command"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        local_file "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cwd "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" executable_name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Path"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("file")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stem"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("local_file"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("absolute"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("arguments"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("solution")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" solution"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Path"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bundle"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Bundle"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Contains some code to change the main function.")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# See the actual implementation for the details.")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pass")]),t._v("\n")])])]),e("h3",{attrs:{id:"compilation"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#compilation"}},[t._v("#")]),t._v(" Compilation")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("Interpreted languages")]),t._v(" "),e("p",[t._v("Whenever possible, we recommend adding a compilation step even for languages that are interpreted and not compiled.\nFor example, the compilation steps for Python and JavaScript check that submissions have no syntax errors.\nHowever, if the programming language does not support relevant static code analysis prior to execution (e.g. Bash),\nyou can skip this part of the configuration class.\nThe default implementation skips the compilation step.")])]),t._v(" "),e("p",[t._v("The first parameter of the "),e("code",[t._v("compilation")]),t._v(" method takes a class with some configuration options,\nincluding all "),e("a",{attrs:{href:"/en/tested/exercise-config"}},[t._v("exercise options")]),t._v(".\nFor example, you could allow the exercise designer to choose what C version is used by TESTed (e.g. C99 instead of C11).\nHowever, the current implementation of the C language module only supports C11.")]),t._v(" "),e("p",[t._v("The second parameter of the "),e("code",[t._v("compilation")]),t._v(" method takes a list of files that TESTed deems useful to have during\ncompilation,\nincluding all dependencies specified in the configuration file,\nthe submission and files containing the generated test code.\nBy convention, the last file in the list contains the "),e("code",[t._v("main")]),t._v(" function and should thus be the file being compiled.\nAll files will be in the same directory as the main file.\nThe compilation method does not need to use all files.\nIn case of the C programming language, for example, "),e("code",[t._v("gcc")]),t._v(" takes care of loading all other files,\nso we only use the main file.\nAs is done in the C language module,\nyou can also hardcode the names of files defined as dependencies in the configuration file.")]),t._v(" "),e("p",[t._v("The compilation method must return a tuple with two elements: i) the compilation command and ii) the resulting files or\nfile filter.\nTESTed uses the Python module "),e("code",[t._v("subprocess")]),t._v(" to execute the compilation command.\nThe resulting list of files or file filter is used to copy the compiled executable to the execution directory.\nOnly the compiled executable will be available during execution.")]),t._v(" "),e("p",[t._v("You can return a list of files if the compilation process results in executable files with predictable names.\nFor example, in C we know the name of the resulting binary, so we just return a list containing that name.\nWhen returning a list of files, you should also follow the convention that the main file is at the end of the list.")]),t._v(" "),e("p",[t._v("However, it is not always possible to predict the list of executables.\nIn Java, for example, compiling a "),e("code",[t._v(".java")]),t._v(" file will result in one or more "),e("code",[t._v(".class")]),t._v(" files,\ndepending on the content of the "),e("code",[t._v(".java")]),t._v(" file.\nIn that case, you can return a filter function that determines what executable files must be copied.\nAfter compilation, TESTed will call the filter function for each file in the compilation directory.")]),t._v(" "),e("p",[t._v("Here's an example of calling the compilation method with the arguments and return values for C (on Windows):")]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" compilation"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'submission.c'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'evaluation_result.c'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'context_0_0.c'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'selector.c'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'gcc'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'-std=c11'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'-Wall'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'evaluation_result.c'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'values.c'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'selector.c'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n     "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'-o'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'selector.exe'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'selector.exe'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("Return an empty list as the compilation command to skip compilation.")]),t._v(" "),e("h3",{attrs:{id:"execution"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#execution"}},[t._v("#")]),t._v(" Execution")]),t._v(" "),e("p",[t._v("After compiling the submission and the test code,\nTESTed must execute the test code to get the results that must be evaluated.\nThis is done by calling the "),e("code",[t._v("execution")]),t._v(" method, which has four parameters:")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("config")]),t._v(": Same purpose as the first parameter of the "),e("code",[t._v("compilation")]),t._v(" method.\nFor example, the Java implementation uses this parameter to set the maximum JVM memory.")]),t._v(" "),e("li",[e("code",[t._v("cwd")]),t._v(": Path name of the directory in which execution is taking place.")]),t._v(" "),e("li",[e("code",[t._v("file")]),t._v(": Name of the file that must be executed.")]),t._v(" "),e("li",[e("code",[t._v("arguments")]),t._v(": Arguments passed to the execution process. These are used, for example, to select what context TESTed must execute.")])]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("execution")]),t._v(" method must return the execution command.\nTESTed again uses the Python module "),e("code",[t._v("subprocess")]),t._v(" to execute the execution command.\nFor the C programming language, TESTed simply executes the executable file with the given arguments. Here's an example of calling the execution method with the arguments and return values for C (on Windows):")]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" execution"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/test/path'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'executable.exe'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'arg1'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'arg2'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/test/path/executable.exe'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'arg1'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'arg2'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),e("p",[t._v("For most languages, this ends the configuration process.\nHowever, the C programming language has the restriction that executables can only have a single "),e("code",[t._v("main")]),t._v(" function.\nThis gives a possible conflict because the submission can have a "),e("code",[t._v("main")]),t._v(" function and the generated test code also has a "),e("code",[t._v("main")]),t._v(" function.\nTo resolve this conflict, we can use the submission method to modify the code of the submission by renaming the main function.\nSee the "),e("a",{attrs:{href:"https://github.com/dodona-edu/universal-judge/blob/2cd131a5f34de93d6a68d4234fb0b595f28285d9/tested/languages/c/config.py#L87",target:"_blank",rel:"noopener noreferrer"}},[t._v("actual implementation"),e("OutboundLink")],1),t._v(" on GitHub.")]),t._v(" "),e("h2",{attrs:{id:"templates"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#templates"}},[t._v("#")]),t._v(" Templates")]),t._v(" "),e("p",[t._v("As a last step, we need to implement some templates TESTed will use to generate test code and to translate the test suite into the programming language of the submission.")]),t._v(" "),e("p",[t._v("Some templates are somewhat mandatory because they are used by the default implementation of the configuration class,\nbut it is often useful to create a few more templates to enable reuse.\nFor the C language module, we create the following templates:")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("run.c")]),t._v(": template to execute multiple contexts together ("),e("strong",[t._v("mandatory")]),t._v(")")]),t._v(" "),e("li",[e("code",[t._v("selector.c")]),t._v(": template to select what context to execute when using batch compilation (mandatory if batch compilation is supported) ("),e("strong",[t._v("mandatory")]),t._v(" if batch compilation is supported)")]),t._v(" "),e("li",[e("code",[t._v("declaration.mako")]),t._v(": translates a variable declaration to C")]),t._v(" "),e("li",[e("code",[t._v("function.mako")]),t._v(": translates a function call to C")]),t._v(" "),e("li",[e("code",[t._v("statement.mako")]),t._v(": translates a TESTed statement (including expressions) to C ("),e("strong",[t._v("mandatory")]),t._v(")")]),t._v(" "),e("li",[e("code",[t._v("value.mako")]),t._v(": translates a literal value to C; makes use of two helper templates: "),e("code",[t._v("value_arguments.mako")]),t._v(" and "),e("code",[t._v("value_basic.mako")])])]),t._v(" "),e("p",[t._v("All templates are located in "),e("code",[t._v("tested/languages/c/templates")]),t._v(".")]),t._v(" "),e("h3",{attrs:{id:"run-template"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#run-template"}},[t._v("#")]),t._v(" Run template")]),t._v(" "),e("p",[t._v("The run template is conceptually the most complex template.\nIt is responsible for generating the test code for a single run.")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("Runs in TESTed")]),t._v(" "),e("p",[t._v("Conceptually, TESTed will execute test code for each individual context to make sure that contexts are evaluated in isolation.\nHowever, this means launching a new execution process for each individual context, which may introduce a lot of overhead.\nAs such, TESTed may combine multiple contexts in a single run, essentially executing all these contexts in a single process.\nIn that case, care should be taken that successive contexts do not interfere with each other.")])]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("White space in Mako")]),t._v(" "),e("p",[t._v("TESTed uses the Mako templating system for its templates.\nThe default configuration of Mako in TESTed will strip Mako-induced white space.\nFor example, the "),e("code",[t._v("for")]),t._v("-loop below will not be indented in the test code:")]),t._v(" "),e("div",{staticClass:"language-c extra-class"},[e("pre",{pre:!0,attrs:{class:"language-c"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" name in evaluator_names"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token macro property"}},[e("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"${name}.c"')])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" endfor\n")])])]),e("p",[t._v("Will result in")]),t._v(" "),e("div",{staticClass:"language-c extra-class"},[e("pre",{pre:!0,attrs:{class:"language-c"}},[e("code",[e("span",{pre:!0,attrs:{class:"token macro property"}},[e("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name1.c"')])]),t._v("\n")])])]),e("p",[t._v("Newlines in a template file will result in newlines in the test code.\nThis can be suppressed by using a backslash to escape the newline:")]),t._v(" "),e("div",{staticClass:"language-c extra-class"},[e("pre",{pre:!0,attrs:{class:"language-c"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" test "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" \\⏎\n"),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("⏎\n")])])]),e("p",[t._v("Will result in:")]),t._v(" "),e("div",{staticClass:"language-c extra-class"},[e("pre",{pre:!0,attrs:{class:"language-c"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" test "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("⏎\n")])])])]),t._v(" "),e("p",[t._v("Here's the annotated implementation of the run template in the C language module:")]),t._v(" "),e("div",{staticClass:"language-c extra-class"},[e("pre",{pre:!0,attrs:{class:"language-c"}},[e("code",[e("span",{pre:!0,attrs:{class:"token macro property"}},[e("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdio.h>")])]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Include the values module, responsible for serialisation.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[e("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"values.h"')])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Include the submission code.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[e("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"${submission_name}.c"')])]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Import all programming language-specific checks.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" name in evaluator_names"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token macro property"}},[e("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"${name}.c"')])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" endfor\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Create the variables which will contain the names of the files used to")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// save the return values and the exceptions.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// C doesn't support exceptions, but TESTed still requires the file to be present.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// We also define two functions to write a separator to the file.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// These will be used between each context and each test case,")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// allowing TESTed to separate the results in the output files.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" FILE"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" $"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("execution_name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("_value_file "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" FILE"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" $"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("execution_name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("_exception_file "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" $"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("execution_name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("_write_separator")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("fprintf")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("execution_name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("_value_file"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"--${secret_id}-- SEP"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("fprintf")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("execution_name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("_exception_file"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"--${secret_id}-- SEP"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("fprintf")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("stdout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"--${secret_id}-- SEP"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("fprintf")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("stderr")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"--${secret_id}-- SEP"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" $"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("execution_name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("_write_context_separator")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("fprintf")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("execution_name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("_value_file"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"--${context_secret_id}-- SEP"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("fprintf")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("execution_name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("_exception_file"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"--${context_secret_id}-- SEP"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("fprintf")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("stdout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"--${context_secret_id}-- SEP"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("fprintf")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("stderr")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"--${context_secret_id}-- SEP"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ... continues in the next code block")]),t._v("\n")])])]),e("p",[t._v('If a function or method call returns a value, TESTed must serialize the value before writing it to an output file.\nThis serialization converts the representation of the value in a programming language into the language-independent format used by TESTed.\nIt is useful to implement data serialization as a separate module, which is called "values" by convention.\nTESTed expects an implementation of the following functions:')]),t._v(" "),e("ul",[e("li",[e("code",[t._v("send_value(value)")]),t._v(": Serializes and writes a value to the return output file.")]),t._v(" "),e("li",[e("code",[t._v("send_exception(exception)")]),t._v(": Serializes and writes an exception to the exception output file.")]),t._v(" "),e("li",[e("code",[t._v("send_specific_value(value)")]),t._v(": Serializes and writes the result of a check for a specific programming language to the return channel.")]),t._v(" "),e("li",[e("code",[t._v("send_specific_exception(exception)")]),t._v(": Serializes and writes the result of a check for a specific programming language to the exception channel.")])]),t._v(" "),e("p",[t._v("As the C programming language does not support exceptions, we implement the two exception functions. The two return functions are implemented using a macro:")]),t._v(" "),e("div",{staticClass:"language-c extra-class"},[e("pre",{pre:!0,attrs:{class:"language-c"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ... continuation of the previous code block")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Uses the function from the values module.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[e("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("undef")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token expression"}},[t._v("send_value")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[e("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token macro-name function"}},[t._v("send_value")]),e("span",{pre:!0,attrs:{class:"token expression"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("write_value")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("execution_name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("_value_file"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])])]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[e("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("undef")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token expression"}},[t._v("send_specific_value")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[e("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token macro-name function"}},[t._v("send_specific_value")]),e("span",{pre:!0,attrs:{class:"token expression"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("write_evaluated")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("execution_name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("_value_file"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])])]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ... continues in the next code block")]),t._v("\n")])])]),e("p",[t._v("Finally, we execute the contexts by generating test code that defines one function per context:")]),t._v(" "),e("div",{staticClass:"language-c extra-class"},[e("pre",{pre:!0,attrs:{class:"language-c"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ... continuation of the previous code block")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Generate a function for each context in this run:")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ctx in "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("enumerate")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("contexts"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" $"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("execution_name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("_context_$"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Optional code fragment before executing a context.")]),t._v("\n        $"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("ctx"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("before"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Execute each test case.")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" testcase in ctx"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("testcases"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Write the separator to the output files.")]),t._v("\n            $"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("execution_name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("_write_separator")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Use another template to generate the statement that must be executed.")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("include file"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"statement.mako"')]),t._v(" args"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"statement=testcase.input_statement()"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" endfor\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Optional code fragment after executing a context.")]),t._v("\n        $"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("ctx"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("after"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" endfor\n\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" continued after the text block\n")])])]),e("p",[t._v("Now, we must still generate the test code that will call these context functions:")]),t._v(" "),e("div",{staticClass:"language-c extra-class"},[e("pre",{pre:!0,attrs:{class:"language-c"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Generate a function that will execute the run.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" $"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("execution_name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Create the output files.")]),t._v("\n    $"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("execution_name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("_value_file "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("fopen")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"${value_file}"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"w"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    $"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("execution_name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("_exception_file "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("fopen")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"${exception_file}"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"w"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Similarly to the separator for test cases, we write the context")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// separator between each execution of a context.")]),t._v("\n    $"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("execution_name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("_write_context_separator")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// This is a special test case: it is used when you want to test")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// the main function of the submission.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" run_testcase"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exists"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" args"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\\\n        "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" argument in "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"solution"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" run_testcase"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("arguments"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"${argument}"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \\\n        "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" endfor\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" exit_code "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("solution_main")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("len")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("run_testcase"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("arguments"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" args"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exit_code "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" exit_code"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" endif\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Execute all contexts from the test suite.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ctx in "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("enumerate")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("contexts"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Don't forget the separator.")]),t._v("\n        $"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("execution_name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("_write_context_separator")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Call the function we generated previously.")]),t._v("\n        $"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("execution_name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("_context_$"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" endfor\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// We are done, so close the result files.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("fclose")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("execution_name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("_value_file"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("fclose")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("execution_name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("_exception_file"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// TESTed also supports batch compilation, in which case")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// we don't need a main function. Otherwise we do.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// In batch compilation the main is not needed, since this")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// module will be called from the selector module.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[e("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("ifndef")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token expression"}},[t._v("INCLUDED")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" $"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("execution_name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[e("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")])]),t._v("\n")])])]),e("h3",{attrs:{id:"selector-template"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#selector-template"}},[t._v("#")]),t._v(" Selector template")]),t._v(" "),e("p",[t._v("In batch compilation, TESTed uses the selector template to select what context is executed.\nWe set "),e("code",[t._v("INCLUDED")]),t._v(" to "),e("code",[t._v("true")]),t._v(", as this will allow us to include the above run template:")]),t._v(" "),e("div",{staticClass:"language-c extra-class"},[e("pre",{pre:!0,attrs:{class:"language-c"}},[e("code",[e("span",{pre:!0,attrs:{class:"token macro property"}},[e("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("<string.h>")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[e("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdio.h>")])]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[e("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("INCLUDED")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token expression"}},[t._v("true")])]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" cont in contexts"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Include individual context files.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// This is the same code as in the file before.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// We will probably merge these in the future.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token macro property"}},[e("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"${cont}.c"')])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" endfor\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Main function.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" argc"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" argv"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("argc "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("fprintf")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("stderr")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"No run context selected."')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Code to execute the correct context.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" name "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" argv"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" cont in contexts"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("strcmp")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"${cont}"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" $"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("cont"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" endfor\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("fprintf")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("stderr")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"Non-existing run context '%s' selected.\"")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h3",{attrs:{id:"statement-template"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#statement-template"}},[t._v("#")]),t._v(" Statement template")]),t._v(" "),e("p",[t._v("TESTed uses the statement template to convert statements and expressions to the programming language of the submission.\nThis is how the C language module implements the statement template:")]),t._v(" "),e("div",{staticClass:"language-c extra-class"},[e("pre",{pre:!0,attrs:{class:"language-c"}},[e("code",[t._v("## Convert a statement and"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("or expression into Java code"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v(" from tested"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("utils import get_args "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\\\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v(" from tested"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("serialisation import Value"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Identifier"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" FunctionCall"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Assignment "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\\\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("page args"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"statement,full=False"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\\\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("isinstance")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("statement"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Identifier"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    ## If the expression is an identifier"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" just echo it"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    $"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("statement"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\\\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" elif "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("isinstance")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("statement"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" FunctionCall"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    ## Delegate to the function template "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" function calls"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("include file"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"function.mako"')]),t._v(" args"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"function=statement"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\\\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" elif "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("isinstance")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("statement"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("get_args")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Value"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    ## We have a value"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" delegate to the value template"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("include file"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"value.mako"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" args"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"value=statement"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\\\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" assert "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("isinstance")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("statement"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("get_args")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Assignment"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\\\n    "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" full"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("include file"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"declaration.mako"')]),t._v(" args"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tp=statement.type, value=statement.expression"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" \\\n    "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" endif\n    $"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("statement"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("variable"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("include file"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"statement.mako"')]),t._v(" args"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"statement=statement.expression"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\\\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" endif\n")])])]),e("p",[t._v("One non-intuitive aspect is the parameter "),e("code",[t._v("full")]),t._v(" that indicates whether a variable declaration is needed:")]),t._v(" "),e("div",{staticClass:"language-c extra-class"},[e("pre",{pre:!0,attrs:{class:"language-c"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" variabele "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// with declaration")]),t._v("\nvariabele "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// without declaration")]),t._v("\n")])])]),e("p",[t._v("See the actual templates for examples of how to handle most language constructs.")]),t._v(" "),e("h2",{attrs:{id:"register-the-language"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#register-the-language"}},[t._v("#")]),t._v(" Register the language")]),t._v(" "),e("p",[t._v("We also need to register the language module in TESTed.\nThis must always be done manually, even if the generator is used to generate stubs.\nIn the file "),e("code",[t._v("tested/languages/__init__.py")]),t._v(", add the language to the dictionary "),e("code",[t._v("LANGUAGES")]),t._v(":")]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[t._v("LANGUAGES "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'c'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" C"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# This is what we added here, mapping a name to the configuration class.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'haskell'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Haskell"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'java'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Java"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'javascript'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" JavaScript"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'kotlin'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Kotlin"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'python'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Python"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'runhaskell'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" RunHaskell"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h2",{attrs:{id:"testing-the-language-implementation"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#testing-the-language-implementation"}},[t._v("#")]),t._v(" Testing the language implementation")]),t._v(" "),e("p",[t._v("Now that we have configured and registered the language for TESTed,\nwe can test if the language implementation works as expected.\nTESTed contains some predefined tests that can be used for that purpose.\nBefore this can be done, you should also extend the tests to support testing the new programming language:")]),t._v(" "),e("ol",[e("li",[t._v("Add solutions in the programming language to one or more of the test exercises (in the "),e("code",[t._v("exercise")]),t._v(" directory). Take a look at the existing solutions to infer what your solutions should do.")]),t._v(" "),e("li",[t._v("Modify "),e("code",[t._v("tests/test_functionality.py")]),t._v(" and other test files to include the new programming language for testing.")])])])}),[],!1,null,null,null);s.default=n.exports}}]);