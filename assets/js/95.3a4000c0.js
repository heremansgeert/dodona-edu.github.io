(window.webpackJsonp=window.webpackJsonp||[]).push([[95],{801:function(t,e,s){"use strict";s.r(e);var a=s(29),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"dsl-test-suite-reference"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dsl-test-suite-reference"}},[t._v("#")]),t._v(" DSL test suite reference")]),t._v(" "),s("p",[t._v("In TESTed, a test suite specifies which test cases are executed against a submission.\nTESTed differs from other test frameworks in that its test suites are independent of any programming language.\nAs a result, a single test suite is sufficient to check submissions for the same exercise in different programming languages.")]),t._v(" "),s("p",[t._v("While TESTed has an "),s("a",{attrs:{href:"/en/tested/json"}},[t._v("advanced format")]),t._v(" for the test suites, we have also developed a small "),s("em",[t._v("domain-specific language")]),t._v(" (DSL), to make creating common exercises much easier.\nThis document is the reference for the DSL test suite format, and contains all options and possibilities.")]),t._v(" "),s("p",[t._v("DSL test suites are written in "),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/YAML",target:"_blank",rel:"noopener noreferrer"}},[t._v("YAML"),s("OutboundLink")],1),t._v(".\nA JSON Schema of the format is available in the TESTed repository, which can enable checks and autocompletion in your editor.")]),t._v(" "),s("h2",{attrs:{id:"structure"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#structure"}},[t._v("#")]),t._v(" Structure")]),t._v(" "),s("p",[t._v("The structure of a DSL test suites follows the general Dodona structure, and consists of three levels:")]),t._v(" "),s("ol",[s("li",[s("a",{attrs:{href:"#tabs"}},[t._v("Tabs")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#contexts"}},[t._v("Contexts")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#test-cases"}},[t._v("Test cases")])])]),t._v(" "),s("p",[t._v("Below we describe objects of each level.\nMandatory attributes are indicated with a star (*).\nAt the "),s("a",{attrs:{href:"#full-example"}},[t._v("end of this document")]),t._v(", there is a full example of a test suite.")]),t._v(" "),s("h3",{attrs:{id:"root-of-the-test-suite"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#root-of-the-test-suite"}},[t._v("#")]),t._v(" Root of the test suite")]),t._v(" "),s("p",[t._v("The test suite starts with either a root object, or a list of "),s("a",{attrs:{href:"#tabs"}},[t._v("tabs")]),t._v(".\nThe root object contains three attributes:")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("tabs")]),t._v("*: a list of "),s("a",{attrs:{href:"#tabs"}},[t._v("tab")]),t._v(" objects")]),t._v(" "),s("li",[s("code",[t._v("namespace")]),t._v(': the "namespace" for the code of the submission, such as the class name in Java.')]),t._v(" "),s("li",[s("code",[t._v("config")]),t._v(": the global "),s("a",{attrs:{href:"#configuration-options"}},[t._v("configuration options")])])]),t._v(" "),s("h3",{attrs:{id:"tabs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tabs"}},[t._v("#")]),t._v(" Tabs")]),t._v(" "),s("p",[t._v("A tab object maps onto a tab in the output on Dodona.\nIt has four possible attributes:")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("tab")]),t._v("*: the name of the tab to be displayed in Dodona")]),t._v(" "),s("li",[s("code",[t._v("contexts")]),t._v("*: a list of "),s("a",{attrs:{href:"#contexts"}},[t._v("contexts")]),t._v(" (if this is given, you cannot use the attribute "),s("code",[t._v("testcases")]),t._v(")")]),t._v(" "),s("li",[s("code",[t._v("testcases")]),t._v("*: a list of "),s("a",{attrs:{href:"#test-cases"}},[t._v("test cases")]),t._v(" (if this is given, you cannot use the attribute "),s("code",[t._v("contexts")]),t._v(")")]),t._v(" "),s("li",[s("code",[t._v("config")]),t._v(": the "),s("a",{attrs:{href:"#configuration-options"}},[t._v("configuration options")]),t._v(" for this tab and all children")])]),t._v(" "),s("p",[t._v("In a lot of exercises, you have precisely one testcase per context.\nThis is exactly what you can do using the "),s("code",[t._v("testcases")]),t._v(" attribute: behind the scenes, each testcase will be placed in its own context.")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("Hint")]),t._v(" "),s("p",[t._v("While there are four possible attributes, each tab object can only have three,\nsince "),s("code",[t._v("contexts")]),t._v(" and "),s("code",[t._v("testcases")]),t._v(" are mutually exclusive.")])]),t._v(" "),s("h3",{attrs:{id:"contexts"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#contexts"}},[t._v("#")]),t._v(" Contexts")]),t._v(" "),s("p",[t._v("A context is a group of test cases that depend on each other.\nThe context object has three attributes:")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("testcases")]),t._v("*: a list of "),s("a",{attrs:{href:"#test-cases"}},[t._v("test cases")])]),t._v(" "),s("li",[s("code",[t._v("config")]),t._v(": the "),s("a",{attrs:{href:"#configuration-options"}},[t._v("configuration options")]),t._v(" for this context and all children")]),t._v(" "),s("li",[s("code",[t._v("context")]),t._v(": an optional description of the context")]),t._v(" "),s("li",[s("code",[t._v("files")]),t._v(": optional list of "),s("a",{attrs:{href:"#files"}},[t._v("files")])])]),t._v(" "),s("p",[t._v("In most cases, it is fine to leave the description empty.")]),t._v(" "),s("p",[t._v("Each context must have at least one test case.\nSince each context is executed separately, the following two constraints apply:")]),t._v(" "),s("ul",[s("li",[t._v('Only the first test case may have a "main call", i.e. command line arguments or stdin.')]),t._v(" "),s("li",[t._v("Only the last test case may have a test for the program's exit code.")])]),t._v(" "),s("p",[t._v("Do note that the first and last test case may be the same one:\nif you only have one test case, it may be a main call and have a check for the exit code.")]),t._v(" "),s("h3",{attrs:{id:"test-cases"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#test-cases"}},[t._v("#")]),t._v(" Test cases")]),t._v(" "),s("p",[t._v("Test cases are the building blocks of a test suite, and contain some input and the expected outputs (the "),s("em",[t._v("tests")]),t._v(").\nWithin each context, the following constraints apply to test cases:")]),t._v(" "),s("ul",[s("li",[t._v('Only the first test case may have a "main call", i.e. command line arguments or stdin.')]),t._v(" "),s("li",[t._v("Only the last test case may have a test for the program's exit code.")])]),t._v(" "),s("p",[t._v("Do note that the first and last test case may be the same one:\nif you only have one test case, it may be a main call and have a check for the exit code.")]),t._v(" "),s("p",[t._v("A test case can have the following attributes:")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("config")]),t._v(": the "),s("a",{attrs:{href:"#configuration-options"}},[t._v("configuration options")]),t._v(" for this test case and all children")]),t._v(" "),s("li",[s("code",[t._v("files")]),t._v(": optional list of "),s("a",{attrs:{href:"#files"}},[t._v("files")])])]),t._v(" "),s("p",[t._v("Additionally, a test case can have all attributes described below, but do note:")]),t._v(" "),s("ul",[s("li",[t._v('A test case can only have one "input", meaning the '),s("code",[t._v("arguments")]),t._v("/"),s("code",[t._v("stdin")]),t._v(", "),s("code",[t._v("expression")]),t._v(" and "),s("code",[t._v("statement")]),t._v(" attributes are mutually exclusive.")]),t._v(" "),s("li",[t._v("The attributes "),s("code",[t._v("return")]),t._v(" and "),s("code",[t._v("return_raw")]),t._v(" are mutually exclusive, as an expression can only have one result.")]),t._v(" "),s("li",[t._v("The attributes "),s("code",[t._v("return")]),t._v("/"),s("code",[t._v("return_raw")]),t._v(" require either the attribute "),s("code",[t._v("expression")]),t._v(" or "),s("code",[t._v("statement")]),t._v(".")])]),t._v(" "),s("h4",{attrs:{id:"stdin"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stdin"}},[t._v("#")]),t._v(" "),s("code",[t._v("stdin")])]),t._v(" "),s("p",[t._v("The data to provide to the "),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Standard_streams#Standard_input_(stdin)",target:"_blank",rel:"noopener noreferrer"}},[t._v("standard input"),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("p",[t._v("If this attribute is used, you cannot specify "),s("code",[t._v("expression")]),t._v(" or "),s("code",[t._v("statement")]),t._v(" as input, nor can you use "),s("code",[t._v("return")]),t._v(" or "),s("code",[t._v("return_raw")]),t._v(" as tests.")]),t._v(" "),s("h4",{attrs:{id:"arguments"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#arguments"}},[t._v("#")]),t._v(" "),s("code",[t._v("arguments")])]),t._v(" "),s("p",[t._v("A list of strings to pass to the program as the "),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Command-line_interface#Arguments",target:"_blank",rel:"noopener noreferrer"}},[t._v("command line arguments"),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("p",[t._v("If this attribute is used, you cannot specify "),s("code",[t._v("expression")]),t._v(" or "),s("code",[t._v("statement")]),t._v(" as input, nor can you use "),s("code",[t._v("return")]),t._v(" or "),s("code",[t._v("return_raw")]),t._v(" as tests.")]),t._v(" "),s("h4",{attrs:{id:"main-call"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#main-call"}},[t._v("#")]),t._v(" "),s("code",[t._v("main_call")])]),t._v(" "),s("p",[t._v("An optional attribute you can set to "),s("code",[t._v("true")]),t._v(" if you want a main call without stdin and without arguments.")]),t._v(" "),s("p",[t._v("If this attribute is used, you cannot specify "),s("code",[t._v("expression")]),t._v(" or "),s("code",[t._v("statement")]),t._v(" as input, nor can you use "),s("code",[t._v("return")]),t._v(" or "),s("code",[t._v("return_raw")]),t._v(" as tests.")]),t._v(" "),s("h4",{attrs:{id:"expression-statement"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#expression-statement"}},[t._v("#")]),t._v(" "),s("code",[t._v("expression")]),t._v(" / "),s("code",[t._v("statement")])]),t._v(" "),s("p",[t._v("Contains the expression to evaluate or statement to execute during this test case.\nThese attributes are synonyms.")]),t._v(" "),s("p",[t._v("Expressions and statements use the Python syntax, with some restrictions, which are detailed "),s("a",{attrs:{href:"#expressions-and-statements"}},[t._v("here")]),t._v(".")]),t._v(" "),s("h4",{attrs:{id:"stdout-stderr"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stdout-stderr"}},[t._v("#")]),t._v(" "),s("code",[t._v("stdout")]),t._v(" / "),s("code",[t._v("stderr")])]),t._v(" "),s("p",[t._v("Specifies the expected output on "),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Standard_streams#Standard_output_(stdout)",target:"_blank",rel:"noopener noreferrer"}},[t._v("standard output"),s("OutboundLink")],1),t._v(" and "),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Standard_streams#Standard_error_(stderr)",target:"_blank",rel:"noopener noreferrer"}},[t._v("standard error"),s("OutboundLink")],1),t._v(" respectively.")]),t._v(" "),s("p",[t._v("The attribute is either a string (in which case the string is the expected value), or an object for more advanced cases.\nThe object has the following attributes:")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("data")]),t._v(": the expected data, same as using a string")]),t._v(" "),s("li",[s("code",[t._v("config")]),t._v(": the "),s("a",{attrs:{href:"#test-options"}},[t._v("configuration options")])])]),t._v(" "),s("h4",{attrs:{id:"exception"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#exception"}},[t._v("#")]),t._v(" "),s("code",[t._v("exception")])]),t._v(" "),s("p",[t._v("Specifies the expected message of an expected exception.\nNote that TESTed currently does not allow checking the exception type or class.\nFor example, you cannot check that an assertion error or exception happened.")]),t._v(" "),s("h4",{attrs:{id:"return-return-raw"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#return-return-raw"}},[t._v("#")]),t._v(" "),s("code",[t._v("return")]),t._v(" / "),s("code",[t._v("return_raw")])]),t._v(" "),s("p",[t._v("Specifies the expected return value.\nIn most cases, you can use "),s("code",[t._v("return")]),t._v(", in which case the expected return value is encoded into a YAML value (string, number, boolean, etc.).\nHowever, sometimes you need more advanced representations, in which case "),s("code",[t._v("return_raw")]),t._v(" allows you to use the same Python syntax as for the "),s("a",{attrs:{href:"#expressions-and-statements"}},[t._v("expressions and statements")]),t._v(", with the restriction that you can only use values.\nFor example, a return value cannot be a function call.")]),t._v(" "),s("p",[t._v("As mentioned before, these attributes are only allowed if you also specified a "),s("code",[t._v("expression")]),t._v("/"),s("code",[t._v("statement")]),t._v(" as input for the test case.\nYou can also not have both "),s("code",[t._v("return")]),t._v(" and "),s("code",[t._v("return_raw")]),t._v(" at the same time.")]),t._v(" "),s("h4",{attrs:{id:"exit-code"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#exit-code"}},[t._v("#")]),t._v(" "),s("code",[t._v("exit_code")])]),t._v(" "),s("p",[t._v("Specifies the expected exit code of the program.")]),t._v(" "),s("p",[t._v("Note that only the last test case of a context can have this attribute, although the last test case can also be the first test case if needed.")]),t._v(" "),s("h3",{attrs:{id:"files"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#files"}},[t._v("#")]),t._v(" Files")]),t._v(" "),s("p",[t._v("Some parameters or other strings are a name of a file.\nIf you want that parameter to link to the actual file, it needs to be added to the list of files.\nEach object in this list has two attributes:")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("name")]),t._v(": the name of the file as it appears in the input")]),t._v(" "),s("li",[s("code",[t._v("url")]),t._v(": the location where the link should point to, relative to the exercise folder")])]),t._v(" "),s("h2",{attrs:{id:"configuration-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#configuration-options"}},[t._v("#")]),t._v(" Configuration options")]),t._v(" "),s("p",[t._v("The configuration object can be specified on any level and applies to all levels below it.\nFor example, specifying the config on the tab level means it will apply to all contexts and, in turn, all test cases within that tab.")]),t._v(" "),s("p",[t._v("The configuration option has two attributes:")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("stdout")]),t._v(": the "),s("a",{attrs:{href:"#test-options"}},[t._v("configuration options")]),t._v(" for standard output")]),t._v(" "),s("li",[s("code",[t._v("stderr")]),t._v(": the "),s("a",{attrs:{href:"#test-options"}},[t._v("configuration options")]),t._v(" for standard error")]),t._v(" "),s("li",[s("code",[t._v("return")]),t._v(": the "),s("a",{attrs:{href:"#test-options"}},[t._v("configuration options")]),t._v(" for the expected return value")])]),t._v(" "),s("h3",{attrs:{id:"test-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#test-options"}},[t._v("#")]),t._v(" Test options")]),t._v(" "),s("p",[t._v("This object contains a set of configuration options that influence how the test results are checked by TESTed.\nThe following options are available:")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("applyRounding")]),t._v(": apply rounding when comparing values as float point numbers")]),t._v(" "),s("li",[s("code",[t._v("roundTo")]),t._v(": the number of decimals to round to, if "),s("code",[t._v("applyRouding")]),t._v(" is true")]),t._v(" "),s("li",[s("code",[t._v("caseInsensitive")]),t._v(": ignore the case of text when comparing strings")]),t._v(" "),s("li",[s("code",[t._v("ignoreWhitespace")]),t._v(": ignore leading and trailing whitespace")]),t._v(" "),s("li",[s("code",[t._v("tryFloatingPoint")]),t._v(": try comparing text as floating point numbers")])]),t._v(" "),s("h2",{attrs:{id:"expressions-and-statements"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#expressions-and-statements"}},[t._v("#")]),t._v(" Expressions and statements")]),t._v(" "),s("p",[t._v("In the test suite, expressions and statements are written as YAML strings, using the Python syntax.\nFor example, a function call with one argument "),s("code",[t._v('"hello"')]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("expression")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"a_function_name('hello')\"")]),t._v("\n")])])]),s("p",[t._v("Since the Python syntax does not have a separate syntax for all features supported by TESTed, there are some conventions:")]),t._v(" "),s("ul",[s("li",[t._v("Function calls whose name begins with a capital are considered constructors, e.g. "),s("code",[t._v("Constructor(56)")]),t._v(".")]),t._v(" "),s("li",[t._v("Identifiers that are in all caps are considered global constants, e.g. "),s("code",[t._v("VERY_LONG_NAME")]),t._v(".")]),t._v(" "),s("li",[t._v("Casts are done using the normal Python way. For example, to cast a number to "),s("code",[t._v("int64")]),t._v(": "),s("code",[t._v("int64(56)")]),t._v(".")])]),t._v(" "),s("p",[t._v("Additionally, most of the syntax is not supported, since TESTed only has support for limited expressions and statements.\nThe following is supported:")]),t._v(" "),s("ul",[s("li",[t._v("Simple values, such as "),s("code",[t._v("5")]),t._v(", "),s("code",[t._v("-9.3")]),t._v(" or "),s("code",[t._v('"Hello world"')]),t._v(".")]),t._v(" "),s("li",[t._v("Complex values, such as "),s("code",[t._v("[5, 6, 7]")]),t._v(", "),s("code",[t._v('{5, "Hello"}')]),t._v(" or "),s("code",[t._v('{"key": "value"}')]),t._v(".")]),t._v(" "),s("li",[t._v("Function calls, including named arguments "),s("code",[t._v("the_function(5, named=6)")]),t._v(". Do note that named arguments are converted to positional arguments in programming languages that do not support named arguments.")]),t._v(" "),s("li",[t._v("Constructors (using our convention).")]),t._v(" "),s("li",[t._v("Assignments, such as "),s("code",[t._v("some_variabel = 5")]),t._v(".")]),t._v(" "),s("li",[t._v("Referencing variables, such as "),s("code",[t._v("the_function(some_variable)")]),t._v(".")])]),t._v(" "),s("p",[t._v("Notably, absent are any type of function or class definitions and all operators.")]),t._v(" "),s("h2",{attrs:{id:"yaml-cheat-sheet"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#yaml-cheat-sheet"}},[t._v("#")]),t._v(" YAML cheat sheet")]),t._v(" "),s("p",[t._v("This section contains a very brief overview of the YAML features used in the DSL.")]),t._v(" "),s("h3",{attrs:{id:"objects"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#objects"}},[t._v("#")]),t._v(" Objects")]),t._v(" "),s("p",[t._v("Objects in YAML are key-value pairs, where the key (the attribute) and value are separated by a colon:")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("key")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" value\n")])])]),s("p",[t._v("Nested objects are created using indentation:")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("root")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("child0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("subchild0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"leaf"')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("subchild1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"leaf"')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("child1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("subchild0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"leaf"')]),t._v("\n")])])]),s("h3",{attrs:{id:"lists"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#lists"}},[t._v("#")]),t._v(" Lists")]),t._v(" "),s("p",[t._v("Lists in YAML can be written either on one line (using the JSON syntax) or with one value per line.\nFor example, a list on one line")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Item 0"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Item 1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Item 2"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Item 3"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[t._v("When using one value per line, each value must be prefixed with a dash (-) and space:")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Item 0"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Item 1"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Item 2"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Item 3"')]),t._v("\n")])])]),s("p",[t._v("You can also combine lists and objects:")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("list")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Item 0"')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("items")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Item 1"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Item 2"')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("items")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Item 3"')]),t._v("\n")])])]),s("h3",{attrs:{id:"strings"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#strings"}},[t._v("#")]),t._v(" Strings")]),t._v(" "),s("p",[t._v("Ordinary strings in YAML are written using double quotes:")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("description")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),t._v("\n")])])]),s("p",[t._v("However, doing multi-line strings is rather ugly:")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("description")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello\\nWorld"')]),t._v("\n")])])]),s("p",[t._v("YAML supports special syntax for multi-line strings.\nWriting the same string as the last example, we get:")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("description")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),s("span",{pre:!0,attrs:{class:"token scalar string"}},[t._v("\n  Hello\n  World")]),t._v("\n")])])]),s("p",[t._v('The reverse is also possible, which are called "folded strings".\nWith this syntax, YAML will remove newlines:')]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("description")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token scalar string"}},[t._v("\n  Hello\n  World")]),t._v("\n")])])]),s("p",[t._v("This is equivalent to writing:")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("description")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello World"')]),t._v("\n")])])]),s("h2",{attrs:{id:"full-example"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#full-example"}},[t._v("#")]),t._v(" Full example")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# A tab on Dodona.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tab")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Name of the tab"')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("contexts")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# The files used in this context.")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("files")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"file.txt"')]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("url")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"media/workdir/file.txt"')]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("testcases")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# An assignment of the variable data.")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("statement")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'data = ["list\\nline", "file.txt"]\'')]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Function call that uses the variable.")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("statement")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'function(data, 0.5)'")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Expected return value of the function.")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("testcases")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# A function call where the value is cast to "uint8".')]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("statement")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'echo(uint8(5))'")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# The expected return value is also cast to "uint8".')]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("return_raw")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"uint8(5)"')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# A second tab in the same test suite.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tab")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Exception"')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("contexts")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("testcases")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Another function call.")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("statement")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'function_error()'")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# The expected text on stdout.")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stdout")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Invalid"')]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# The expected text on stderr.")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stderr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Error"')]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# We expect an error or exception with the message "Unknown".')]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("exception")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Unknown"')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# A third tab.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tab")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Arguments"')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("testcases")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# This program gets input via stdin.")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stdin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Alice"')]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# There are also command line arguments.")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("arguments")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"stdin"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# The expected text on stdout.")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stdout")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello Alice"')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# A fourth tab.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tab")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Config"')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# We configure everything on the tab level.")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("config")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stdout")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# First try to compare text on stdout as float.")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tryFloatingPoint")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# When comparing floats, round to 2 decimals.")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("applyRounding")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("roundTo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# On stderr we ignore white space and make it case insensitive.")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stderr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ignoreWhitespace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("caseInsensitive")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("contexts")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("config")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stdout")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# We override the tab configuration for this context.")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("roundTo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("testcases")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("statement")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'diff(5, 2)'")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stdout")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2"')]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("statement")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'diff(5, 2)'")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stdout")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("data")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2.5"')]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# We override the context configuration in this test.")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("config")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n              "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("roundTo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n\n")])])])])}),[],!1,null,null,null);e.default=n.exports}}]);