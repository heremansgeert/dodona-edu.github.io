(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{568:function(t,s,a){t.exports=a.p+"assets/img/echo.64001cb2.png"},569:function(t,s,a){t.exports=a.p+"assets/img/boeketje_rozen_KleinerDan.fde62256.png"},570:function(t,s,a){t.exports=a.p+"assets/img/boeketje_rozen_GroterDan.831ec22f.png"},571:function(t,s,a){t.exports=a.p+"assets/img/spoorhekcodering_encode.c437a49c.png"},572:function(t,s,a){t.exports=a.p+"assets/img/spoorhekcodering_decode.38e00589.png"},573:function(t,s,a){t.exports=a.p+"assets/img/equal_checker.57d2eb32.png"},574:function(t,s,a){t.exports=a.p+"assets/img/link_files.c72b3b06.png"},808:function(t,s,a){"use strict";a.r(s);var e=a(29),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"documentation-tested-dsl"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#documentation-tested-dsl"}},[t._v("#")]),t._v(" Documentation TESTed DSL")]),t._v(" "),e("p",[t._v("A DSL-testplan for TESTed is written in YAML.\nThe structure of the DSL is very similar to the structure of the tests used in Dodona.\nThe following code fragment describes the structure of the DSL-testplans.\nThe use of square brackets indicates a list of objects.")]),t._v(" "),e("div",{staticClass:"language-text extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(". # With top-level\n├ namespace\n├ config\n│ ├ stdout\n│ │ ├ ignoreWhitespace\n│ │ ├ caseInsensitive\n│ │ ├ tryFloatingPoint\n│ │ ├ applyRounding\n│ │ └ roundTo\n│ └ stderr\n│   └ ... # identical to stdout\n├ disableOptimizations\n└ tabs[]\n  ├ config\n  │ └ ... # identical to config at top-level\n  ├ tab\n  └ contexts[]\n    ├ config\n    │ └ ... # identical to config at top-level\n    ├ files[]\n    │ ├ name\n    │ └ url\n    ├ arguments\n    ├ stdin\n    ├ exception\n    ├ exitCode\n    ├ stderr\n    ├ stdout\n    └ testcases[] # Can be omitted when the context contains only one test case, so no context test case.\n      ├ files[]\n      │ └ ... # identical to files of context\n      ├ statement\n      ├ exception\n      ├ return     # either 'return' either 'return-raw'\n      ├ return-raw # either 'return' either 'return-raw'\n      ├ stderr\n      └ stdout\n      \n[] # Without top-level\n└ ... # identical to tabs above\n")])])]),e("p",[t._v("In the following sections will we describe the DSL with examples.")]),t._v(" "),e("h2",{attrs:{id:"simple-input-output"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#simple-input-output"}},[t._v("#")]),t._v(" Simple input-output")]),t._v(" "),e("p",[t._v('A first type of exercises are input-output exercises.\nAs an example, we use the "echo" exercise: solutions should read data from stdin and copy it to stdout.')]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tab")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Feedback"')]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("contexts")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stdin")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"invoertekst-0"')]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stdout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"invoertekst-0"')]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stdin")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"invoertekst-1"')]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stdout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"invoertekst-1"')]),t._v("\n")])])]),e("p",[t._v("The following figure shows how the feedback from the previous testplan is shown in Dodona.\nThe figure has been augmented with annotations of the form "),e("code",[t._v("[0].testcases[0].stdin")]),t._v(".\nThese annotations describe a path to an object in the testplan.\nInterpretation: "),e("code",[t._v("[0]")]),t._v(" the first tab, "),e("code",[t._v("contexts[0]")]),t._v(" the first context, "),e("code",[t._v("stdin")]),t._v(" the given input at standard input and "),e("code",[t._v("stdout")]),t._v(" the expected output at standard output.")]),t._v(" "),e("p",[e("img",{attrs:{src:a(568),alt:"Visualisation Dodona echo exercise"}})]),t._v(" "),e("h3",{attrs:{id:"description"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#description"}},[t._v("#")]),t._v(" Description")]),t._v(" "),e("h4",{attrs:{id:"objects"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#objects"}},[t._v("#")]),t._v(" Objects")]),t._v(" "),e("p",[e("code",[t._v("yaml")]),t._v(" make use of objects to describe data.\nIt uses indentation levels to create "),e("strong",[t._v("nested")]),t._v(" objects.\nObjects consist of key-value pairs, where the "),e("strong",[t._v("key")]),t._v(" is a string without whitespace, and must be "),e("strong",[t._v("terminated with a colon")]),t._v(".\nThe values could be other objects, but also strings, numbers, logical values and lists.")]),t._v(" "),e("p",[t._v("Examples:")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("object0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n")])])]),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("root")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("child0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("subchild0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"leaf"')]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("subchild1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"leaf"')]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("child1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("subchild0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"leaf"')]),t._v("\n")])])]),e("h4",{attrs:{id:"lists"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#lists"}},[t._v("#")]),t._v(" Lists")]),t._v(" "),e("p",[t._v("When you use lists in "),e("code",[t._v("yaml")]),t._v(", the "),e("strong",[t._v("first key")]),t._v(" of each object in the list must be "),e("strong",[t._v("prepended")]),t._v(" by a "),e("strong",[t._v("dash")]),t._v(" followed by a "),e("strong",[t._v("space")]),t._v(".")]),t._v(" "),e("p",[t._v("Examples:")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Item 0"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Item 1"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Item 2"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Item 3"')]),t._v("\n")])])]),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("list")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Item 0"')]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("items")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Item 1"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Item 2"')]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("items")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Item 3"')]),t._v("\n")])])]),e("h4",{attrs:{id:"testplan"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#testplan"}},[t._v("#")]),t._v(" Testplan")]),t._v(" "),e("p",[t._v("The structure of the testplans is a list at the highest level, which contains tab-objects.")]),t._v(" "),e("h4",{attrs:{id:"tab"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tab"}},[t._v("#")]),t._v(" Tab")]),t._v(" "),e("p",[t._v("The first required key of a tab is "),e("code",[t._v("tab")]),t._v(".\nThis one expects a string that contains the name of the tab, as displayed by Dodona.\nThe second key of a tab is "),e("code",[t._v("contexts")]),t._v(", this one expects a list of all contexts that must be executed.")]),t._v(" "),e("h4",{attrs:{id:"context"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#context"}},[t._v("#")]),t._v(" Context")]),t._v(" "),e("p",[t._v("A context is an independent executed test-sequence.\nAt this moment we have only seen an example for input-output tests.")]),t._v(" "),e("h5",{attrs:{id:"stdin"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#stdin"}},[t._v("#")]),t._v(" stdin")]),t._v(" "),e("p",[t._v("The keyword "),e("code",[t._v("stdin")]),t._v(" is used to provide the standard input for a testcase.")]),t._v(" "),e("h5",{attrs:{id:"stdout"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#stdout"}},[t._v("#")]),t._v(" stdout")]),t._v(" "),e("p",[t._v("The keyword "),e("code",[t._v("stdout")]),t._v(" is used to specify the expected output at the standard output channel.\nFor this output, we recommend to use strings.\nNumbers and boolean values are also supported, but they will be translated to strings.\nWe will be referring to these datatypes as textual datatypes.")]),t._v(" "),e("h2",{attrs:{id:"multi-tab-and-multi-line"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#multi-tab-and-multi-line"}},[t._v("#")]),t._v(" Multi-tab and multi-line")]),t._v(" "),e("p",[t._v("We will now extend the testplan with multi-line strings and multiple tabs.\nWe will use the exercise "),e("a",{attrs:{href:"https://dodona.ugent.be/en/courses/27/activities/1047652305/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Thoughts that count"),e("OutboundLink")],1),t._v(" for this example.")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tab")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Kleiner dan"')]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("contexts")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stdin")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"100\\n53\\n<\\n"')]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stdout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2\\n51\\n49\\n"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tab")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Groter dan"')]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("contexts")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stdin")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),e("span",{pre:!0,attrs:{class:"token scalar string"}},[t._v("\n      34\n      4\n      >")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stdout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),e("span",{pre:!0,attrs:{class:"token scalar string"}},[t._v("\n      2\n      2\n      32")]),t._v("\n\n")])])]),e("p",[t._v("Because of a display problem in Dodona, are the newlines in the description in the following figures replaced by spaces.\n")]),e("p",{attrs:{float:"left"}},[e("img",{attrs:{src:a(569),alt:"Thoughts that count Smaller"}}),t._v(" "),e("img",{attrs:{src:a(570),alt:"Thoughts that count Larger"}})]),e("p"),t._v(" "),e("h3",{attrs:{id:"description-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#description-2"}},[t._v("#")]),t._v(" Description")]),t._v(" "),e("h4",{attrs:{id:"multi-line"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#multi-line"}},[t._v("#")]),t._v(" Multi-line")]),t._v(" "),e("p",[t._v("As visible in the testplan from the codefragment, YAML has multiple ways to describe multi-line strings.\nA first is the classic escape-string and a second notation uses ‘|’.\nThe class escape-string gives the most control over whitespace.")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("Hint")]),t._v(" "),e("p",[t._v("More information about multi-line in section "),e("a",{attrs:{href:"#known-pitfalls"}},[t._v("Known pitfalls")]),t._v(".")])]),t._v(" "),e("h4",{attrs:{id:"multi-tab"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#multi-tab"}},[t._v("#")]),t._v(" Multi-tab")]),t._v(" "),e("p",[t._v("As is shown in the example, can you also use multiple tabs.")]),t._v(" "),e("h2",{attrs:{id:"command-line-arguments-standard-error-and-exit-code"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#command-line-arguments-standard-error-and-exit-code"}},[t._v("#")]),t._v(" Command line arguments, standard error and exit code")]),t._v(" "),e("p",[t._v("Now, we will add command line arguments, standarderror and exit code to the test plan.\nAs an example, we'll use a fictional exercise where the goal is a simple calculator with integers.")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tab")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Sum"')]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("contexts")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("arguments")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-a"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"5"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"20"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stdout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"25"')]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("arguments")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-a"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"alpha"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"beta"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stderr")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"'alpha' and 'beta' aren't integers\"")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("exitCode")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tab")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Difference"')]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("contexts")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("arguments")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-s"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"5"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"20"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stdout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-15"')]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("arguments")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-s"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"5"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"20"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stdin")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Random input"')]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stderr")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"There is no input expected at standard input"')]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("exitCode")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tab")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Multiplication"')]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("contexts")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("arguments")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-m"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"25"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"5"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stdout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"125"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tab")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Division"')]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("contexts")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("arguments")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-d"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"25"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"5"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stdout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"5"')]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("arguments")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-d"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"25"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stderr")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Integer division by zero"')]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("exitCode")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n")])])]),e("h3",{attrs:{id:"description-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#description-3"}},[t._v("#")]),t._v(" Description")]),t._v(" "),e("h4",{attrs:{id:"arguments"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#arguments"}},[t._v("#")]),t._v(" arguments")]),t._v(" "),e("p",[t._v("The arguments are a list of command line arguments that must be passed to the program for the testcase.")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("Hint")]),t._v(" "),e("p",[t._v("We recommend using strings for these arguments, however the textual types are also supported.")])]),t._v(" "),e("h4",{attrs:{id:"stderr"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#stderr"}},[t._v("#")]),t._v(" stderr")]),t._v(" "),e("p",[t._v("This keyword defines the expected output for the testcase."),e("br"),t._v("\nThis is analogous to "),e("code",[t._v("stdout")]),t._v(".")]),t._v(" "),e("h4",{attrs:{id:"exitcode"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#exitcode"}},[t._v("#")]),t._v(" exitCode")]),t._v(" "),e("p",[t._v("Used to provide the expected exit code of the program for the testcase.\nThis must be an integer.")]),t._v(" "),e("h2",{attrs:{id:"configuration-options"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#configuration-options"}},[t._v("#")]),t._v(" Configuration options")]),t._v(" "),e("p",[t._v("The next step is adding configuration options for standard output and standarderror.\nWe will use the exercise "),e("a",{attrs:{href:"https://dodona.ugent.be/en/courses/392/series/3920/activities/726249058/",target:"_blank",rel:"noopener noreferrer"}},[t._v("How smart are you?"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("namespace")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"solution"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("disableOptimizations")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tabs")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tab")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hoe slim ben jij?"')]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("config")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stdout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ignoreWhitespace")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tryFloatingPoint")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("contexts")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stdin")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"8809"')]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stdout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"6"')]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("config")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stdout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("caseInsensitive")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("false")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stdin")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("7111")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stdout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stdin")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2172"')]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stdout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("data")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0"')]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("config")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("applyRounding")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("roundTo")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n")])])]),e("h3",{attrs:{id:"description-4"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#description-4"}},[t._v("#")]),t._v(" Description")]),t._v(" "),e("h4",{attrs:{id:"namespace"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#namespace"}},[t._v("#")]),t._v(" namespace")]),t._v(" "),e("p",[t._v("By default, TESTed will use "),e("code",[t._v("submission")]),t._v(" as the namespace for an exercise.\nHow this namespace is used, depends on the programming language.\nFor example, in Java this must be the name of the class of the solution submitted by the students.\nYou might want to change this to something that makes sense for the exercise.\nYou should use "),e("code",[t._v("snake_case")]),t._v(" for the submission. TESTed will automatically convert it to the conventions of each programming language. For example, the namespace "),e("code",[t._v("result_calculator")]),t._v(" will require Java submissions to contain the class "),e("code",[t._v("ResultCalculator")]),t._v(".")]),t._v(" "),e("h4",{attrs:{id:"disableoptimizations"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#disableoptimizations"}},[t._v("#")]),t._v(" disableOptimizations")]),t._v(" "),e("p",[t._v("By default, TESTed will use some optimization techniques to reduce the execution time.\nHowever, these optimization techniques could cause the optimized code to lead to unwanted results.\nTherefore can the user disable these optimizations for the entire testplan, should this be necessary.")]),t._v(" "),e("p",[t._v("The unwanted results are due to the shared program state between the different contexts in the test code.\nSome potentially unwanted results are: the use of shared caches between different contexts,\nwhich achieves a faster execution of tests (not necessarily a negative result);\nback gates through which the students can share information between the different contexts.")]),t._v(" "),e("h4",{attrs:{id:"tabs"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tabs"}},[t._v("#")]),t._v(" tabs")]),t._v(" "),e("p",[t._v("When you want to provide "),e("code",[t._v("namespace")]),t._v(", "),e("code",[t._v("disableOptimizations")]),t._v(" or global configuration options, you must use the keyword "),e("code",[t._v("tabs")]),t._v(" the pass the list of tabs.")]),t._v(" "),e("h4",{attrs:{id:"textual-types"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#textual-types"}},[t._v("#")]),t._v(" Textual types")]),t._v(" "),e("p",[t._v("The second testcase in the testplan for "),e("strong",[t._v("How smart are you?")]),t._v(", illustrates that not only strings can be used for standard input, output or error.\nIn this case they are integers but also logical values and floating decimal numbers are possible (the textual types).")]),t._v(" "),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[t._v("Remark")]),t._v(" "),e("p",[t._v("To avoid problems, we recommend using strings for standard input, output and error.\nThis is caused by the fact that the textual types will be converted to strings.\nFor more information about the translation of textual types, see paragraph "),e("a",{attrs:{href:"#known-pitfalls"}},[t._v("Known pitfalls")]),t._v(".")])]),t._v(" "),e("h4",{attrs:{id:"configuration"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#configuration"}},[t._v("#")]),t._v(" Configuration")]),t._v(" "),e("p",[t._v("There are multiple configuration options to pass to the evaluator for standard output and error.\nThese options are:")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("ignoreWhitespace")]),t._v(":\nIgnore whitespace in prefix and suffix of the text by comparing the output.")]),t._v(" "),e("li",[e("strong",[t._v("caseInsensitive")]),t._v(":\nIgnore the difference between uppercase and lowercase when comparing the output.")]),t._v(" "),e("li",[e("strong",[t._v("tryFloatingPoint")]),t._v(":\nTry to compare the output as floats.")]),t._v(" "),e("li",[e("strong",[t._v("applyRounding")]),t._v(":\nApply rounding when comparing the output as floats.")]),t._v(" "),e("li",[e("strong",[t._v("roundTo")]),t._v(":\nThe number of decimals after the point that you want to keep after rounding.\nThis is mandatory when you want to apply rounding.")])]),t._v(" "),e("p",[t._v("You can pass the configuration options at the global level, for each tab, context and/or specific for each output.\nThe configuration options must be accumulated, the option at to must specific level will be kept.")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("Global")]),t._v(":\nGlobally the options must be passed for each output stream, in the object by the optional key "),e("code",[t._v("config")]),t._v(".\nThis object has two keys "),e("code",[t._v("stdout")]),t._v(" (options for standard output) and "),e("code",[t._v("stderr")]),t._v(" (options for standarderror), where at least on key must be passed.")]),t._v(" "),e("li",[e("strong",[t._v("Tab")]),t._v(":\nIdentical to "),e("strong",[t._v("global")]),t._v(".")]),t._v(" "),e("li",[e("strong",[t._v("Context")]),t._v(":\nIdentical to "),e("strong",[t._v("global")]),t._v(".")]),t._v(" "),e("li",[e("strong",[t._v("Specific")]),t._v(":\nWhen you only want to pass a configuration for one test, you must pass an object instead of the value for that channel.\nAn example of this is given in testcase 3 of the codefragment.\nThis object has two mandatory keys:\n"),e("ul",[e("li",[e("strong",[t._v("data")]),t._v(":\nThe expected value, to compare with.")]),t._v(" "),e("li",[e("strong",[t._v("config")]),t._v(":\nThe object with the configuration params.")])])])]),t._v(" "),e("h2",{attrs:{id:"simple-function-calls"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#simple-function-calls"}},[t._v("#")]),t._v(" Simple function calls")]),t._v(" "),e("p",[t._v("Now we will examine a testplan for simple function calls.\nThe testplan that we will examine is for the exercise "),e("a",{attrs:{href:"https://dodona.ugent.be/en/courses/392/series/3922/activities/444829407/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Rail fence cipher"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tab")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Encode"')]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("contexts")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("expression")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'encode(\"And now for something completely different.\", 4)'")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("return")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Awsimlf.no  ohnopeyfetdnfrmtgclt irn oe ede"')]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("expression")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'encode(\"Yesterday is history, tomorrow is a mystery, today is a gift of God, which is why we call it the present.\", 1)'")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("return-raw")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\"Yesterday is history, tomorrow is a mystery, today is a gift of God, which is why we call it the present.\"'")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tab")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Decode"')]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("contexts")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("expression")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'decode(\"Awsimlf.no  ohnopeyfetdnfrmtgclt irn oe ede\", 4)'")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("return")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"And now for something completely different."')]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("expression")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'decode(\"Yesterday is history, tomorrow is a mystery, today is a gift of God, which is why we call it the present.\", 1)'")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("return")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Yesterday is history, tomorrow is a mystery, today is a gift of God, which is why we call it the present."')]),t._v("\n")])])]),e("p",[e("img",{attrs:{src:a(571),alt:"Rail fence cipher Encode"}}),t._v(" "),e("img",{attrs:{src:a(572),alt:"Rail fence cipher Decode"}})]),t._v(" "),e("h3",{attrs:{id:"description-5"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#description-5"}},[t._v("#")]),t._v(" Description")]),t._v(" "),e("h4",{attrs:{id:"expression"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#expression"}},[t._v("#")]),t._v(" Expression")]),t._v(" "),e("p",[t._v("With function call tests, the input is a statement or expression (both can use one of the following keywords: "),e("code",[t._v("expression")]),t._v(" or "),e("code",[t._v("statement")]),t._v(") in a testcase for a context.")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("Hint")]),t._v(" "),e("p",[t._v("Statements and expressions are discussed in detail in the section "),e("a",{attrs:{href:"#statements-expressions-and-return-raw"}},[t._v("Statements, expressions and return-raw")]),t._v(".")])]),t._v(" "),e("h4",{attrs:{id:"return-values"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#return-values"}},[t._v("#")]),t._v(" Return values")]),t._v(" "),e("p",[t._v("There are two ways to pass the expected return value of the expression in the DSL.\nEither you use the "),e("code",[t._v("return")]),t._v(" or you use"),e("code",[t._v("return-raw")]),t._v(".")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("return")]),t._v(":\nThe expected value of the expression is noted using YAML objects.\nThe YAML data types will be translated to the basic data types of TESTed.")]),t._v(" "),e("li",[e("strong",[t._v("return-raw")]),t._v(":\nThe expected value of the expression is noted using the same grammar as for statements and expressions (see section "),e("a",{attrs:{href:"#statements-expressions-and-return-raw"}},[t._v("Statements, expressions and return-raw")]),t._v(").")])]),t._v(" "),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[t._v("Remark")]),t._v(" "),e("p",[t._v("When you want to test a function that has no return value (not the value "),e("code",[t._v("null")]),t._v(", "),e("code",[t._v("void")]),t._v(" in Java by example),\nyou may not specify "),e("code",[t._v("return")]),t._v(" or"),e("code",[t._v("return-raw")]),t._v(".")])]),t._v(" "),e("h2",{attrs:{id:"variable-assignments"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#variable-assignments"}},[t._v("#")]),t._v(" Variable assignments")]),t._v(" "),e("p",[t._v("We will now look at a testplan where we also assign values to a variable.\nFor this we use the example exercise "),e("a",{attrs:{href:"https://github.com/dodona-edu/universal-judge/tree/master/exercise/objects",target:"_blank",rel:"noopener noreferrer"}},[t._v("Objects"),e("OutboundLink")],1),t._v(" from TESTed.")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("namespace")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"equal_checker"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tabs")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tab")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Feedback"')]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("contexts")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("testcases")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("statement")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'instance = new EqualChecker(5)'")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("expression")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'instance.check(25)'")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("return")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("false")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("expression")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'instance.check(5)'")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("return")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v("\n")])])]),e("p",[e("img",{attrs:{src:a(573),alt:"Objects"}})]),t._v(" "),e("h3",{attrs:{id:"description-6"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#description-6"}},[t._v("#")]),t._v(" Description")]),t._v(" "),e("p",[t._v("In a context we can define multiple testcases, that can depend on an earlier testcase.\nIn this example we first create an object, after which we will call functions on this object.")]),t._v(" "),e("p",[t._v("This is the most important reason to differentiate between contexts and testcases.\nThe contexts could be executed independently, while testcases in a context could be dependent.")]),t._v(" "),e("h4",{attrs:{id:"testcases"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#testcases"}},[t._v("#")]),t._v(" Testcases")]),t._v(" "),e("p",[t._v("To use multiple testcases in a context, you must use the keyword "),e("code",[t._v("testcases")]),t._v(".\nThis is a list of sequential testcases: you may depend on the order of the testcases.")]),t._v(" "),e("p",[t._v("If you want to evaluate one or more function call test(s) in addition to the code itself (or "),e("code",[t._v("main")]),t._v(" method), you must also use the list of testcases.")]),t._v(" "),e("h2",{attrs:{id:"error-messages"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#error-messages"}},[t._v("#")]),t._v(" Error messages")]),t._v(" "),e("p",[t._v('A concept often used in programming languages are errors that can be raised.\nYou can specify the expected error messages in testplans, not to be confused with error types (which are programming language dependent).\nFor this we are looking at a testplan for the "division" function.')]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tab")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Division"')]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("contexts")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("statement")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'division(9, 0)'")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("exception")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Division by zero"')]),t._v("\n")])])]),e("h3",{attrs:{id:"description-7"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#description-7"}},[t._v("#")]),t._v(" Description")]),t._v(" "),e("h4",{attrs:{id:"exception"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#exception"}},[t._v("#")]),t._v(" exception")]),t._v(" "),e("p",[t._v("This keyword expects the expected fault message (as textual type) for a testcase.")]),t._v(" "),e("h2",{attrs:{id:"file-linking"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#file-linking"}},[t._v("#")]),t._v(" File linking")]),t._v(" "),e("p",[t._v("In some programming exercises the students are expected to read input from files.\nIn the evaluation feedback you often want to allow the student to see the content of these files.\nYou can add a list of files that must be linked at the context and/or testcase level.")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tab")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Count"')]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("contexts")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("statement")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'count_valid_passports(\"passports01.txt\")'")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("return")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("files")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"passports01.txt"')]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("url")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"media/workdir/passports01.txt"')]),t._v("\n")])])]),e("p",[e("img",{attrs:{src:a(574),alt:"File linking"}})]),t._v(" "),e("h3",{attrs:{id:"description-8"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#description-8"}},[t._v("#")]),t._v(" Description")]),t._v(" "),e("h4",{attrs:{id:"files"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#files"}},[t._v("#")]),t._v(" files")]),t._v(" "),e("p",[t._v("At the level of a context and/or testcase you could be a list of the files to be linked.")]),t._v(" "),e("h4",{attrs:{id:"name"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#name"}},[t._v("#")]),t._v(" name")]),t._v(" "),e("p",[t._v("Name of the file.")]),t._v(" "),e("h4",{attrs:{id:"url"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#url"}},[t._v("#")]),t._v(" url")]),t._v(" "),e("p",[t._v("The relative path to the file that is located in the description folder of the exercise.")]),t._v(" "),e("h2",{attrs:{id:"combination-of-function-calls-and-input-output"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#combination-of-function-calls-and-input-output"}},[t._v("#")]),t._v(" Combination of function calls and input-output")]),t._v(" "),e("p",[t._v("We have already seen testplans for both input-output or function calls.\nWe will now combine these concepts in one testplan.\nWe will use the basic calculator example for this testplan.\nYAML also support comments.\nThe line is preceded by a pound sign (#).")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Testing sum of two numbers")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tab")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Sum"')]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("contexts")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("arguments")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-a"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"5"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"20"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stdout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"25"')]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("testcases")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("statement")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'add(4, 16)'")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("return")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Testing difference of two numbers")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tab")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Difference"')]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("contexts")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("arguments")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-s"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"5"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"20"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stdout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-15"')]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("testcases")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("statement")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'sub(4, 16)'")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("return")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("-12")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Testing multiplication of two numbers")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tab")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Multiplication"')]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("contexts")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("arguments")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-m"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"25"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"5"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stdout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"125"')]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("testcases")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("statement")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'mul(4, 16)'")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("return")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("64")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Testing division of two numbers")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tab")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Division"')]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("contexts")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("arguments")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-d"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"25"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"5"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stdout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"5"')]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("testcases")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("statement")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'div(32, 8)'")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("return")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("arguments")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-d"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"25"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stderr")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Integer division by zero"')]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("exitCode")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("testcases")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("statement")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'div(1, 0)'")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("exception")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Integer division by zero"')]),t._v("\n")])])]),e("h2",{attrs:{id:"statements-expressions-and-return-raw"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#statements-expressions-and-return-raw"}},[t._v("#")]),t._v(" Statements, expressions and return-raw")]),t._v(" "),e("p",[t._v("In this section we will describe the grammar of the statements, expressions and return values.")]),t._v(" "),e("h3",{attrs:{id:"namings"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#namings"}},[t._v("#")]),t._v(" Namings")]),t._v(" "),e("p",[t._v("Constructor, function, and variable names can only consist of lowercase and uppercase letters of the alphabet (without accents), numbers and a hyphen, and cannot begin with a number.")]),t._v(" "),e("h3",{attrs:{id:"datatypes"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#datatypes"}},[t._v("#")]),t._v(" Datatypes")]),t._v(" "),e("p",[t._v("Our grammar offers support for all data types from tested, see table below.")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("datatype")]),t._v(" "),e("th",[t._v("Description")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("nothing")]),t._v(" "),e("td",[t._v("Datatype null values")])]),t._v(" "),e("tr",[e("td",[t._v("boolean")]),t._v(" "),e("td",[t._v("Datatype boolean values")])]),t._v(" "),e("tr",[e("td",[t._v("text")]),t._v(" "),e("td",[t._v("Default datatype text")])]),t._v(" "),e("tr",[e("td",[t._v("char")]),t._v(" "),e("td",[t._v("Datatype single character")])]),t._v(" "),e("tr",[e("td",[t._v("integer")]),t._v(" "),e("td",[t._v("Default datatype integers")])]),t._v(" "),e("tr",[e("td",[t._v("uint8")]),t._v(" "),e("td",[t._v("Datatype 8 bit natural numbers")])]),t._v(" "),e("tr",[e("td",[t._v("int8")]),t._v(" "),e("td",[t._v("Datatype 8 bit integers")])]),t._v(" "),e("tr",[e("td",[t._v("uint16")]),t._v(" "),e("td",[t._v("Datatype 16 bit natural numbers")])]),t._v(" "),e("tr",[e("td",[t._v("int16")]),t._v(" "),e("td",[t._v("Datatype 16 bit integers")])]),t._v(" "),e("tr",[e("td",[t._v("uint32")]),t._v(" "),e("td",[t._v("Datatype 32 bit natural numbers")])]),t._v(" "),e("tr",[e("td",[t._v("int32")]),t._v(" "),e("td",[t._v("Datatype 32 bit integers")])]),t._v(" "),e("tr",[e("td",[t._v("uint64")]),t._v(" "),e("td",[t._v("Datatype 64 bit natural numbers")])]),t._v(" "),e("tr",[e("td",[t._v("int64")]),t._v(" "),e("td",[t._v("Datatype 64 bit integers")])]),t._v(" "),e("tr",[e("td",[t._v("bigint")]),t._v(" "),e("td",[t._v("Datatype larger integers (>64 bit)")])]),t._v(" "),e("tr",[e("td",[t._v("rational")]),t._v(" "),e("td",[t._v("Default datatype rational numbers")])]),t._v(" "),e("tr",[e("td",[t._v("single")]),t._v(" "),e("td",[t._v("Datatype 32-bit floating point numbers")])]),t._v(" "),e("tr",[e("td",[t._v("double")]),t._v(" "),e("td",[t._v("Datatype 64-bit floating point numbers")])]),t._v(" "),e("tr",[e("td",[t._v("extended")]),t._v(" "),e("td",[t._v("Datatype high precision floating points numbers")])]),t._v(" "),e("tr",[e("td",[t._v("fixed")]),t._v(" "),e("td",[t._v("Datatype rational numbers fixed precision")])]),t._v(" "),e("tr",[e("td",[t._v("sequence")]),t._v(" "),e("td",[t._v("Default datatype sequences")])]),t._v(" "),e("tr",[e("td",[t._v("list")]),t._v(" "),e("td",[t._v("Datatype lists (sequence, dynamic length)")])]),t._v(" "),e("tr",[e("td",[t._v("array")]),t._v(" "),e("td",[t._v("Datatype arrays (sequence, fixed length)")])]),t._v(" "),e("tr",[e("td",[t._v("tuple")]),t._v(" "),e("td",[t._v("Datatype tuples")])]),t._v(" "),e("tr",[e("td",[t._v("set")]),t._v(" "),e("td",[t._v("Datatype sets")])]),t._v(" "),e("tr",[e("td",[t._v("map")]),t._v(" "),e("td",[t._v("Datatype dictionaires")])])])]),t._v(" "),e("h3",{attrs:{id:"values"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#values"}},[t._v("#")]),t._v(" Values")]),t._v(" "),e("p",[t._v("The grammar supports numbers, booleans, null-values and strings.")]),t._v(" "),e("h4",{attrs:{id:"numbers"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#numbers"}},[t._v("#")]),t._v(" Numbers")]),t._v(" "),e("p",[t._v("Both integers and rational numbers are supported.\nIntegers always use a decimal format (ex: "),e("code",[t._v("2020")]),t._v(","),e("code",[t._v("+ 5")]),t._v(", "),e("code",[t._v("−2")]),t._v(").\nRational numbers can use either decimal (ex: "),e("code",[t._v("2.5")]),t._v(") or scientific notation (ex:"),e("code",[t._v("27.15e2")]),t._v(", "),e("code",[t._v("−2e − 2")]),t._v(") format.")]),t._v(" "),e("h4",{attrs:{id:"booleans"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#booleans"}},[t._v("#")]),t._v(" Booleans")]),t._v(" "),e("p",[t._v("The two boolean values are "),e("code",[t._v("true")]),t._v(" and "),e("code",[t._v("false")]),t._v(".")]),t._v(" "),e("h4",{attrs:{id:"null-values"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#null-values"}},[t._v("#")]),t._v(" Null-values")]),t._v(" "),e("p",[e("code",[t._v("null")]),t._v(" and "),e("code",[t._v("undefined")]),t._v(" represent both null-values.")]),t._v(" "),e("h4",{attrs:{id:"strings"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#strings"}},[t._v("#")]),t._v(" Strings")]),t._v(" "),e("p",[t._v("Text or strings must be written between double quotes, where the special characters are escaped using a backslash.\nThe table below is an overview of these special characters.")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("Description")]),t._v(" "),e("th",[t._v("Escape sequence")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("Backslash")]),t._v(" "),e("td",[e("code",[t._v("\\\\")])])]),t._v(" "),e("tr",[e("td",[t._v("Single quote")]),t._v(" "),e("td",[e("code",[t._v("\\'")])])]),t._v(" "),e("tr",[e("td",[t._v("Double quote")]),t._v(" "),e("td",[e("code",[t._v('\\"')])])]),t._v(" "),e("tr",[e("td",[t._v("ASCII Bell")]),t._v(" "),e("td",[e("code",[t._v("\\a")])])]),t._v(" "),e("tr",[e("td",[t._v("ASCII Backspace")]),t._v(" "),e("td",[e("code",[t._v("\\b")])])]),t._v(" "),e("tr",[e("td",[t._v("ASCII Formfeed")]),t._v(" "),e("td",[e("code",[t._v("\\f")])])]),t._v(" "),e("tr",[e("td",[t._v("ASCII Linefeed")]),t._v(" "),e("td",[e("code",[t._v("\\n")])])]),t._v(" "),e("tr",[e("td",[t._v("ASCII Carriage Return")]),t._v(" "),e("td",[e("code",[t._v("\\r")])])]),t._v(" "),e("tr",[e("td",[t._v("ASCII Horizontal tab")]),t._v(" "),e("td",[e("code",[t._v("\\t")])])]),t._v(" "),e("tr",[e("td",[t._v("ASCII Vertical tab")]),t._v(" "),e("td",[e("code",[t._v("\\v")])])]),t._v(" "),e("tr",[e("td",[t._v("Octal character value")]),t._v(" "),e("td",[e("code",[t._v("\\ooo")])])]),t._v(" "),e("tr",[e("td",[t._v("Hexadecimal character value")]),t._v(" "),e("td",[e("code",[t._v("\\xhh")])])]),t._v(" "),e("tr",[e("td",[t._v("16-bit unicode character value")]),t._v(" "),e("td",[e("code",[t._v("\\uhhhh")])])]),t._v(" "),e("tr",[e("td",[t._v("32-bit unicode character value")]),t._v(" "),e("td",[e("code",[t._v("\\Uhhhhhhhh")])])]),t._v(" "),e("tr",[e("td",[t._v("Named unicode character")]),t._v(" "),e("td",[e("code",[t._v("\\N{name}")])])])])]),t._v(" "),e("h4",{attrs:{id:"collections"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#collections"}},[t._v("#")]),t._v(" Collections")]),t._v(" "),e("p",[t._v("There are multiple data collections in TESTed: sequence, sets, tuples and dictionaires.\nWhen you use collections in expressions and statements, the values in these collection can contain both values and expressions.\nFor "),e("strong",[t._v("return values")]),t._v(" these collections can only contain values and "),e("strong",[t._v("no expressions")]),t._v(".\nIn addition, the values in these collections can be heterogeneous (different data types).")]),t._v(" "),e("h5",{attrs:{id:"sequences"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sequences"}},[t._v("#")]),t._v(" Sequences")]),t._v(" "),e("p",[t._v("An ordered dynamic collection of values.\nThese are denoted with the help of squared brackets and could be empty.\nSome examples:")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("7.5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"text"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("random")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),e("h5",{attrs:{id:"tuples"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tuples"}},[t._v("#")]),t._v(" Tuples")]),t._v(" "),e("p",[t._v("An ordered fixed collection of values.\nThese are denoted with the help of round brackets and could be empty.\nSome examples:")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("7.5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"text"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("random")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("h5",{attrs:{id:"sets"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sets"}},[t._v("#")]),t._v(" Sets")]),t._v(" "),e("p",[t._v("An unordered dynamic collection of unique immutable values.\nThese are denoted with the help of curly brackets.\nEmpty sets must be written in a specific way because dictionaries also written with curly brackets.\nSome examples:")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("7.5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"text"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("random")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[t._v("Remark")]),t._v(" "),e("p",[t._v("Not every programming language supports each datatype as set element.")])]),t._v(" "),e("h5",{attrs:{id:"dictionaries"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dictionaries"}},[t._v("#")]),t._v(" Dictionaries")]),t._v(" "),e("p",[t._v("An unordered dynamic collection of key-value pairs.\nThe keys must be immutable, the values could be both immutable and mutable.\nLike sets, dictionaries are written with curly brackets, but dictionaries can be empty.\nSets could also be empty but must use "),e("a",{attrs:{href:"#explicit-typing"}},[t._v("explicit typing")]),t._v(".\nBoth the keys and values can be of any datatype.\nSome examples:")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"first"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"size"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"precision"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.75")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"rounding active"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("random")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("get_id")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("get_username")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[t._v("Remark")]),t._v(" "),e("p",[t._v("Not every programming language supports each datatype as key.")])]),t._v(" "),e("h4",{attrs:{id:"explicit-typing"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#explicit-typing"}},[t._v("#")]),t._v(" Explicit typing")]),t._v(" "),e("p",[t._v('Our grammar supports the ability to specify the "explicit type" of the values (not expressions).\nExplicit typing is denoted with '),e("code",[t._v("<Value> :: <Datatype>")]),t._v(".\nAn empty set for example can be denoted with one of the following expressions:")]),t._v(" "),e("div",{staticClass:"language-haskell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-haskell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("set")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("set")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("set")]),t._v("\n")])])]),e("h3",{attrs:{id:"functions"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#functions"}},[t._v("#")]),t._v(" Functions")]),t._v(" "),e("p",[t._v("The arguments of a function call are written within parentheses.\nA function call can be both be a global function, or an object function.\nSome examples:")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nobject"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("get_name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("get_element")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"first"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("h3",{attrs:{id:"constructor"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#constructor"}},[t._v("#")]),t._v(" Constructor")]),t._v(" "),e("p",[t._v("Constructors are very similar to function calls, except that they are preceded with the keyword "),e("code",[t._v("new")]),t._v(".\nSome examples:")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Counter")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("object"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Pair")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Pair"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8.4e-5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("h3",{attrs:{id:"expression-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#expression-2"}},[t._v("#")]),t._v(" Expression")]),t._v(" "),e("p",[t._v("Expressions are values, function calls, constructors or variables (and properties).")]),t._v(" "),e("h3",{attrs:{id:"variable-assignments-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#variable-assignments-2"}},[t._v("#")]),t._v(" Variable assignments")]),t._v(" "),e("p",[t._v("If we want to use variables, we need to assign values to these variables.\nFor constructors and values, the datatype can be derived and must not be specified.\nFor function calls, however, the data type must be specified explicitly.\nSome examples:")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[t._v("Counter counter "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Counter")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\npair "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("object"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Pair")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Paar"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8.4e-5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ntext value "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("get_value")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" pair"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nnumber "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" int8\n")])])]),e("h2",{attrs:{id:"known-pitfalls"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#known-pitfalls"}},[t._v("#")]),t._v(" Known pitfalls")]),t._v(" "),e("h3",{attrs:{id:"keys"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#keys"}},[t._v("#")]),t._v(" Keys")]),t._v(" "),e("p",[t._v("Forgetting a colon after the key names in YAML.\nExample:")]),t._v(" "),e("p",[t._v("Wrong:")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(' tab "Feedback"\n')])])]),e("p",[t._v("Correct:")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tab")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Feedback"')]),t._v("\n")])])]),e("h3",{attrs:{id:"lists-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#lists-2"}},[t._v("#")]),t._v(" Lists")]),t._v(" "),e("p",[t._v("Forgetting the hyphen and space in list elements.\nOr using it too much, which leads to much more elements than expected.\nExample:")]),t._v(" "),e("p",[t._v("Wrong:")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tab")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Feedback"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("contexts")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stdin")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"input-0"')]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stdout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"output-0"')]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stdin")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"input-1"')]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stdout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"output-1"')]),t._v("\n")])])]),e("p",[t._v("Correct:")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tab")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Feedback"')]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("contexts")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stdin")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"input-0"')]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stdout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"output-0"')]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stdin")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"input-1"')]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stdout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"output-1"')]),t._v("\n")])])]),e("h3",{attrs:{id:"text"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#text"}},[t._v("#")]),t._v(" Text")]),t._v(" "),e("p",[t._v("There are multiple ways to denote strings in YAML.\nThe different notations handle whitespace in different ways.")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("Hint")]),t._v(" "),e("p",[t._v("To avoid confusion we recommend using the double quotes notation when you want to pass textual values.\nUsing this notation, you can escape special characters, for example newlines.\nWhen you want to specify statements, expressions and raw return-values, we recommend using single quotes, because it doesn't escape special characters.")])]),t._v(" "),e("p",[t._v("Below you can find an overview of all YAML strings notations, if you want to use another.")]),t._v(" "),e("h4",{attrs:{id:"single-quotes"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#single-quotes"}},[t._v("#")]),t._v(" Single quotes")]),t._v(" "),e("p",[t._v("By the single quotes, no character will be escaped.\nExcept for the single quote itself, which must be escaped by repeating the symbol.\nExample YAML:")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("single")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 'data''\\ndata'\n")])])]),e("p",[t._v("JSON Translation (YAML rewritten as JSON):")]),t._v(" "),e("div",{staticClass:"language-json extra-class"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"single"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"data\'\\\\ndata"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h4",{attrs:{id:"double-quotes"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#double-quotes"}},[t._v("#")]),t._v(" Double quotes")]),t._v(" "),e("p",[t._v("Using double quotes, special characters need to be escaped.\nExample YAML:")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("double")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"data\\ndata"')]),t._v("\n")])])]),e("p",[t._v("JSON Translation:")]),t._v(" "),e("div",{staticClass:"language-json extra-class"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"double"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"data\\ndata"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h4",{attrs:{id:"unquoted"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#unquoted"}},[t._v("#")]),t._v(" Unquoted")]),t._v(" "),e("p",[t._v("When using unquoted strings, no character escaping is necessary.\nExample YAML:")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("unquoted")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" data \\ data\n")])])]),e("p",[t._v("JSON Translation:")]),t._v(" "),e("div",{staticClass:"language-json extra-class"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"unquoted"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"data \\\\ data"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h4",{attrs:{id:"multi-line-unquoted"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#multi-line-unquoted"}},[t._v("#")]),t._v(" Multi-line unquoted")]),t._v(" "),e("p",[t._v("Using multi-line unquoted string, a single newline character will be replaced with a space and the whitespace around a line will be trimmed.\nA completely empty line will be replaced with a newline character.\nExample YAML:")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("multi unquoted")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  line1\n    line2\n  line3\n\n  line4\n\n\n  line5\n")])])]),e("p",[t._v("JSON Translation:")]),t._v(" "),e("div",{staticClass:"language-json extra-class"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"multi unquoted"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"line1 line2 line3\\nline4\\n\\nline5"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h4",{attrs:{id:"multi-line-single-quotes"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#multi-line-single-quotes"}},[t._v("#")]),t._v(" Multi-line single quotes")]),t._v(" "),e("p",[t._v("This is very similar to the multi-line unquoted strings.\nExample YAML:")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("multi single quoted")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 'line1''\\nline1a\n    line2\n  line3\n\n  line4\n\n\n  line5'\n")])])]),e("p",[t._v("JSON Translation:")]),t._v(" "),e("div",{staticClass:"language-json extra-class"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"multi single quoted"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"line1\'\\\\nline1a line2 line3\\nline4\\n\\nline5"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h4",{attrs:{id:"multi-line-double-quotes"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#multi-line-double-quotes"}},[t._v("#")]),t._v(" Multi-line double quotes")]),t._v(" "),e("p",[t._v("This is very similar to multi-line unquoted strings, but special characters must be escaped.\nExample YAML:")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("multi double quoted")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(' "line1\\nline1a\n    line2\n  line3\n\n  line4\n\n\n  line5"\n')])])]),e("p",[t._v("JSON Translation:")]),t._v(" "),e("div",{staticClass:"language-json extra-class"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"multi double quoted"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"line1\\nline1a line2 line3\\nline4\\n\\nline5"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h4",{attrs:{id:"literal-block"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#literal-block"}},[t._v("#")]),t._v(" literal block")]),t._v(" "),e("p",[t._v("YAML supports multiple block notations, where newlines are kept.\nIn this mode, indentation that deviates from the alignment not be trimmed.\nThere will be also no escaping.")]),t._v(" "),e("h5",{attrs:{id:"default"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#default"}},[t._v("#")]),t._v(" Default ("),e("code",[t._v("|")]),t._v(")")]),t._v(" "),e("p",[t._v("Removes each empty line at the end of the string, but keeps one newline character at the end.\nExample YAML:")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("literal")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),e("span",{pre:!0,attrs:{class:"token scalar string"}},[t._v("\n  line1a\\nline1b\n    line2\n  # not a comment\n  end")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# end of statement")]),t._v("\n")])])]),e("p",[t._v("JSON Translation:")]),t._v(" "),e("div",{staticClass:"language-json extra-class"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"literal"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"line1a\\\\nline1b\\n  line2\\n# not a comment\\nend\\n"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h5",{attrs:{id:"keep"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#keep"}},[t._v("#")]),t._v(" Keep ("),e("code",[t._v("|+")]),t._v(")")]),t._v(" "),e("p",[t._v("Keeps all newlines at the end of the string.\nExample YAML:")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("literal")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v("+\n  line1a\\nline1b\n    line2\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# not a comment")]),t._v("\n  end\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# end of statement")]),t._v("\n")])])]),e("p",[t._v("JSON Translation:")]),t._v(" "),e("div",{staticClass:"language-json extra-class"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"literal"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"line1a\\\\nline1b\\n  line2\\n# not a comment\\nend\\n\\n"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h5",{attrs:{id:"trim"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#trim"}},[t._v("#")]),t._v(" Trim ("),e("code",[t._v("|-")]),t._v(")")]),t._v(" "),e("p",[t._v("Here each newline at the end will be removed and there will be no newline at the end of the string.\nExample YAML:")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("literal")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("\n  line1a\\nline1b\n    line2\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# not a comment")]),t._v("\n  end\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# end of statement")]),t._v("\n")])])]),e("p",[t._v("JSON Translation:")]),t._v(" "),e("div",{staticClass:"language-json extra-class"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"literal"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"line1a\\\\nline1b\\n  line2\\n# not a comment\\nend"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h4",{attrs:{id:"folded-block"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#folded-block"}},[t._v("#")]),t._v(" Folded block")]),t._v(" "),e("p",[t._v("YAML supports different block formats where a line break is replaced with a space when the next line respects the alignment.\nEach empty line will be interpreted as a newline.\nThe indentation that deviates from the alignment is not trimmed away.\nThere will also be no escaping.")]),t._v(" "),e("h5",{attrs:{id:"default-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#default-2"}},[t._v("#")]),t._v(" Default ("),e("code",[t._v(">")]),t._v(")")]),t._v(" "),e("p",[t._v("Removes each empty line at the end of the string, but keeps one newline character at the end.\nExample YAML:")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("literal")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token scalar string"}},[t._v("\n  line1a\n  line1b\n    line2")]),t._v("\n\n  line3\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# end of statement")]),t._v("\n")])])]),e("p",[t._v("JSON Translation:")]),t._v(" "),e("div",{staticClass:"language-json extra-class"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"literal"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"line1a line1b\\n  line2\\n\\nline3\\n"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h5",{attrs:{id:"keep-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#keep-2"}},[t._v("#")]),t._v(" Keep ("),e("code",[t._v(">+")]),t._v(")")]),t._v(" "),e("p",[t._v("Keeps all newlines at the end of the string.\nExample YAML:")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("literal")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v("+\n  line1a\n  line1b\n    line2\n\n  line3\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# end of statement")]),t._v("\n")])])]),e("p",[t._v("JSON Translation:")]),t._v(" "),e("div",{staticClass:"language-json extra-class"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"literal"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"line1a line1b\\n  line2\\n\\nline3\\n\\n"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h5",{attrs:{id:"trim-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#trim-2"}},[t._v("#")]),t._v(" Trim ("),e("code",[t._v(">-")]),t._v(")")]),t._v(" "),e("p",[t._v("Removes each empty line at the end of the string and there will be no newline character at the end.\nExample YAML:")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("literal")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("\n  line1a\n  line1b\n    line2\n\n  line3\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# end of statement")]),t._v("\n")])])]),e("p",[t._v("JSON Translation:")]),t._v(" "),e("div",{staticClass:"language-json extra-class"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"literal"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"line1a line1b\\n  line2\\n\\nline3"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h3",{attrs:{id:"yes-and-no"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#yes-and-no"}},[t._v("#")]),t._v(" 'yes' and 'no'")]),t._v(" "),e("p",[e("code",[t._v("yes")]),t._v(" and "),e("code",[t._v("no")]),t._v(" are an extra notation for the booleans "),e("code",[t._v("true")]),t._v(" and "),e("code",[t._v("false")]),t._v(".")]),t._v(" "),e("h3",{attrs:{id:"translation-to-textual-types"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#translation-to-textual-types"}},[t._v("#")]),t._v(" Translation to textual types")]),t._v(" "),e("p",[t._v("If no strings are used for "),e("code",[t._v("stdin")]),t._v(","),e("code",[t._v("stdout")]),t._v(" and "),e("code",[t._v("stderr")]),t._v(", but numbers and boolean values, the final textual data may deviate from what you intended.\nExample:")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stdin")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("077")]),t._v("\n")])])]),e("p",[t._v("Will be interpreted as an octal number: "),e("code",[t._v("7 * 8 + 7 = 63")]),t._v(".")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stdin")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"63"')]),t._v("\n")])])]),e("h3",{attrs:{id:"function-names"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#function-names"}},[t._v("#")]),t._v(" Function names")]),t._v(" "),e("p",[t._v("The convention for function names in the DSL is "),e("code",[t._v("snake_case")]),t._v(".\nWhen you deviate from this convention, it can't be guaranteed that the correct style convention for a specific programming languages will be used.")]),t._v(" "),e("h2",{attrs:{id:"convert"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#convert"}},[t._v("#")]),t._v(" Convert")]),t._v(" "),e("p",[t._v("The canonical format for TESTed testplans is the full JSON format. However, TESTed converts the DSL internally to the JSON format, so you can use the DSL directly.")]),t._v(" "),e("p",[t._v("However, it can be useful to view the full JSON format, especially if things go wrong. TESTed provides a Python script to do this translation. The script can be found in "),e("a",{attrs:{href:"https://github.com/dodona-edu/universal-judge",target:"_blank",rel:"noopener noreferrer"}},[t._v("TESTed's GitHub repository"),e("OutboundLink")],1),t._v(".\nThe script can be executed with one of the following commands (and combinations) in the root directory of the GitHub repository:")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Standard input - standard output")]),t._v("\n$ python3 -m tested.translate_dsl "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" testplan.yaml "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" testplan.json\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Short options")]),t._v("\n$ python3 -m tested.translate_dsl -i testplan.yaml -o testplan.json\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Long option names")]),t._v("\n$ python3 -m tested.translate_dsl --dsl testplan.yaml --json testplan.json\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Positional arguments")]),t._v("\n$ python3 -m tested.translate_dsl testplan.yaml testplan.json\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);