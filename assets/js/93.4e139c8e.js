(window.webpackJsonp=window.webpackJsonp||[]).push([[93],{798:function(t,s,e){"use strict";e.r(s);var a=e(29),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"tested-one-judge-to-rule-them-all"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tested-one-judge-to-rule-them-all"}},[t._v("#")]),t._v(" TESTed: one judge to rule them all")]),t._v(" "),e("p",[t._v("TESTed is an "),e("em",[t._v("educational software testing framework")]),t._v(" (a "),e("em",[t._v("judge")]),t._v("),\nwhich allows testing submissions for programming exercises based on a programming-language-independent test suite.\nThis means that the requirements for submissions only need to be specified once,\nwhile you can still automatically test submissions in different programming languages.\nTESTed can be used as a standalone tool, but is also integrated into Dodona.")]),t._v(" "),e("h2",{attrs:{id:"when-do-you-use-tested"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#when-do-you-use-tested"}},[t._v("#")]),t._v(" When do you use TESTed?")]),t._v(" "),e("p",[t._v("In which circumstances can you use TESTed to create programming exercises?\nFirst, TESTed must support the programming language you want to use.\nCurrently, the following languages are supported:")]),t._v(" "),e("ul",[e("li",[t._v("Bash")]),t._v(" "),e("li",[t._v("C (gcc)")]),t._v(" "),e("li",[t._v("Haskell (ghc)")]),t._v(" "),e("li",[t._v("Java")]),t._v(" "),e("li",[t._v("JavaScript (NodeJS)")]),t._v(" "),e("li",[t._v("Kotlin")]),t._v(" "),e("li",[t._v("Python")])]),t._v(" "),e("p",[t._v("Because the programming exercises are programming-language-independent,\nTESTed is best suited for the following kinds of exercises:")]),t._v(" "),e("ul",[e("li",[t._v("Exercises on concepts that are found in (almost) all programming languages.")]),t._v(" "),e("li",[t._v("Exercises where the focus lies on algorithms or other high-level concepts, not on the programming language itself.")])]),t._v(" "),e("p",[t._v("TESTed is less suitable for exercises that focus on programming-language-specific concepts.\nFor example, an exercise on C pointers won't work well with TESTed.")]),t._v(" "),e("h2",{attrs:{id:"getting-started-with-tested"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#getting-started-with-tested"}},[t._v("#")]),t._v(" Getting started with TESTed")]),t._v(" "),e("p",[t._v("The section after this one is a tutorial to create an exercise using TESTed within Dodona.\nIf you want to use TESTed outside of Dodona, we recommend following the "),e("a",{attrs:{href:"https://github.com/dodona-edu/universal-judge",target:"_blank",rel:"noopener noreferrer"}},[t._v("tutorial in the repository"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("p",[t._v("A number of references are also available:")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"exercise-config"}},[t._v("The configuration options")])]),t._v(" "),e("li",[e("a",{attrs:{href:"json"}},[t._v("Format of the test suites")])]),t._v(" "),e("li",[e("a",{attrs:{href:"types"}},[t._v("List of data types for programming languages")])])]),t._v(" "),e("p",[t._v("If you want to work on TESTed itself, the following is useful:")]),t._v(" "),e("ul",[e("li",[t._v("The "),e("a",{attrs:{href:"https://github.com/dodona-edu/universal-judge",target:"_blank",rel:"noopener noreferrer"}},[t._v("installation instructions"),e("OutboundLink")],1),t._v(" in the repository to run TESTed locally.")]),t._v(" "),e("li",[e("a",{attrs:{href:"new-programming-language"}},[t._v("Guide on adding a programming language")]),t._v(".")])]),t._v(" "),e("h2",{attrs:{id:"creating-an-exercise-for-tested"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#creating-an-exercise-for-tested"}},[t._v("#")]),t._v(" Creating an exercise for TESTed")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),e("p",[t._v("In this tutorial, we assume you'll use TESTed within Dodona.\nIf that is not the case, we refer you to the "),e("a",{attrs:{href:"https://github.com/dodona-edu/universal-judge",target:"_blank",rel:"noopener noreferrer"}},[t._v("tutorial in the repository"),e("OutboundLink")],1),t._v(".")])]),t._v(" "),e("p",[t._v("To follow this tutorial, you'll need the following on your system:")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("git")]),t._v(" - to get the exercises on Dodona. You can find more information in "),e("a",{attrs:{href:"https://git-scm.com/book/en/v2/Getting-Started-Installing-Git",target:"_blank",rel:"noopener noreferrer"}},[t._v("chapter 1 of the book "),e("em",[t._v("Pro Git")]),e("OutboundLink")],1),t._v(", which explains how to install Git for various operating systems (Mac, Windows, Linux).")]),t._v(" "),e("li",[t._v("a text editor (like Notepad++) to create and edit text files")])]),t._v(" "),e("p",[t._v('In this tutorial, we explain how to create a simple exercise with TESTed and make the exercise available in Dodona.\nThe exercise we\'re creating is called "write".\nThe problem statement is:')]),t._v(" "),e("blockquote",[e("p",[t._v("Write a function "),e("code",[t._v("write")]),t._v(" that writes its argument to stdout.\nThe argument of the function will always be a string.")])]),t._v(" "),e("p",[t._v("A correct submission for this exercise in a number of programming languages is:")]),t._v(" "),e("tabs",[e("tab",{attrs:{name:"Bash"}},[e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function-name function"}},[t._v("write")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$1")]),t._v('"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),e("tab",{attrs:{name:"C"}},[e("div",{staticClass:"language-c extra-class"},[e("pre",{pre:!0,attrs:{class:"language-c"}},[e("code",[e("span",{pre:!0,attrs:{class:"token macro property"}},[e("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdio.h>")])]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" what"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%s"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" what"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),e("tab",{attrs:{name:"Haskell"}},[e("div",{staticClass:"language-haskell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-haskell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("write")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("putStrLn")]),t._v("\n")])])])]),t._v(" "),e("tab",{attrs:{name:"Java"}},[e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Submission")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" what"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("what"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),e("tab",{attrs:{name:"JavaScript"}},[e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("what")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("what"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),e("tab",{attrs:{name:"Kotlin"}},[e("div",{staticClass:"language-kotlin extra-class"},[e("pre",{pre:!0,attrs:{class:"language-kotlin"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("what"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" String"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("what"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),e("tab",{attrs:{name:"Python"}},[e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("argument"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("argument"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])],1),t._v(" "),e("p",[t._v("These are the submissions we want to test with TESTed.")]),t._v(" "),e("h3",{attrs:{id:"_1-git-repository"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-git-repository"}},[t._v("#")]),t._v(" 1. Git repository")]),t._v(" "),e("p",[t._v("Dodona uses Git repositories to manage exercises.\nFollow the guide "),e("a",{attrs:{href:"/en/guides/teachers/new-exercise-repo"}},[e("em",[t._v("Creating a new exercise repo")])]),t._v(".\nOnce you have followed this guide and created the repository, you can return to this tutorial.")]),t._v(" "),e("h3",{attrs:{id:"_2-folder-structure"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-folder-structure"}},[t._v("#")]),t._v(" 2. Folder structure")]),t._v(" "),e("p",[t._v("We need to create the correct folder structure in the repository you just created.\nCreate the following folders:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("├── write/          # Folder for the new exercise\n|   ├── evaluation/\n|   └── description/\n")])])]),e("p",[t._v("This is the Dodona folder structure; more information can be found in the "),e("a",{attrs:{href:"/en/references/exercise-directory-structure"}},[t._v("reference")]),t._v(".")]),t._v(" "),e("h3",{attrs:{id:"_3-configuration-options"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-configuration-options"}},[t._v("#")]),t._v(" 3. Configuration options")]),t._v(" "),e("p",[t._v("To signal to Dodona we are creating an exercise, we must add a configuration file.\nThis file contains some options and metadata used by Dodona.")]),t._v(" "),e("p",[t._v("Create a new file "),e("code",[t._v("config.json")]),t._v(" in the folder "),e("code",[t._v("write")]),t._v(", with the following content:")]),t._v(" "),e("div",{staticClass:"language-json extra-class"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"description"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"names"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"en"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Write"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"nl"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Schrijf"')]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"evaluation"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"plan_name"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"testsuite.json"')]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"programming_language"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"python"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"access"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"private"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("Four things happen here:")]),t._v(" "),e("ol",[e("li",[t._v("We give a name to the exercise, in Dutch and in English.")]),t._v(" "),e("li",[t._v("We give the location of the test suite ("),e("code",[t._v("testsuite.json")]),t._v(").\nThis is always relative to the folder "),e("code",[t._v("write/evaluation")]),t._v(".")]),t._v(" "),e("li",[t._v("We set the default programming language to Python. While TESTed supports multiple programming languages, Dodona does not support this at the moment.")]),t._v(" "),e("li",[t._v("We indicate it is a private exercise.")])]),t._v(" "),e("h3",{attrs:{id:"_4-writing-the-problem-statement"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-writing-the-problem-statement"}},[t._v("#")]),t._v(" 4. Writing the problem statement")]),t._v(" "),e("p",[t._v("The problem statement instructs students on how to solve the exercise.\nThis is again a Dodona thing; there is nothing TESTed-specific.\nMore information is thus again found in the "),e("a",{attrs:{href:"/en/references/exercise-description"}},[t._v("relevant manual")]),t._v(".")]),t._v(" "),e("p",[t._v("To make things easier, we'll use the problem statement from above and add an example.\nCreate a file "),e("code",[t._v("write/description/description.en.md")]),t._v(" with the following content:")]),t._v(" "),e("div",{staticClass:"language-markdown extra-class"},[e("pre",{pre:!0,attrs:{class:"language-markdown"}},[e("code",[t._v("Write a function "),e("span",{pre:!0,attrs:{class:"token code-snippet code keyword"}},[t._v("`write`")]),t._v(" that writes its argument to stdout.\n\nThe argument of the function will always be a string.\n\n"),e("span",{pre:!0,attrs:{class:"token title important"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("###")]),t._v(" Example in Python")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token code"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("```")]),e("span",{pre:!0,attrs:{class:"token code-language"}},[t._v("pycon")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token code-block language-pycon"}},[t._v('>>> write("5");\n"5"\n>>> write("OK");\n"OK"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("```")])]),t._v("\n")])])]),e("p",[t._v("As a check, the file structure should now look like this:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("├── write/\n|   ├── config.json\n|   ├── evaluation/\n|   ├── description/\n|   |   └── description.en.md\n")])])]),e("h3",{attrs:{id:"_5-specifying-the-test-suite"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-specifying-the-test-suite"}},[t._v("#")]),t._v(" 5. Specifying the test suite")]),t._v(" "),e("p",[t._v("This is one of the most important parts of creating an exercise: specifying the test suite.\nThis test suite contains all test cases that will be executed on the submission to check if the submission is correct.")]),t._v(" "),e("p",[t._v("To keep this tutorial short, we only use one test case here, but a real test suite would contain more test cases.")]),t._v(" "),e("p",[t._v("Create a new file "),e("code",[t._v("evaluation/testsuite.json")]),t._v(":")]),t._v(" "),e("div",{staticClass:"language-json extra-class"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"tabs"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"name"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Write"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"runs"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"contexts"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"testcases"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n         "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"input"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"function"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"name"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"write"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"arguments"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n           "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"text"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"data"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"input-1"')]),t._v("\n           "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n          "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n         "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n         "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"output"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"stdout"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n           "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"text"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n           "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"data"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"input-1"')]),t._v("\n          "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n         "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n       "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n     "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("This test suite defines a few things:")]),t._v(" "),e("ol",[e("li",[t._v("We have one tab, with the name "),e("em",[t._v("Write")]),t._v(".")]),t._v(" "),e("li",[t._v("We define one test case in that tab.")]),t._v(" "),e("li",[t._v("The test case calls the function "),e("code",[t._v("write")]),t._v(" with one argument, the string "),e("code",[t._v("input-1")]),t._v(".\nConceptually, this is equivalent to "),e("code",[t._v('write("input-1")')]),t._v(".")]),t._v(" "),e("li",[t._v("We expect "),e("code",[t._v("input-1")]),t._v(" on stdout.")])]),t._v(" "),e("p",[t._v("The file structure now looks like this:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("├── write/\n|   ├── config.json\n|   ├── evaluation/\n|   |   └── testplan.json\n|   ├── description/\n|   |   └── description.en.md\n")])])]),e("h3",{attrs:{id:"_6-add-exercise-to-dodona"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-add-exercise-to-dodona"}},[t._v("#")]),t._v(" 6. Add exercise to Dodona")]),t._v(" "),e("p",[t._v("Now we must commit the changes with "),e("code",[t._v("git")]),t._v(":")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-m")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"My first exercise"')]),t._v("\n")])])]),e("p",[t._v("Next, we must push the changes to our repository.")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push\n")])])]),e("p",[t._v("The exercise is now done.\nYou should be able to use the exercise on Dodona.")])],1)}),[],!1,null,null,null);s.default=n.exports}}]);