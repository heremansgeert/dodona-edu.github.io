(window.webpackJsonp=window.webpackJsonp||[]).push([[113],{831:function(e,t,n){"use strict";n.r(t);var a=n(26),s=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"configuratie-van-een-programmeertaal"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#configuratie-van-een-programmeertaal"}},[e._v("#")]),e._v(" Configuratie van een programmeertaal")]),e._v(" "),n("p",[e._v("In deze handleiding leggen we stap voor stap uit hoe je een nieuwe\nprogrammeertaal kunt configureren voor TESTed. We doen dit met de\nconfiguratie voor programmeertaal C. Hierbij alvast enkele nuttige links die\nkunnen helpen bij het volgen van deze handleiding:")]),e._v(" "),n("ul",[n("li",[e._v("Bestaande configuraties: "),n("a",{attrs:{href:"https://github.com/dodona-edu/universal-judge/tree/master/tested/languages",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/dodona-edu/universal-judge/tree/master/tested/languages"),n("OutboundLink")],1)]),e._v(" "),n("li",[e._v("Testoefeningen: "),n("a",{attrs:{href:"https://github.com/dodona-edu/universal-judge/tree/master/exercise",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/dodona-edu/universal-judge/tree/master/exercise"),n("OutboundLink")],1)])]),e._v(" "),n("p",[e._v("In deze handleiding tonen we regelmatig codebestanden, verspreid over meerdere\ncodefragmenten (bijvoorbeeld eerst "),n("code",[e._v("n")]),e._v(" regels, daarna wat tekst en dan pas de\nrest van de regels).")]),e._v(" "),n("h2",{attrs:{id:"tested-lokaal-uitvoeren"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#tested-lokaal-uitvoeren"}},[e._v("#")]),e._v(" TESTed lokaal uitvoeren")]),e._v(" "),n("p",[e._v("Tijdens het configureren van een programmeertaal is het nuttig om TESTed lokaal\nuit te voeren, zonder daarvoor het volledige Dodona-platform te moeten\nuitvoeren. Buiten de "),n("em",[e._v("dependencies")]),e._v(" voor de bestaande programmeertalen is TESTed\neen Python-package dat op de normale manier kan uitgevoerd worden.")]),e._v(" "),n("h3",{attrs:{id:"de-broncode"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#de-broncode"}},[e._v("#")]),e._v(" De broncode")]),e._v(" "),n("p",[e._v("Na het klonen van de repository van TESTed beschikken we over volgende\nmappenstructuur:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("universal-judge\n├── docker/ # Een Docker-image om TESTed uit te voeren.\n├── exercise/ # De map met oefeningen die dienen als voorbeeld en voor de tests.\n├── tested/ # Broncode van TESTed.\n├── tests/ # Testcode van TESTed.\n├── workdir/ # De uitvoer van TESTed bij manuele uitvoer.\n├── config.json # Configuratiebestand voor gebruik in Dodona.\n└── run # Wordt gebruikt door Dodona om TESTed uit te voeren.\n")])])]),n("h3",{attrs:{id:"vereisten"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vereisten"}},[e._v("#")]),e._v(" Vereisten")]),e._v(" "),n("p",[e._v("TESTed gebruikt Python 3.9 of later. Zoals gebruikelijk bij Python-projecten,\nworden de dependencies van TESTed opgelijst in een "),n("code",[e._v("requirements.txt")]),e._v("-bestand.\nVereisten voor het uitvoeren van tests staan in "),n("code",[e._v("requirements-test.txt")]),e._v(". Het\ninstalleren van deze vereisten gebeurt op de gebruikelijke manier:")]),e._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" pip "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" -r requirements.txt\n")])])]),n("p",[e._v("De programmeertalen die momenteel in TESTed geconfigureerd zijn, hebben de\nvolgende dependencies:")]),e._v(" "),n("ul",[n("li",[n("p",[n("strong",[e._v("Python")]),e._v(": Vereist Python 3.9. Als de linter gebruikt wordt, dan heb je\n"),n("code",[e._v("pylint")]),e._v(" nodig. Daarnaast moet "),n("code",[e._v("python")]),e._v(" beschikbaar zijn in het "),n("code",[e._v("PATH")]),e._v(". Door\noptimalisaties die TESTed intern doorvoert, is het momenteel aan te raden om\ndezelfde Python-versie te gebruiken voor TESTed als voor de Python-oefeningen.")])]),e._v(" "),n("li",[n("p",[n("strong",[e._v("Java")]),e._v(": Vereist Java 11, maar heeft verder geen dependencies. De commando's\n"),n("code",[e._v("javac")]),e._v(" en "),n("code",[e._v("java")]),e._v(" moeten beschikbaar zijn in het "),n("code",[e._v("PATH")]),e._v(".")])]),e._v(" "),n("li",[n("p",[n("strong",[e._v("JavaScript")]),e._v(": Vereist NodeJS v14 of later en vereist de\nmodule "),n("a",{attrs:{href:"https://www.npmjs.com/package/abstract-syntax-tree",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("abstract-syntax-tree@2.17.6")]),n("OutboundLink")],1),e._v(".\nHet commando "),n("code",[e._v("node")]),e._v(" moet beschikbaar zijn in het "),n("code",[e._v("PATH")]),e._v(" en de module\n"),n("code",[e._v("abstract-syntax-tree@2.17.6")]),e._v(" moet globaal beschikbaar zijn.")])]),e._v(" "),n("li",[n("p",[n("strong",[e._v("Kotlin")]),e._v(": Vereist Kotlin 1.4.10, maar heeft verder geen dependencies. De\ncommando's "),n("code",[e._v("kotlinc")]),e._v(" en "),n("code",[e._v("kotlin")]),e._v(" moeten beschikbaar zijn in het "),n("code",[e._v("PATH")]),e._v(".")])]),e._v(" "),n("li",[n("p",[n("strong",[e._v("Haskell")]),e._v(": Voor Haskell is GHC 8.6 ("),n("code",[e._v("ghc")]),e._v(") of later nodig. Daarnaast heb je\nook "),n("code",[e._v("aeson")]),e._v(" nodig. Beide commando's moeten globaal beschikbaar zijn in het\n"),n("code",[e._v("PATH")]),e._v(".")])]),e._v(" "),n("li",[n("p",[n("strong",[e._v("Bash")]),e._v(": Vereist bash 5.0.3 of later, maar heeft verder geen dependencies.\nHet commando "),n("code",[e._v("bash")]),e._v(" moet beschikbaar zijn in het "),n("code",[e._v("PATH")]),e._v(".")])])]),e._v(" "),n("p",[e._v("Merk op dat de dependencies voor de programmeertalen optioneel zijn. Om\nbijvoorbeeld enkel Python-oplossingen te beoordelen, heb je de dependencies voor\nde andere programmeertalen niet nodig.")]),e._v(" "),n("p",[e._v("Voor de programmeertaal C gaan we gebruikmaken van de GCC, meer specifiek versie\n8.1 of later van de compiler.")]),e._v(" "),n("p",[e._v("TESTed werkt op elk besturingssysteem dat ondersteund wordt door Python. Sommige\ndependencies, zoals GCC, vragen wel meer moeite om te installeren op Windows.")]),e._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[e._v("Windows tip")]),e._v(" "),n("p",[e._v("We raden Windows 10 gebruikers aan om het\n"),n("a",{attrs:{href:"https://ubuntu.com/wsl",target:"_blank",rel:"noopener noreferrer"}},[e._v("Windows Subsystem for Linux"),n("OutboundLink")],1),e._v(" te gebruiken.")]),e._v(" "),n("p",[e._v("Wanneer dit niet mogelijk is, kunnen Windows gebruikers MingW of MSYS2 proberen.")])]),e._v(" "),n("h3",{attrs:{id:"uitvoeren"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#uitvoeren"}},[e._v("#")]),e._v(" Uitvoeren")]),e._v(" "),n("p",[e._v("We gaan er voor de rest van de handleiding van uit dat commando's uitgevoerd\nworden in de map "),n("code",[e._v("./")]),e._v(".")]),e._v(" "),n("p",[e._v('Er zijn twee manieren om TESTed uit te voeren. Ten eerste is er de "gewone"\nmanier; dit is ook hoe Dodona TESTed uitvoert. Bij het uitvoeren op deze manier\nzal TESTed een configuratie lezen van '),n("code",[e._v("stdin")]),e._v(" en zal TESTed het resultaat van de\nbeoordeling in Dodona-formaat uitgeschreven worden naar "),n("code",[e._v("stdout")]),e._v(".")]),e._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" python -m tested\n")])])]),n("p",[e._v("Bij het configureren van een programmeertaal of het werken aan TESTed is het\nechter nuttiger om meer uitvoer te zien en is het vervelend om telkens een\nconfiguratie te lezen vanop "),n("code",[e._v("stdin")]),e._v(". Daarom is er een tweede manier:")]),e._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" python -m tested.manual\n")])])]),n("p",[e._v("Deze uitvoer verschilt op een aantal vlakken van de gewone uitvoering:")]),e._v(" "),n("ol",[n("li",[e._v("Er wordt geen configuratie gelezen van "),n("code",[e._v("stdin")]),e._v(". De configuratie is\ngedefinieerd in de code zelf en gebruikt een van de oefeningen die in de map\n"),n("code",[e._v("exercise")]),e._v(" zitten.")]),e._v(" "),n("li",[e._v("Er worden, naast de resultaten van de beoordeling, logs uitgeschreven naar\n"),n("code",[e._v("stdout")]),e._v(" die aangeven wat TESTed doet. Als er bijvoorbeeld een fout optreedt\ntijdens het compileren zullen deze logs nuttig zijn: zo wordt uitgeschreven\nwelk commando TESTed exact uitvoert voor de compilatie en ook in welke map\ndat gebeurt.")]),e._v(" "),n("li",[e._v("De configuratie is zo opgesteld dat de werkmap van de judge de map "),n("code",[e._v("workdir")]),e._v("\nzal zijn. Dit laat toe om de gegenereerde code te inspecteren.")])]),e._v(" "),n("h2",{attrs:{id:"globaal-stappenplan"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#globaal-stappenplan"}},[e._v("#")]),e._v(" Globaal stappenplan")]),e._v(" "),n("p",[e._v("Het configureren van een programmeertaal bestaat uit drie grote onderdelen:")]),e._v(" "),n("ol",[n("li",[e._v("Het configuratiebestand, met enkele opties voor de programmeertaal. Het\ntypeconfiguratiebestand, met de benaming van de gegevenstypes.")]),e._v(" "),n("li",[e._v("De configuratieklasse, met de meer dynamische opties, zoals het\ncompilatiecommando.")]),e._v(" "),n("li",[e._v("De sjablonen, die gebruikt worden om code te genereren.")])]),e._v(" "),n("p",[e._v("TESTed voorziet een hulpmiddel om de bestanden op de juiste plaats te genereren.\nOp basis van enkele vragen worden "),n("em",[e._v("stubs")]),e._v(" gegenereerd voor het\nconfiguratiebestand, de configuratieklasse en de sjablonen.\nDit hulpmiddel kan als volgt uitgevoerd worden:")]),e._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" python -m tested.generation\n")])])]),n("p",[e._v("Merk op dat dit enkel bestanden genereert. De stappen in\n"),n("a",{attrs:{href:"#programmeertaal-registreren"}},[e._v("Programmeertaal registreren")]),e._v(" voor het registreren van de nieuwe programmeertaal\nin TESTed zijn nog steeds nodig.")]),e._v(" "),n("p",[e._v("We overlopen nu elk onderdeel in functie van de programmeertaal C. We gaan er\ntelkens vanuit dat bovenstaande hulpmiddel niet gebruikt is en dat de bestanden\ndus nog moeten gemaakt worden. Is bovenstaande hulpmiddel wel gebruikt, dan\nkunnen de instructies voor het maken van bestanden genegeerd worden.")]),e._v(" "),n("h2",{attrs:{id:"de-programmeertaal-c"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#de-programmeertaal-c"}},[e._v("#")]),e._v(" De programmeertaal C")]),e._v(" "),n("p",[e._v("Voor we beginnen aan de configuratie, overlopen we kort welke functionaliteit we\nwillen ondersteunen: welke functionaliteit uit C kunnen we aanbieden in TESTed\nen welke functionaliteit uit TESTed kunnen we implementeren in C? Uiteraard\nwillen we zoveel mogelijk ondersteunen, maar vooral op het vlak van\ngegevenstypes zijn er momenteel enkele beperkingen.")]),e._v(" "),n("h5",{attrs:{id:"welke-basistypes-gaan-we-niet-ondersteunen"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#welke-basistypes-gaan-we-niet-ondersteunen"}},[e._v("#")]),e._v(" Welke basistypes gaan we niet ondersteunen?")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("sequence")]),e._v(": Arrays zijn een speciaal geval in C. Statische arrays kunnen\nbijvoorbeeld niet als returnwaarde dienen, en ook als functieargument zijn ze\nniet ideaal. Dynamische arrays nemen de vorm aan van een pointer en een\ngrootte. TESTed heeft momenteel geen ondersteuning voor gegevenstypes die als twee\nwaarden geïmplementeerd moeten worden, dus worden arrays momenteel niet\nondersteund.")]),e._v(" "),n("li",[n("code",[e._v("set")]),e._v(": C heeft geen ingebouwde verzamelingen.")]),e._v(" "),n("li",[n("code",[e._v("map")]),e._v(": C heeft geen ingebouwde map of dict. Er zijn wel structs, maar daarvan\nis het niet mogelijk om de velden "),n("em",[e._v("at runtime")]),e._v(" op te vragen, waardoor we ze\nniet kunnen serialiseren.")])]),e._v(" "),n("h5",{attrs:{id:"welke-geavanceerde-types-gaan-we-niet-ondersteunen"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#welke-geavanceerde-types-gaan-we-niet-ondersteunen"}},[e._v("#")]),e._v(" Welke geavanceerde types gaan we niet ondersteunen?")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("big_int")]),e._v(": C heeft geen ingebouwd type voor getallen van arbitraire grootte.")]),e._v(" "),n("li",[n("code",[e._v("fixed_precision")]),e._v(": C heeft geen ingebouwd type voor kommagetallen met\nwillekeurige precisie.")]),e._v(" "),n("li",[n("strong",[e._v("Andere datastructuren")]),e._v(": Het gaat hier om datastructuren zoals "),n("code",[e._v("array")]),e._v(" en\n"),n("code",[e._v("list")]),e._v(" (om dezelfde redenen als hierboven). Ook "),n("code",[e._v("tuple")]),e._v(" wordt niet\nondersteund, omdat het niet bestaat in C.")])]),e._v(" "),n("h3",{attrs:{id:"locatie-van-de-configuratiecode"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#locatie-van-de-configuratiecode"}},[e._v("#")]),e._v(" Locatie van de configuratiecode")]),e._v(" "),n("p",[e._v("De eerste stap bij het configureren van een nieuwe programmeertaal voor TESTed\nis het aanmaken van een map waarin we de code voor de configuratie zullen\nzetten. Deze map moet de naam van de programmeertaal krijgen en op de juiste\nplaats binnen TESTed aanwezig zijn.")]),e._v(" "),n("p",[e._v("Voor de programmeertaal C maken we een nieuwe map "),n("code",[e._v("tested/languages/c")]),e._v(". Na het\naanmaken van de map moet de mappenstructuur er zo uitzien:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("universal-judge/\n├─ tested/\n│ ├─ languages/\n│ │ ├── c/ <- nieuwe map\n│ │ ├── haskell/\n│ │ ├── java/\n│ │ ├── python/\n│ │ ├── config.py\n│ │ ...\n│ ...\n...\n")])])]),n("h3",{attrs:{id:"configuratiebestanden"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#configuratiebestanden"}},[e._v("#")]),e._v(" Configuratiebestanden")]),e._v(" "),n("p",[e._v("Het configuratiebestand is een JSON-bestand met enkele eigenschappen van de\nprogrammeertaal. Dit configuratiebestand maakt het implementeren van de\nconfiguratieklasse een stuk eenvoudiger, omdat de implementatie van die klasse\ndaardoor veel minder lang zal zijn. Maak eerst het configuratiebestand aan:\n"),n("code",[e._v("tested/languages/c/config.json")]),e._v(".")]),e._v(" "),n("p",[e._v("Merk op dat het configuratiebestand slechts een hulpmiddel is: indien gewenst\nkunnen al deze opties ook ingesteld worden door de juiste methodes te\nimplementeren in de configuratieklasse, maar we verwachten dat dit in veel\ngevallen niet nodig zal zijn.")]),e._v(" "),n("h4",{attrs:{id:"algemene-opties"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#algemene-opties"}},[e._v("#")]),e._v(" Algemene opties")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("general.dependencies")]),e._v(": Dit zijn bestanden die beschikbaar zullen zijn tijdens\nhet compileren en tijdens het uitvoeren van de beoordeling. Dit betekent dat\ndeze dependencies gebruikt kunnen worden in de testcode voor de contexten en\nde evaluatiecode voor de geprogrammeerde en programmeertaalspecifieke code. In\nhet geval van C is dit de "),n("code",[e._v("values")]),e._v("-module, waarvan we de implementatie later\nbespreken. Deze dependencies zijn bedoeld om gebruikt te worden in de code\ngegenereerd door de sjablonen, niet in de ingediende oplossing (hoewel dat\nmomenteel technisch mogelijk is).")]),e._v(" "),n("li",[n("code",[e._v("general.selector")]),e._v(": Dit geeft aan of de programmeertaal gebruikmaakt van een\nselector tijdens het uitvoeren van code die gecompileerd is in\nbatchcompilatie. Voor de meeste talen met compilatie zal dit "),n("code",[e._v("true")]),e._v(" zijn. Zo\nook bij C.")]),e._v(" "),n("li",[n("code",[e._v("extensions.file")]),e._v(": Geeft de voornaamste bestandsextensie aan van de bestanden.\nMet voornaamste bedoelen we de extensie van de bestanden die gegenereerd\nworden. Bijvoorbeeld in C bestaan zowel "),n("code",[e._v(".h")]),e._v(" en "),n("code",[e._v(".c")]),e._v(", maar de gegenereerde\ncode gebruikt "),n("code",[e._v(".c")]),e._v(".")]),e._v(" "),n("li",[n("code",[e._v("extensions.templates")]),e._v(": - wordt gebruikt om aan te geven welke extensies\ngebruikt worden voor de sjablonen. Standaard is dit de bestandsextensie van\nhierboven en "),n("code",[e._v(".mako")]),e._v(". Het is dus vaak niet nodig om dit op te geven.")])]),e._v(" "),n("div",{staticClass:"language-json extra-class"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"general"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"dependencies"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"values.h"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"values.c"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"evaluation_result.h"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"evaluation_result.c"')]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"selector"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"extensions"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"file"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"c"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"templates"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"c"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"mako"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n")])])]),n("h4",{attrs:{id:"codestijl"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#codestijl"}},[e._v("#")]),e._v(" Codestijl")]),e._v(" "),n("p",[e._v("Namen van componenten van programmeertalen zoals functies en namespaces worden\nomgezet in functie van de codestijl die gebruikelijk is in de programmeertaal:")]),e._v(" "),n("div",{staticClass:"language-json extra-class"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"naming_conventions"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"function"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"snake_case"')]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"namespace"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"snake_case"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n")])])]),n("p",[e._v("De mogelijke waarden zijn:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("snake_case")]),e._v(": Tussen elk woord staat een underscore: "),n("code",[e._v("dit_is_een_voorbeeld")]),e._v(".")]),e._v(" "),n("li",[n("code",[e._v("macro_case")]),e._v(": Tussen elk woord staat een underscore,\nen alle letters zijn hoofdletters: "),n("code",[e._v("DIT_IS_EEN_VOORBEELD")]),e._v(".")]),e._v(" "),n("li",[n("code",[e._v("camel_case")]),e._v(": Elk woord, buiten het eerste, start met een hoofdletter:\n"),n("code",[e._v("ditIsEenVoorbeeld")]),e._v(". Deze variant wordt ook wel "),n("em",[e._v("lowerCamelCase")]),e._v(" genoemd.")]),e._v(" "),n("li",[n("code",[e._v("pascal_case")]),e._v(": Elk woord, ook het eerste, start met een hoofdletter:\n"),n("code",[e._v("DitIsEenVoorbeeld")]),e._v(". Deze variant wordt ook wel "),n("em",[e._v("UpperCamelCase")]),e._v(" genoemd.")]),e._v(" "),n("li",[n("code",[e._v("camel_snake_case")]),e._v(": Elk woord, buiten het eerste, start met een hoofdletter\nen tussen elk woord staat een underscore: "),n("code",[e._v("dit_Is_Een_Voorbeeld")]),e._v(".")]),e._v(" "),n("li",[n("code",[e._v("pascal_snake_case")]),e._v(": Elk woord, ook het eerste, start met een hoofdletter\nen tussen elk woord staat een underscore: "),n("code",[e._v("Dit_Is_Een_Voorbeeld")]),e._v(".")]),e._v(" "),n("li",[n("code",[e._v("dash_case")]),e._v(": Tussen elk woord staat een liggend streepje: "),n("code",[e._v("dit-is-een-voorbeeld")]),e._v(".")]),e._v(" "),n("li",[n("code",[e._v("train_case")]),e._v(": Tussen elk woord staat een liggend streepje\nen elk woord start met een hoofdletter: "),n("code",[e._v("Dit-Is-Een-Voorbeeld")]),e._v(".")]),e._v(" "),n("li",[n("code",[e._v("cobol_case")]),e._v(": Tussen elk woord staat een liggend streepje\nen alle letters zijn hoofdletters: "),n("code",[e._v("DIT-IS-EEN-VOORBEELD")]),e._v(".")]),e._v(" "),n("li",[n("code",[e._v("donor_case")]),e._v(": Tussen elk woord staat een verticale streep: "),n("code",[e._v("dit|is|een|voorbeeld")]),e._v(".")]),e._v(" "),n("li",[n("code",[e._v("flat_case")]),e._v(": Alle woorden zijn aan elkaar geschreven: "),n("code",[e._v("ditiseenvoorbeeld")]),e._v(".")]),e._v(" "),n("li",[n("code",[e._v("upper_flat_case")]),e._v(": Alle woorden zijn aan elkaar geschreven\nen alle letters zijn hoofdletters: "),n("code",[e._v("DITISEENVOORBEELD")]),e._v(".")])]),e._v(" "),n("p",[e._v("De mogelijke componenten zijn:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("namespace")]),e._v(": Stijlconventie van de naamruimte van de code.")]),e._v(" "),n("li",[n("code",[e._v("function")]),e._v(": Stijlconventie voor de functienamen.")]),e._v(" "),n("li",[n("code",[e._v("identifier")]),e._v(": Stijlconventie voor de lokale variabelenamen.")]),e._v(" "),n("li",[n("code",[e._v("global_identifier")]),e._v(": Stijlconventie voor de globale variabelenamen.")]),e._v(" "),n("li",[n("code",[e._v("property")]),e._v(": Stijlconventie voor de eigenschapsnamen.")]),e._v(" "),n("li",[n("code",[e._v("class")]),e._v(": Stijlconventie voor de klassennamen.")])]),e._v(" "),n("p",[e._v("Standaard wordt "),n("code",[e._v("snake_case")]),e._v(" gebruikt, dus bij C is het niet strikt nodig om\ndeze optie in de configuratie op te nemen.")]),e._v(" "),n("h4",{attrs:{id:"functionaliteit"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#functionaliteit"}},[e._v("#")]),e._v(" Functionaliteit")]),e._v(" "),n("p",[e._v("De laatste twee blokken in de configuratie geven aan welke constructies en\ngegevenstypes de programmeertaal ondersteunt. We hebben al besproken welke\nfunctionaliteit we willen ondersteunen en welke niet. We beginnen met het\nvastleggen van de taalconstructies:")]),e._v(" "),n("div",{staticClass:"language-json extra-class"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"constructs"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"objects"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"exceptions"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"function_calls"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"assignments"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"heterogeneous_collections"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"heterogeneous_arguments"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"evaluation"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"named_arguments"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"default_parameters"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"global_variables"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n")])])]),n("p",[e._v("Hier kan voor elke taalconstructie met een "),n("code",[e._v("boolean")]),e._v(" opgegeven worden of ze\nondersteund wordt of niet. Standaard wordt geen enkele taalconstructie\nondersteund. Dit zorgt ervoor dat alle ondersteunde constructies expliciet in\nhet configuratiebestand staan en dat nieuwe taalconstructies aan TESTed kunnen\ntoegevoegd worden zonder dat bestaande configuraties van programmeertalen\naangepast moeten worden.")]),e._v(" "),n("p",[e._v("De mogelijke taalconstructies staat opgelijst in de enum\n"),n("code",[e._v("tested.features.Construct")]),e._v(". Hieronder volgt een lijst van elke taalconstructie\nen een korte beschrijving:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("objects")]),e._v(": Objectgeoriënteerde zaken zoals klassen.")]),e._v(" "),n("li",[n("code",[e._v("exceptions")]),e._v(": Exceptions en uitzonderingen.")]),e._v(" "),n("li",[n("code",[e._v("function_calls")]),e._v(": Functieoproepen. Merk op dat constructors in het testplan\neen speciale soort functie zijn die afhangen van de taalconstructie "),n("code",[e._v("objects")]),e._v(".")]),e._v(" "),n("li",[n("code",[e._v("assignments")]),e._v(': Het toekennen van een waarde aan een variabele. Een\n"assignment" moet ruim geïnterpreteerd worden als ondersteuning voor iets dat\nneerkomt op een '),n("em",[e._v("assigment")]),e._v(". Zo kent Haskell bijvoorbeeld geen assignments:\n"),n("code",[e._v("x = 5")]),e._v(" definieert technisch gezien een functie met een constante returnwaarde\n"),n("code",[e._v("5")]),e._v(". Dit moet ook onder "),n("code",[e._v("assignments")]),e._v(" gerekend worden.")]),e._v(" "),n("li",[n("code",[e._v("heterogeneous_collections")]),e._v(": Hiermee bedoelen we collecties met elementen die\nverschillende gegevenstypes hebben. Dit is bijvoorbeeld geen probleem in\nPython ("),n("code",[e._v("[5, 52.23]")]),e._v("), gaat al iets moeilijker in Java\n("),n("code",[e._v("List<Object> = List.of(1, 52.23)")]),e._v("), maar zal bijvoorbeeld niet lukken in\nHaskell.")]),e._v(" "),n("li",[n("code",[e._v("heterogeneous_arguments")]),e._v(": Hiermee bedoelen we functieoproepen waarbij\ndezelfde functie kan opgeroepen worden met argumenten die verschillende\ngegevenstypes kunnen hebben (bijvoorbeeld eerst "),n("code",[e._v("check(True)")]),e._v(" en daarna\n"),n("code",[e._v("check('hallo')")]),e._v("). Dit zal lukken in Python en Java, maar niet in Haskell en\nC.")]),e._v(" "),n("li",[n("code",[e._v("evaluation")]),e._v(": Geeft aan of een geprogrammeerde evaluatie mogelijk is in deze\nprogrammeertaal. Dit is technisch gezien geen taalconstructie, maar dezelfde\ninfrastructuur wordt gebruikt om dit te controleren.")]),e._v(" "),n("li",[n("code",[e._v("named_arguments")]),e._v(": Geeft aan of benoemde argumenten ondersteund worden. Dit\nbetekent dat de argumenten voor een functie niet enkel positioneel, maar ook\nop naam kunnen doorgegeven worden.")]),e._v(" "),n("li",[n("code",[e._v("default_parameters")]),e._v(": Geeft aan of de programmeertaal standaardwaarden voor\nparameters ondersteunt, wat betekent dat ze kunnen weggelaten worden bij het\naanroepen van de functie.")]),e._v(" "),n("li",[n("code",[e._v("global_variables")]),e._v(": Geeft aan of de programmeertaal ondersteuning biedt voor\nglobale variabelen.")])]),e._v(" "),n("p",[e._v("Dan moeten we nu de ondersteuning voor de gegevenstypes vastleggen:")]),e._v(" "),n("div",{staticClass:"language-json extra-class"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"datatypes"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"integer"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"supported"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"rational"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"supported"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"char"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"supported"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"text"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"supported"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"boolean"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"supported"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"sequence"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"unsupported"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"set"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"unsupported"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"map"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"unsupported"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"nothing"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"supported"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"int8"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"supported"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"uint8"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"supported"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"int16"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"supported"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"uint16"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"supported"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"int32"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"supported"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"uint32"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"supported"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"int64"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"supported"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"uint64"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"supported"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"bigint"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"reduced"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"single_precision"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"supported"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"double_precision"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"supported"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"double_extended"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"supported"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"fixed_precision"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"unsupported"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"array"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"unsupported"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"list"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"unsupported"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"tuple"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"unsupported"')]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n")])])]),n("p",[e._v("Er zijn twee soorten gegevenstypes in TESTed: basistypes en geavanceerde types.\nBasistypes zijn abstracte types voor concepten zoals een sequentie of een geheel\ngetal, terwijl geavanceerde types concreter zijn (zoals een geheel getal van 8\nbits). Een gegevenstype kan drie niveaus van ondersteuning hebben:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("supported")]),e._v(": Volledige ondersteuning.")]),e._v(" "),n("li",[n("code",[e._v("reduced")]),e._v(": Wordt ondersteund maar herleid tot een basistype (bijvoorbeeld een\n"),n("code",[e._v("list")]),e._v(" wordt geïnterpreteerd als een "),n("code",[e._v("sequence")]),e._v(").")]),e._v(" "),n("li",[n("code",[e._v("unsupported")]),e._v(": Geen ondersteuning. Dit is de standaardwaarde.")])]),e._v(" "),n("p",[e._v("Een opmerking hierbij is dat de status "),n("code",[e._v("reduced")]),e._v(" voor basistypes gelijkwaardig\nis aan "),n("code",[e._v("supported")]),e._v(": een basistype reduceren tot een basistype blijft hetzelfde\ntype.")]),e._v(" "),n("p",[e._v("Het is de bedoeling dat de meeste programmeertalen voor het merendeel van de\ngegevenstypes minstens "),n("code",[e._v("reduced")]),e._v(" hebben. Toch is gekozen om "),n("code",[e._v("unsupported")]),e._v(" als\nstandaardwaarde te nemen. Dit zorgt ervoor dat de ondersteunde gegevenstypes\nexpliciet uitgeschreven zijn. Dit laat ook toe om gegevenstypes toe te voegen\naan TESTed zonder bestaande configuraties van programmeertalen te moeten\naanpassen. Als illustratie hebben we hierboven voor de programmeertaal C alle\ngegevenstypes vermeld, ook de niet-ondersteunde gegevenstypes.")]),e._v(" "),n("h4",{attrs:{id:"beperkingen-op-elementen-van-verzamelingen-en-sleutels-van-afbeeldingen"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#beperkingen-op-elementen-van-verzamelingen-en-sleutels-van-afbeeldingen"}},[e._v("#")]),e._v(" Beperkingen op elementen van verzamelingen en sleutels van afbeeldingen")]),e._v(" "),n("p",[e._v("Sommige programmeertalen leggen beperkingen op wat betreft de gegevenstypes voor\nelementen van verzamelingen en sleutels van afbeeldingen ("),n("em",[e._v("maps")]),e._v("). Hiervoor\nmoeten er twee lijsten opgegeven worden: "),n("code",[e._v("restrictions.map_key")]),e._v(" en\n"),n("code",[e._v("restrictions.set")]),e._v(". De elementen van deze lijsten zijn de "),n("code",[e._v("supported")]),e._v("\ngegevenstypes van TESTed die gebruikt kunnen worden. Daarnaast kun je opgeven\nof functieoproepen ("),n("code",[e._v("function_calls")]),e._v(") en variabelen ("),n("code",[e._v("identifiers")]),e._v(") gebruikt\nkunnen worden. De "),n("code",[e._v("reduced")]),e._v(" geavanceerde gegevenstypes zullen automatisch\nafgeleid worden als de basisgegevenstypes ondersteund worden.")]),e._v(" "),n("p",[e._v("De programmeertaal C ondersteunt geen collecties, waardoor beide lijsten dus\nleeg zijn.")]),e._v(" "),n("div",{staticClass:"language-json extra-class"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"restrictions"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"map_key"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"set"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),n("h3",{attrs:{id:"typeconfiguratiebestand"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#typeconfiguratiebestand"}},[e._v("#")]),e._v(" Typeconfiguratiebestand")]),e._v(" "),n("p",[e._v("Het typeconfiguratiebestand is een JSON-bestand met de benamingen van\ngegevenstypes en gebruikte conventies voor het visualiseren van een\nconsoleprompt. Dit configuratiebestand wordt gebruikt om opgavesjablonen (zie\n"),n("a",{attrs:{href:"../template-description"}},[e._v("Documentatie opgavesjablonen")]),e._v(") te instantiëren voor de\nprogrammeertaal. Maak eerst het configuratiebestand aan:\n"),n("code",[e._v("tested/languages/c/types.json")]),e._v(".")]),e._v(" "),n("h4",{attrs:{id:"informatie-voor-de-consoleprompt"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#informatie-voor-de-consoleprompt"}},[e._v("#")]),e._v(" Informatie voor de consoleprompt")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("console.name")]),e._v(": De gebruikte naam van de programmeertaal in de consoleprompt.\nBijvoorbeeld: "),n("code",[e._v("python")]),e._v(" voor Python en "),n("code",[e._v("c")]),e._v(" voor C.")]),e._v(" "),n("li",[n("code",[e._v("console.prompt")]),e._v(": Het promptsymbool voor de programmeertaal. Bijvoorbeeld:\n"),n("code",[e._v(">>>")]),e._v(" voor Python en "),n("code",[e._v(">")]),e._v(" voor C.")])]),e._v(" "),n("div",{staticClass:"language-json extra-class"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"console"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"name"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"c"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"prompt"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('">"')]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n")])])]),n("h4",{attrs:{id:"haakjes"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#haakjes"}},[e._v("#")]),e._v(" Haakjes")]),e._v(" "),n("p",[e._v("De gebruikte haakjes voor collectiegegevenstypes. Bijvoorbeeld: "),n("code",[e._v("[]")]),e._v(" voor de\nPython-collecties, "),n("code",[e._v("<>")]),e._v(" voor de generieke Java-objecten (behalve arrays, die\n"),n("code",[e._v("[]")]),e._v(" gebruiken). In TESTed worden geen collecties ondersteund voor de\nprogrammeertaal C, dus zullen we hiervoor Java en Haskell als voorbeeld nemen.")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("brackets.open")]),e._v(": Generiek openingshaakje.")]),e._v(" "),n("li",[n("code",[e._v("brackets.clase")]),e._v(": Generiek sluitingshaakje.")])]),e._v(" "),n("blockquote",[n("p",[e._v("Voorbeeld Java lijst: "),n("code",[e._v("List<?>")])])]),e._v(" "),n("ul",[n("li",[n("code",[e._v("brackets.<collection>.open")]),e._v(": Specifiek haakje open voor de collectie.")]),e._v(" "),n("li",[n("code",[e._v("brackets.<collection>.close")]),e._v(": Specifiek haakje sluiten voor de collectie.")])]),e._v(" "),n("blockquote",[n("p",[e._v("Voorbeeld Java integer array: "),n("code",[e._v("int[]")])]),e._v(" "),n("p",[e._v("Voorbeeld Haskell integer lijst: "),n("code",[e._v("[Int]")])])]),e._v(" "),n("h4",{attrs:{id:"gegevenstypes"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#gegevenstypes"}},[e._v("#")]),e._v(" Gegevenstypes")]),e._v(" "),n("p",[e._v("Naast console-informatie en haakjes moeten ook de namen van de ondersteunde\ngegevenstypes worden opgegeven. Verschillende programmeertalen gebruiken\nnamelijk verschillende namen voor wat in essentie dezelfde gegevenstypes zijn.\nDe programmeertaal C gebruikt de volgende namen:")]),e._v(" "),n("div",{staticClass:"language-json extra-class"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"integer"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"int"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"rational"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"double"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"char"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"char"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"text"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"char*"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"boolean"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"bool"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"nothing"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"void"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"int8"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"signed char"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"uint8"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"unsigned char"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"int16"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"short"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"uint16"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"unsigned short"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"int32"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"int"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"uint32"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"unsigned int"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"int64"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"long"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"uint64"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"unsigned long"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"bigint"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"long long"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"single_precision"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"float"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"double_precision"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"double"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"any"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"void*"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"inner"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n")])])]),n("p",[e._v("De volgende waarden worden ondersteund:")]),e._v(" "),n("ul",[n("li",[n("strong",[e._v("string")]),e._v(": Naam van het TESTed-gegevenstype in de programmeertaal.")]),e._v(" "),n("li",[n("strong",[e._v("boolean")]),e._v(": Alleen voor collectiegegevenstypes waarbij de notatie van het\ncollectietype uitsluitend met haakjes gebeurt.\n"),n("ul",[n("li",[n("code",[e._v("true")]),e._v(": Het gegevenstype van de gegevens in de collectie bevindt zich tussen\nde haakjes. Hierbij moeten de haakjes van het collectietype expliciet worden\nopgeven. Bijvoorbeeld een lijst in Haskell: "),n("code",[e._v("[Int]")])]),e._v(" "),n("li",[n("code",[e._v("false")]),e._v(": De haakjes bevinden zich achter het gegevenstype van de gegevens in\nde collectie. Hierbij moeten de haakjes van het collectietype expliciet\nworden opgeven. Bijvoorbeeld een array in Java: "),n("code",[e._v("int[]")])])])])]),e._v(" "),n("p",[e._v("Elk gegevenstype dat een andere naam moet krijgen in een collectie, moet\nopgegeven worden in het object "),n("code",[e._v("inner")]),e._v(". Dit geldt niet voor gegevenstypes\nwaarbij de haakjes achter het gegevenstype geplaatst worden. Bijvoorbeeld in\nJava: "),n("code",[e._v("Integer")]),e._v(" in plaats van "),n("code",[e._v("int")]),e._v(" voor "),n("code",[e._v("int32")]),e._v(".")]),e._v(" "),n("h4",{attrs:{id:"ondersteuning-voor-natuurlijke-talen"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ondersteuning-voor-natuurlijke-talen"}},[e._v("#")]),e._v(" Ondersteuning voor natuurlijke talen")]),e._v(" "),n("p",[e._v("In natuurlijke taal gebruiken verschillende programmeertalen andere namen voor\ncollectiegegevenstypes en "),n("code",[e._v("text")]),e._v(". Om deze verschillen te ondersteunen, wordt\ngevraagd om de gebruikte namen zowel het Engels als het Nederlands op te geven.\nDe vereiste velden zijn alle ondersteunde gegevenstypes die voor de\nprogrammeertaal ondersteund worden in TESTed, samen met de benaming voor het\ngegevenstype waarmee tekstuele data voorgesteld wordt.")]),e._v(" "),n("p",[e._v("Bijvoorbeeld: Een "),n("code",[e._v("sequence")]),e._v(" wordt in JavaScript een "),n("em",[e._v("array")]),e._v(" genoemd, terwijl\nmen in Python spreekt over een "),n("em",[e._v("lijst")]),e._v(".")]),e._v(" "),n("div",{staticClass:"language-json extra-class"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"natural"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"singular"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"en"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"text"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"string"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n      ...\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"nl"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"text"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"string"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n      ...\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"plural"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"en"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"text"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"strings"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n      ...\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"nl"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token property"}},[e._v('"text"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"strings"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n      ...\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),n("h3",{attrs:{id:"configuratieklasse"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#configuratieklasse"}},[e._v("#")]),e._v(" Configuratieklasse")]),e._v(" "),n("p",[e._v("De configuratieklasse vormt de schakel tussen de generieke aspecten van TESTed\nen haar programmeertaalafhankelijke gedrag. Omdat TESTed in Python geschreven\nis, moet deze klasse ook in Python geïmplementeerd worden.")]),e._v(" "),n("p",[e._v("Maak een nieuw Python-bestand "),n("code",[e._v("tested/languages/c/config.py")]),e._v(" aan. Hierin moet\neen klasse komen die van "),n("code",[e._v("Language")]),e._v(" overerft:")]),e._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("class")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("C")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("Language"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n")])])]),n("p",[e._v("In wat volgt overlopen we de verschillende methodes die geïmplementeerd moeten\nworden voor deze klasse. In de superklasse\n"),n("a",{attrs:{href:"https://github.com/dodona-edu/universal-judge/blob/master/tested/languages/config.py#L199",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("Language")]),n("OutboundLink")],1),e._v("\nworden de abstracte methodes voorzien van uitgebreide documentatie.")]),e._v(" "),n("h4",{attrs:{id:"code-compileren"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#code-compileren"}},[e._v("#")]),e._v(" Code compileren")]),e._v(" "),n("p",[e._v("Een eerste en belangrijke methode is de callback voor de compilatiestap:")]),e._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("compilation")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" bundle"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" Bundle"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" files"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" List"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("str")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" CallbackResult"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    main_file "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" files"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n    exec_file "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" Path"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("main_file"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("stem\n    result "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" executable_name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("exec_file"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"gcc"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"-std=c11"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"-Wall"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"evaluation_result.c"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"values.c"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n             main_file"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"-o"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" result"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("result"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),n("p",[e._v("De eerste parameter van deze methode is een klasse met enkele\nconfiguratie-opties zoals tijdslimiet, geheugenlimiet en\nprogrammeertaalspecifieke opties. Dit zou bijvoorbeeld kunnen gebruikt worden om\nde versie van C mee te geven (zoals C11 of C99). Dit wordt momenteel niet gedaan\nin C, want TESTed vereist C11, maar de mogelijkheid bestaat. We moeten wel\nopmerken dat de tijdslimiet zelden nuttig zal zijn, omdat TESTed zelf de\nuitvoeringstijd bijhoudt. In de configuratieklasse is het dus niet nodig om daar\nrekening mee te houden.")]),e._v(" "),n("p",[e._v("De andere parameter van deze methode is een lijst van bestanden waarvan TESTed\nvermoedt dat ze nuttig kunnen zijn voor de compilatiestap. Het bevat onder\nandere de dependencies uit het configuratiebestand, de ingediende oplossing en\nde uit de sjablonen gegenereerde bestanden. Die laatste bestanden zijn\nbijvoorbeeld de verschillende contexten bij batchcompilatie, maar kunnen ook de\nevaluator zijn bij een geprogrammeerde evaluatie. De bestanden bestaan uit de\nnaam en een bestandsextensie. De conventie is om het bestand met de main-functie\nals laatste element in de lijst te plaatsen.")]),e._v(" "),n("p",[e._v("Al deze bestanden zullen zich in de map bevinden waarin TESTed de compilatie zal\nuitvoeren. Het is niet verplicht om al deze bestanden ook effectief te\ngebruiken. Sommige programmeertalen hebben immers zelf een eigen detectiesysteem\nvoor bestanden. Zo is het in C voldoende om enkel het laatste bestand met de\nmain-functie te gebruiken. Alle andere bestanden worden gevonden door GCC.")]),e._v(" "),n("p",[e._v("Concreet ziet een argument voor deze parameter er bijvoorbeeld als volgt uit:")]),e._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'values.py'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'evaluation_utils.py'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'context_0_0.py'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])]),n("p",[e._v("Als returnwaarde moet deze methode een tuple met twee element teruggeven: het\ncompilatiecommando en een lijst van resulterende bestanden of een filter.")]),e._v(" "),n("p",[e._v("Het compilatiecommando neemt de vorm aan van een lijst met de elementen waaruit\nhet commando bestaat. Bij het uitvoeren van het commando zal deze lijst aan de\nPython-module "),n("code",[e._v("subprocess")]),e._v(" doorgegeven worden.")]),e._v(" "),n("p",[e._v("Na het uitvoeren van het compilatiecommando moet TESTed weten welke bestanden\nrelevant zijn om mee te nemen naar een volgende stap in de beoordeling. Daarom\nmoet een lijst van resulterende bestanden teruggegeven worden. Enkel bestanden\nin deze lijst zullen bijvoorbeeld beschikbaar zijn bij het uitvoeren van de\nruns. Een lijst van bestanden teruggeven is mogelijk indien "),n("em",[e._v("a priori")]),e._v(" geweten\nis welke bestanden de compilatiestap zal genereren. Dit is hier bijvoorbeeld het\ngeval (in C genereert de compiler één uitvoerbaar bestand), of ook bij Python\nwaar compiler voor elk "),n("code",[e._v(".py")]),e._v("-bestand een "),n("code",[e._v(".pyc")]),e._v("-bestand genereert. Ook in dit\ngeval moet de conventie gerespecteerd worden dat het bestand met de\n"),n("code",[e._v("main")]),e._v("-functie als laatste opgelijst wordt.")]),e._v(" "),n("p",[e._v("Het is echter niet altijd mogelijk om op voorhand te weten welke bestanden de\ncompiler zal genereren. Zo resulteert de compilatie van één "),n("code",[e._v(".java")]),e._v("-bestand\nmogelijk in meerdere "),n("code",[e._v(".class")]),e._v("-bestanden, afhankelijk van de inhoud van de\nbestanden. Om dit op te lossen kan in plaats van een lijst ook een filterfunctie\nteruggegeven worden. Nadat de compilatie uitgevoerd is, zal TESTed deze filter\ntoepassen op elk bestand in de map waarin de compilatie uitgevoerd werd. De\nfilterfunctie krijgt als argument de naam van een bestand en moet "),n("code",[e._v("True")]),e._v(" of\n"),n("code",[e._v("False")]),e._v(" teruggeven als het bestand respectievelijk wel of niet moet meegenomen\nworden naar een volgende stap.")]),e._v(" "),n("p",[e._v("Een voorbeeld van de in- en uitvoer van de compilatiemethode:")]),e._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" compilation"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'submission.c'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'evaluation_result.c'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'context_0_0.c'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'selector.c'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'gcc'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'-std=c11'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'-Wall'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'evaluation_result.c'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'values.c'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'selector.c'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n     "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'-o'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'selector.exe'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'selector.exe'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),n("p",[e._v("Als er een leeg compilatiecommando wordt teruggegeven, dan wordt er geen\ncompilatie gedaan. Dit is ook de standaardimplementatie van deze methode. Voor\nprogrammeertalen waar geen compilatie nodig is, moet deze methode niet\ngeïmplementeerd worden.")]),e._v(" "),n("h4",{attrs:{id:"testcode-uitvoeren"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#testcode-uitvoeren"}},[e._v("#")]),e._v(" Testcode uitvoeren")]),e._v(" "),n("p",[e._v("Na het compileren moeten we een methode implementeren om de gecompileerde code\nuit te voeren:")]),e._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("execution")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" config"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" Config"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n              cwd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" Path"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("file")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("str")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" arguments"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" List"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("str")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" Command"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    local_file "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" cwd "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v(" executable_name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("Path"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("file")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("stem"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("str")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("local_file"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("absolute"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("*")]),e._v("arguments"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])]),n("p",[e._v("Deze methode heeft vier parameters:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("config")]),e._v(": Dezelfde configuratie-opties als bij de compilatiemethode. Bij Java\nwordt dit bijvoorbeeld gebruikt om de geheugenlimiet van de JVM juist in te\nstellen.")]),e._v(" "),n("li",[n("code",[e._v("cwd")]),e._v(": De map waarin het uitvoeren plaatsvindt.")]),e._v(" "),n("li",[n("code",[e._v("file")]),e._v(": Het uitvoerbaar bestand dat moet uitgevoerd worden.")]),e._v(" "),n("li",[n("code",[e._v("arguments")]),e._v(": Argumenten die aan het proces moeten meegegeven worden.")])]),e._v(" "),n("p",[e._v("De methode moet als resultaat een commando teruggeven, dat door TESTed ook aan\n"),n("code",[e._v("subprocess")]),e._v(" zal doorgegeven worden.")]),e._v(" "),n("p",[e._v("In het geval van C is dit commando eenvoudig: we geven het absolute pad naar het\nuitvoerbare bestand mee en geven ook de argumenten mee. Het absolute pad is\nnodig omdat de executable die we willen uitvoeren (en gegenereerd hebben in de\ncompilatiestap) niet in het "),n("code",[e._v("PATH")]),e._v(" zit.")]),e._v(" "),n("p",[e._v("Een voorbeeld van deze functie in werking is:")]),e._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" execution"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'/test/path'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'executable.exe'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'arg1'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'arg2'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'/test/path/executable.exe'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'arg1'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'arg2'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])]),n("p",[e._v("De basisimplementatie van de configuratie is nu klaar. Voor de meeste\nprogrammeertalen kan nu overgegaan worden naar de sjablonen, maar in C moeten we\nnog een extra methode implementeren.")]),e._v(" "),n("h4",{attrs:{id:"ingediende-oplossingen-aanpassen"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ingediende-oplossingen-aanpassen"}},[e._v("#")]),e._v(" Ingediende oplossingen aanpassen")]),e._v(" "),n("p",[e._v("De testcode die door TESTed gegenereerd wordt, kan meerdere "),n("code",[e._v("main")]),e._v("-functies\nbevatten:")]),e._v(" "),n("ul",[n("li",[e._v("De ingediende oplossing kan een "),n("code",[e._v("main")]),e._v("-functie hebben.")]),e._v(" "),n("li",[e._v("Zowel de contexten als de selector kunnen "),n("code",[e._v("main")]),e._v("-functies hebben.")])]),e._v(" "),n("p",[e._v("In C kan er echter slechts één "),n("code",[e._v("main")]),e._v("-functie per compilatie zijn.")]),e._v(" "),n("p",[e._v("Een ander probleem is dat de selector elke run insluit (zoals we later zullen\nzien bij de sjablonen), en elke run ook de oplossing insluit.")]),e._v(" "),n("p",[e._v("Om deze redenen moeten we de code van de ingediende oplossing een beetje\naanpassen:")]),e._v(" "),n("ul",[n("li",[e._v("We voegen een "),n("code",[e._v("guard")]),e._v(" toe zodat de oplossing slechts eenmaal geladen wordt.")]),e._v(" "),n("li",[e._v("We hernoemen de "),n("code",[e._v("main")]),e._v("-functie naar "),n("code",[e._v("solution_main")]),e._v(" indien die bestaat. Als de\n"),n("code",[e._v("main")]),e._v("-functie geen argumenten had, dan voegen we die ook toe.")])]),e._v(" "),n("p",[e._v("Vertaald naar de configuratieklasse wordt dit:")]),e._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("solution")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" solution"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" Path"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" bundle"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" Bundle"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("with")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("open")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("solution"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"r"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("as")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("file")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n        contents "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("file")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("read"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# We use regex to find the main function.")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# First, check if we have a no-arg main function.")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# If so, replace it with a renamed main function that does have args.")]),e._v("\n    no_args "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" re"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("compile")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('r"(int|void)(\\s+)main(\\s*)\\((\\s*)\\)(\\s*{)"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    replacement "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('r"int\\2solution_main\\3(\\4int argc, char** argv)\\5"')]),e._v("\n    contents"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" nr "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" re"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("subn"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("no_args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" replacement"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" contents"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" count"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" nr "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# There was no main function without arguments. Now we try a main")]),e._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# function with arguments.")]),e._v("\n        with_args "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" re"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("compile")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('r"(int|void)(\\s+)main(\\s*)\\((\\s*)int"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n        replacement "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('r"int\\2solution_main\\3(\\4int"')]),e._v("\n        contents "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" re"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("sub"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("with_args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" replacement"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" contents"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" count"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("with")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("open")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("solution"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"w"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("as")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("file")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n        header "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"#pragma once\\n\\n"')]),e._v("\n        "),n("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("file")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("write"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("header "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("+")]),e._v(" contents"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),n("h3",{attrs:{id:"sjablonen"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#sjablonen"}},[e._v("#")]),e._v(" Sjablonen")]),e._v(" "),n("p",[e._v("De derde stap bestaat uit het schrijven van de sjablonen. We hebben uiteraard de\nverplichte sjablonen nodig, maar om code te hergebruiken kiezen we ervoor om\nenkele bijkomende sjablonen te schrijven:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("run.c")]),e._v(": Het sjabloon voor run ("),n("strong",[e._v("verplicht")]),e._v(").")]),e._v(" "),n("li",[n("code",[e._v("selector.c")]),e._v(": Het sjabloon voor de selector van batchcompilatie ("),n("strong",[e._v("verplicht")]),e._v("\nbij batchcompilatie).")]),e._v(" "),n("li",[n("code",[e._v("declaration.mako")]),e._v(": Vertaalt de declaratie van een variabele naar code.")]),e._v(" "),n("li",[n("code",[e._v("function.mako")]),e._v(": Vertaalt een functieoproep naar code.")]),e._v(" "),n("li",[n("code",[e._v("statement.mako")]),e._v(": Vertaalt een statement of een expressie naar code\n("),n("strong",[e._v("verplicht")]),e._v(").")]),e._v(" "),n("li",[n("code",[e._v("value.mako")]),e._v(": Vertaalt een letterlijke waarde naar code.")]),e._v(" "),n("li",[n("code",[e._v("value_arguments.mako")]),e._v(": Hulpsjabloon voor "),n("code",[e._v("value.mako")]),e._v(": opsomming van\nrecursieve gegevenstypes zoals lijsten, maar ook van functieargumenten.")]),e._v(" "),n("li",[n("code",[e._v("value_basic.mako")]),e._v(": Hulpsjabloon voor "),n("code",[e._v("value.mako")]),e._v(": vertaalt de basistypes.")])]),e._v(" "),n("p",[e._v("Al deze sjablonen komen in de map "),n("code",[e._v("tested/languages/c/templates")]),e._v(".")]),e._v(" "),n("p",[e._v("Het is vrij om de bestandsextensie van de sjablonen te kiezen, zolang het een\nextensie is uit de configuratie. Standaard zijn de toegelaten extensies "),n("code",[e._v(".mako")]),e._v("\nen een programmeertaalafhankelijke extensie, hier "),n("code",[e._v(".c")]),e._v(". Een conventie die\ngebruikt wordt binnen TESTed, is de volgende:")]),e._v(" "),n("ul",[n("li",[e._v("Sjablonen eindigen op de programmeertaalafhankelijke extensie ("),n("code",[e._v(".c")]),e._v(") als het\nsjabloon een op zichzelf staand bestand genereert. Voorbeelden zijn het\nrunsjabloon en de selector.")]),e._v(" "),n("li",[e._v("Sjablonen die een codefragment genereren en dus vooral gebruikt worden als\nonderdeel van andere sjablonen eindigen op "),n("code",[e._v(".mako")]),e._v(". Dit zijn bijvoorbeeld de\nsjablonen om functies en statements om te zetten.")])]),e._v(" "),n("p",[e._v("Deze conventie wordt niet afgedwongen door TESTed. Alle sjablonen hadden de\nextensie "),n("code",[e._v(".c")]),e._v(" of "),n("code",[e._v(".mako")]),e._v(" kunnen krijgen, of een mengeling. De conventie geldt\nvoornamelijk voor de verplichte sjablonen. De andere sjablonen (die als\nhulpmiddel gebruikt worden door de verplichte sjablonen) kunnen eender welke\nextensie krijgen, want bij het gebruiken van een sjabloon in\n"),n("a",{attrs:{href:"https://www.makotemplates.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Mako"),n("OutboundLink")],1),e._v(" moet de bestandsextensie opgegeven\nworden.")]),e._v(" "),n("h4",{attrs:{id:"het-runsjabloon"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#het-runsjabloon"}},[e._v("#")]),e._v(" Het runsjabloon")]),e._v(" "),n("p",[e._v("Dit is veruit het grootste en het meest ingewikkelde sjabloon. Het is\nverantwoordelijk voor het genereren van de testcode voor één run.")]),e._v(" "),n("p",[e._v("We importeren de values-module (hierover later meer) en de ingediende oplossing.\nDe variabele "),n("code",[e._v("submission_name")]),e._v(" zal de naam van het oplossingsbestand bevatten.\nEen overzicht van alle beschikbare variabelen in het runsjabloon is te vinden in\nde klasse\n"),n("a",{attrs:{href:"https://github.com/dodona-edu/universal-judge/blob/master/tested/languages/generator.py#L124",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("_ExecutionArguments")]),n("OutboundLink")],1),e._v("\nuit de module\n"),n("a",{attrs:{href:"https://github.com/dodona-edu/universal-judge/blob/master/tested/languages/generator.py",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("tested.languages.generator")]),n("OutboundLink")],1),e._v(".")]),e._v(" "),n("p",[e._v("We importeren ook alle programmeertaalspecifieke evaluatoren die we nodig zullen\nhebben. De variabele "),n("code",[e._v("evaluator_names")]),e._v(" bevat een verzameling van deze namen.")]),e._v(" "),n("div",{staticClass:"language-mako extra-class"},[n("pre",{pre:!0,attrs:{class:"language-mako"}},[n("code",[e._v('#include <stdio.h>\n\n#include "values.h"\n#include "'),n("span",{pre:!0,attrs:{class:"token expression"}},[e._v("$"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("submission_name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")])]),e._v('.c"\n\n'),n("span",{pre:!0,attrs:{class:"token directive"}},[n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("%")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" name "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" evaluator_names"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")])]),e._v('\n    #include "'),n("span",{pre:!0,attrs:{class:"token expression"}},[e._v("$"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")])]),e._v('.c"\n'),n("span",{pre:!0,attrs:{class:"token directive"}},[n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("%")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("endfor")])]),e._v("\n")])])]),n("h5",{attrs:{id:"witruimte-in-mako"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#witruimte-in-mako"}},[e._v("#")]),e._v(" Witruimte in Mako")]),e._v(" "),n("p",[e._v("Het is nuttig om te weten dat TESTed een extensie heeft toegevoegd aan Mako,\nwaardoor insprongen van Mako-gerelateerde taalconstructies zullen verdwijnen\nDe insprong van de "),n("code",[e._v("for")]),e._v(" wordt dus verwijderd. De "),n("code",[e._v("for")]),e._v("-loop in het fragment\nhierboven resulteert bijvoorbeeld in deze code:")]),e._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[e._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[e._v("include")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"context_0_0.c"')])]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[e._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[e._v("include")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"context_0_1.c"')])]),e._v("\n")])])]),n("h5",{attrs:{id:"regeleindes-in-mako"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#regeleindes-in-mako"}},[e._v("#")]),e._v(" Regeleindes in Mako")]),e._v(" "),n("p",[e._v("Het is ook nuttig om te weten dat een regeleinde in een sjabloon in Mako zal\nresulteren in een regeleinde in het geproduceerde bestand. Mako voorziet\nhiervoor een oplossing: door een "),n("em",[e._v("backslash")]),e._v(" ("),n("code",[e._v("\\")]),e._v(") op het einde van de regel te\nplaatsen zal er geen regeleinde komen in het gegenereerde bestand. Volgende\ncodefragment (let op de "),n("code",[e._v("\\")]),e._v("):")]),e._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("int")]),e._v(" test "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" \\⏎\n"),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"test"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("⏎\n")])])]),n("p",[e._v("zal bijvoorbeeld resulteren in deze code:")]),e._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("int")]),e._v(" test "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"test"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("⏎\n")])])]),n("p",[e._v("Vervolgens maken we twee variabelen aan waarin de bestanden komen die dienst\ndoen als return- en "),n("em",[e._v("exception")]),e._v("-kanaal. We noemen deze bestanden de\n"),n("strong",[e._v("uitvoerbestanden")]),e._v(". Merk op dat C geen "),n("em",[e._v("exceptions")]),e._v(" ondersteunt, maar TESTed\nverwacht toch een bestand voor het "),n("em",[e._v("exception")]),e._v("-kanaal. Anders zou TESTed ervan\nuitgaan dat er iets verkeerd liep tijdens het uitvoeren. We definiëren\nonmiddellijk ook een functie om de separator naar alle uitvoerkanalen te\nschrijven.")]),e._v(" "),n("p",[e._v("In onderstaand codefragment en in de rest van het runsjabloon wordt regelmatig\nde naam van de context als prefix gebruikt voor functies en variabelen. Dit is\nomdat het in C niet mogelijk is om in meerdere bestanden functies met dezelfde\nnaam te hebben. Als we dus meerdere runs samen compileren en elke run heeft zijn\neigen "),n("code",[e._v("write_separator")]),e._v("-functies, dan zou het compileren mislukken.")]),e._v(" "),n("div",{staticClass:"language-mako extra-class"},[n("pre",{pre:!0,attrs:{class:"language-mako"}},[n("code",[e._v("static FILE* "),n("span",{pre:!0,attrs:{class:"token expression"}},[e._v("$"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("execution_name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")])]),e._v("_value_file = NULL;\nstatic FILE* "),n("span",{pre:!0,attrs:{class:"token expression"}},[e._v("$"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("execution_name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")])]),e._v("_exception_file = NULL;\n\nstatic void "),n("span",{pre:!0,attrs:{class:"token expression"}},[e._v("$"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("execution_name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")])]),e._v("_write_separator() {\n    fprintf("),n("span",{pre:!0,attrs:{class:"token expression"}},[e._v("$"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("execution_name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")])]),e._v('_value_file, "--'),n("span",{pre:!0,attrs:{class:"token expression"}},[e._v("$"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("secret_id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")])]),e._v('-- SEP");\n    fprintf('),n("span",{pre:!0,attrs:{class:"token expression"}},[e._v("$"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("execution_name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")])]),e._v('_exception_file, "--'),n("span",{pre:!0,attrs:{class:"token expression"}},[e._v("$"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("secret_id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")])]),e._v('-- SEP");\n    fprintf(stdout, "--'),n("span",{pre:!0,attrs:{class:"token expression"}},[e._v("$"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("secret_id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")])]),e._v('-- SEP");\n    fprintf(stderr, "--'),n("span",{pre:!0,attrs:{class:"token expression"}},[e._v("$"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("secret_id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")])]),e._v('-- SEP");\n}\n\nstatic void '),n("span",{pre:!0,attrs:{class:"token expression"}},[e._v("$"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("execution_name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")])]),e._v("_write_context_separator() {\n    fprintf("),n("span",{pre:!0,attrs:{class:"token expression"}},[e._v("$"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("execution_name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")])]),e._v('_value_file, "--'),n("span",{pre:!0,attrs:{class:"token expression"}},[e._v("$"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("context_secret_id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")])]),e._v('-- SEP");\n    fprintf('),n("span",{pre:!0,attrs:{class:"token expression"}},[e._v("$"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("execution_name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")])]),e._v('_exception_file, "--'),n("span",{pre:!0,attrs:{class:"token expression"}},[e._v("$"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("context_secret_id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")])]),e._v('-- SEP");\n    fprintf(stdout, "--'),n("span",{pre:!0,attrs:{class:"token expression"}},[e._v("$"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("context_secret_id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")])]),e._v('-- SEP");\n    fprintf(stderr, "--'),n("span",{pre:!0,attrs:{class:"token expression"}},[e._v("$"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("context_secret_id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")])]),e._v('-- SEP");\n}\n')])])]),n("p",[e._v("Als er een resultaat gegenereerd wordt voor het return- of "),n("em",[e._v("exception")]),e._v("-kanaal,\ndan moet dat resultaat geserialiseerd worden en naar de uitvoerbestanden\ngeschreven worden. TESTed verwacht dat volgende functies beschikbaar zijn:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("send_value(value)")]),e._v(": Schrijft een waarde naar een bestand.")]),e._v(" "),n("li",[n("code",[e._v("send_exception(exception)")]),e._v(": Schrijft een "),n("em",[e._v("exception")]),e._v(" naar een bestand.")]),e._v(" "),n("li",[n("code",[e._v("send_specific_value(value)")]),e._v(": Schrijft het resultaat van een\nprogrammeertaalspecifieke evaluatie naar het return-kanaal.")]),e._v(" "),n("li",[n("code",[e._v("send_specific_exception(exception)")]),e._v(": Schrijft het resultaat van een\nprogrammeertaalspecifieke evaluatie naar het "),n("em",[e._v("exception")]),e._v("-kanaal.")])]),e._v(" "),n("p",[e._v("Bij het implementeren moeten de conventies voor de naamgeving van de\nprogrammeertaal toegepast worden. Zo zal TESTed in Java een oproep van een\nfunctie met naam "),n("code",[e._v("sendValue")]),e._v(" genereren.")]),e._v(" "),n("p",[e._v("We zullen later zien dat we zelf de oproepen naar deze functies in het sjabloon\nschrijven. Toegepast op C zijn er wat wijzigingen, omdat C geen "),n("em",[e._v("exceptions")]),e._v("\nondersteunt. Als gevolg daarvan zullen we de "),n("em",[e._v("exception")]),e._v("-functies niet\nimplementeren en zullen we ook geen oproep naar deze functies genereren. In C\ngebruiken we ook een macro in plaats van een functie: dit opnieuw omdat we niet\ndezelfde functie in meerdere bestanden kunnen definiëren.")]),e._v(" "),n("div",{staticClass:"language-mako extra-class"},[n("pre",{pre:!0,attrs:{class:"language-mako"}},[n("code",[e._v("#undef send_value\n#define send_value(value) write_value("),n("span",{pre:!0,attrs:{class:"token expression"}},[e._v("$"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("execution_name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")])]),e._v("_value_file, value)\n\n#undef send_specific_value\n#define send_specific_value(value) write_evaluated("),n("span",{pre:!0,attrs:{class:"token expression"}},[e._v("$"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("execution_name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")])]),e._v("_value_file, value)\n")])])]),n("p",[e._v("We zien ook dat de implementatie eenvoudig is: we geven de verkregen waarde of\n"),n("em",[e._v("exception")]),e._v(" door aan de juiste functie uit de "),n("code",[e._v("values")]),e._v("-module en geven ook het\nbestand mee waarin de waarde of "),n("em",[e._v("exception")]),e._v(" moet komen.")]),e._v(" "),n("p",[e._v("Waarom is het nodig is om deze functies te gebruiken? Als TESTed een\nfunctieoproep naar deze functies kan definiëren, waarom kan TESTed dan niet\ndirect de "),n("code",[e._v("values")]),e._v("-module gebruiken, zonder daar deze functies tussen te\nplaatsen?")]),e._v(" "),n("p",[e._v("Het antwoord is dat de "),n("code",[e._v("values")]),e._v("-module niet verplicht is. Dit is een conventie\ndie in alle ondersteunde programmeertalen gebruikt wordt, maar het is evengoed\nmogelijk om bij de implementatie van bijvoorbeeld "),n("code",[e._v("send_value")]),e._v(' de waarde\nrechtstreeks naar het bestand te schrijven. Deze functies moeten beschouwd\nworden als de "interface" tussen TESTed en de programmeertaal: TESTed verwacht\ndat deze functies bestaan en de waarde of '),n("em",[e._v("exception")]),e._v(" naar het juiste bestand\nschrijven, maar hoe dat gebeurt maakt voor TESTed niet uit.")]),e._v(" "),n("p",[e._v("Nu zijn we aangekomen bij het uitvoeren van de contexten zelf. Hiervoor wordt er\nper context een functie gegenereerd. Deze schrijft eerst de "),n("code",[e._v("before")]),e._v("-code uit.\nDe "),n("code",[e._v("before")]),e._v("-code is een codefragment dat uitgevoerd wordt voordat de context\nzelf uitgevoerd wordt. Dit codefragment kan opgegeven worden in het testplan van\neen oefening.")]),e._v(" "),n("p",[e._v("Verder schrijven we de "),n("em",[e._v("separator")]),e._v(" naar de uitvoerbestanden door gebruik te\nmaken van de functie die we eerder gedefinieerd hebben in ons sjabloon. Zoals we\nreeds besproken hebben, komt de uitvoer van het return- en "),n("em",[e._v("exception")]),e._v("-kanaal\nvan alle testgevallen in dezelfde bestanden terecht. Het is nodig om de waarden\nvan elkaar te kunnen onderscheiden, om goed te weten waar de resultaten van een\ntestgeval stoppen en waar de resultaten van het volgende testgeval beginnen.\nHiervoor gebruiken we de "),n("em",[e._v("separator")]),e._v(".")]),e._v(" "),n("p",[e._v("Het is belangrijk om de separator altijd vóór aanvang van een testgeval naar de\nuitvoerbestanden te schrijven. TESTed is daar zo op voorzien: de separator na\nhet testgeval uitschrijven zal tot verkeerde resultaten leiden.")]),e._v(" "),n("p",[e._v("We genereren de code voor alle normale testgevallen. Omdat C geen "),n("em",[e._v("exceptions")]),e._v("\nondersteunt, is deze implementatie eenvoudig: we schrijven de separator naar de\nuitvoerbestanden en voeren het invoerstatement uit.")]),e._v(" "),n("p",[e._v("Dat invoerstatement is "),n("code",[e._v("testcase.input_statement()")]),e._v(", wat een geserialiseerd\nstatement zal teruggeven. Wat dat statement juist is, is eigenlijk niet relevant\nvoor het sjabloon, maar het kan toch geen kwaad om het te weten:")]),e._v(" "),n("ul",[n("li",[e._v("Als de invoer van het testgeval een assignment is, dan zal dit resulteren in\ncode die er zo uitziet:\n"),n("code",[e._v("int variable = functieoproep();")])]),e._v(" "),n("li",[e._v("Is de invoer een uitdrukking ("),n("em",[e._v("expression")]),e._v(") en zijn we geïnteresseerd in de\nreturnwaarde (het is dus niet van het type "),n("code",[e._v("void")]),e._v("), dan zal de gegenereerde\ncode er als volgt uitzien: "),n("code",[e._v("send_value(functieoproep());")])])]),e._v(" "),n("p",[e._v("Als afsluiter zetten we de "),n("code",[e._v("after")]),e._v("-code en sluiten we de bestanden. De\n"),n("code",[e._v("after")]),e._v("-code is analoog aan de "),n("code",[e._v("before")]),e._v("-code.")]),e._v(" "),n("div",{staticClass:"language-mako extra-class"},[n("pre",{pre:!0,attrs:{class:"language-mako"}},[n("code",[n("span",{pre:!0,attrs:{class:"token directive"}},[n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("%")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" ctx "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("enumerate")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("contexts"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")])]),e._v("\n    void "),n("span",{pre:!0,attrs:{class:"token expression"}},[e._v("$"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("execution_name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")])]),e._v("_context_"),n("span",{pre:!0,attrs:{class:"token expression"}},[e._v("$"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")])]),e._v("(void) {\n        "),n("span",{pre:!0,attrs:{class:"token expression"}},[e._v("$"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("ctx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("before"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")])]),e._v("\n        "),n("span",{pre:!0,attrs:{class:"token directive"}},[n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("%")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" testcase "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" ctx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("testcases"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")])]),e._v("\n            "),n("span",{pre:!0,attrs:{class:"token expression"}},[e._v("$"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("execution_name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")])]),e._v("_write_separator();\n            "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("%include")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("file")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[e._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')]),e._v("statement.mako"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')])]),e._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("args")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[e._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')]),e._v("statement=testcase.input_statement()"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')])]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("/>")])]),e._v(";\n        "),n("span",{pre:!0,attrs:{class:"token directive"}},[n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("%")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("endfor")])]),e._v("\n        "),n("span",{pre:!0,attrs:{class:"token expression"}},[e._v("$"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("ctx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("after"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")])]),e._v("\n    }\n"),n("span",{pre:!0,attrs:{class:"token directive"}},[n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("%")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("endfor")])]),e._v("\n")])])]),n("p",[e._v("Nu zijn we aangekomen bij het uitvoeren van de run zelf. In C gebeurt dit in een\nfunctie die de naam van de run ("),n("code",[e._v("execution_name")]),e._v(") krijgt. Als eerste stap maken\nwe de bestanden voor het return- en "),n("em",[e._v("exception")]),e._v("-kanaal aan.")]),e._v(" "),n("div",{staticClass:"language-mako extra-class"},[n("pre",{pre:!0,attrs:{class:"language-mako"}},[n("code",[e._v("int "),n("span",{pre:!0,attrs:{class:"token expression"}},[e._v("$"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("execution_name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")])]),e._v("() {\n\n    "),n("span",{pre:!0,attrs:{class:"token expression"}},[e._v("$"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("execution_name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")])]),e._v('_value_file = fopen("'),n("span",{pre:!0,attrs:{class:"token expression"}},[e._v("$"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("value_file"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")])]),e._v('", "w");\n    '),n("span",{pre:!0,attrs:{class:"token expression"}},[e._v("$"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("execution_name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")])]),e._v('_exception_file = fopen("'),n("span",{pre:!0,attrs:{class:"token expression"}},[e._v("$"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("exception_file"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")])]),e._v('", "w");\n')])])]),n("p",[e._v("Verder schrijven we de "),n("em",[e._v("context separator")]),e._v(" naar de uitvoerbestanden door gebruik\nte maken van de functie die we eerder gedefinieerd hebben in ons sjabloon. Zoals\nwe reeds besproken hebben, komt de uitvoer van het return- en "),n("em",[e._v("exception")]),e._v("-kanaal\nvan alle contexten in dezelfde bestanden terecht. Het is nodig om de waarden van\nelkaar te kunnen onderscheiden, om goed te weten waar de resultaten van een\ncontext stoppen en waar de resultaten van het volgende context beginnen.\nHiervoor gebruiken we de "),n("em",[e._v("context separator")]),e._v(".")]),e._v(" "),n("p",[e._v("Het is belangrijk om de separator altijd vóór aanvang van een context naar de\nuitvoerbestanden te schrijven. TESTed is daar zo op voorzien: de separator na de\ncontext uitschrijven zal tot verkeerde resultaten leiden.")]),e._v(" "),n("p",[e._v("We roepen eerst de "),n("code",[e._v("main")]),e._v("-functie van de oplossing aan als het testplan dat\nvereist. Oefeningen waar geen "),n("code",[e._v("main")]),e._v("-functie opgeroepen wordt, zijn bijvoorbeeld\ndeze waarbij de student een functie moet implementeren.")]),e._v(" "),n("p",[e._v("In het codefragment hieronder wordt een oproep gedaan naar de functie\n"),n("code",[e._v("solution_main")]),e._v(" uit de ingediende oplossing. Deze functie hebben we zelf gemaakt\ndoor de gewone "),n("code",[e._v("main")]),e._v("-functie te hernoemen (zie\n"),n("a",{attrs:{href:"#configuratieklasse"}},[e._v("Configuratieklasse")]),e._v("). Als de ingediende oplossing geen\n"),n("code",[e._v("main")]),e._v("-functie bevat, maar het testplan verwachtte die wel, dan zal de\ncompilatie falen.")]),e._v(" "),n("div",{staticClass:"language-mako extra-class"},[n("pre",{pre:!0,attrs:{class:"language-mako"}},[n("code",[e._v("    "),n("span",{pre:!0,attrs:{class:"token expression"}},[e._v("$"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("execution_name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")])]),e._v("_write_context_separator();\n    "),n("span",{pre:!0,attrs:{class:"token directive"}},[n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("%")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" run_testcase"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("exists"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")])]),e._v("\n        char* args[] = {"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n        "),n("span",{pre:!0,attrs:{class:"token directive"}},[n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("%")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" argument "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"solution"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("+")]),e._v(" run_testcase"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("arguments"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")])]),e._v('\n            "'),n("span",{pre:!0,attrs:{class:"token expression"}},[e._v("$"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("argument"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")])]),e._v('", '),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n        "),n("span",{pre:!0,attrs:{class:"token directive"}},[n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("%")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("endfor")])]),e._v("\n        };\n        int exit_code = solution_main("),n("span",{pre:!0,attrs:{class:"token expression"}},[e._v("$"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("len")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("run_testcase"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("arguments"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("+")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")])]),e._v(", args);\n        if (exit_code != 0) {\n            return exit_code;\n        }\n    "),n("span",{pre:!0,attrs:{class:"token directive"}},[n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("%")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("endif")])]),e._v("\n")])])]),n("p",[e._v("Vervolgens genereren we de code die nodig is om de verschillende contexten uit\nte voeren.")]),e._v(" "),n("div",{staticClass:"language-mako extra-class"},[n("pre",{pre:!0,attrs:{class:"language-mako"}},[n("code",[e._v("    "),n("span",{pre:!0,attrs:{class:"token directive"}},[n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("%")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" ctx "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("enumerate")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("contexts"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")])]),e._v("\n        "),n("span",{pre:!0,attrs:{class:"token expression"}},[e._v("$"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("execution_name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")])]),e._v("_write_context_separator();\n        "),n("span",{pre:!0,attrs:{class:"token expression"}},[e._v("$"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("execution_name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")])]),e._v("_context_"),n("span",{pre:!0,attrs:{class:"token expression"}},[e._v("$"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")])]),e._v("();\n    "),n("span",{pre:!0,attrs:{class:"token directive"}},[n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("%")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("endfor")])]),e._v("\n\n    fclose("),n("span",{pre:!0,attrs:{class:"token expression"}},[e._v("$"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("execution_name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")])]),e._v("_value_file);\n    fclose("),n("span",{pre:!0,attrs:{class:"token expression"}},[e._v("$"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("execution_name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")])]),e._v("_exception_file);\n    return 0;\n}\n")])])]),n("p",[e._v("Omdat we voor de programmeertaal C zowel runcompilatie als batchcompilatie\nwillen ondersteunen, moet elke run een "),n("code",[e._v("main")]),e._v("-functie hebben. De programmeertaal\nC laat echter slechts één "),n("code",[e._v("main")]),e._v("-functie toe. Als we in batchcompilatie zitten,\nzal de selector gebruikt worden, en zal "),n("code",[e._v("INCLUDED")]),e._v(" op "),n("code",[e._v("TRUE")]),e._v(" staan. In dat geval\nvoegen we geen "),n("code",[e._v("main")]),e._v("-functie toe.")]),e._v(" "),n("div",{staticClass:"language-mako extra-class"},[n("pre",{pre:!0,attrs:{class:"language-mako"}},[n("code",[e._v("#ifndef INCLUDED\nint main() {\n    return "),n("span",{pre:!0,attrs:{class:"token expression"}},[e._v("$"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("execution_name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")])]),e._v("();\n}\n#endif\n")])])]),n("h4",{attrs:{id:"het-selectorsjabloon"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#het-selectorsjabloon"}},[e._v("#")]),e._v(" Het selectorsjabloon")]),e._v(" "),n("p",[e._v("Het is nuttig om er meteen het selectorsjabloon bij te halen, dat gebruikt wordt\nals TESTed in batchcompilatie werkt en dat verantwoordelijk is om de juiste\ncontext uit te voeren op basis van een argument. Het is in dit sjabloon dat de\nmacro "),n("code",[e._v("INCLUDED")]),e._v(" op "),n("code",[e._v("true")]),e._v(" gezet wordt, waardoor de "),n("code",[e._v("main")]),e._v("-functies in andere\ncontexten niet gebruikt worden.")]),e._v(" "),n("div",{staticClass:"language-mako extra-class"},[n("pre",{pre:!0,attrs:{class:"language-mako"}},[n("code",[e._v("#include <string.h>\n#include <stdio.h>\n\n#define INCLUDED true\n\n"),n("span",{pre:!0,attrs:{class:"token directive"}},[n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("%")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" cont "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" contexts"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")])]),e._v('\n    #include "'),n("span",{pre:!0,attrs:{class:"token expression"}},[e._v("$"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("cont"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")])]),e._v('.c"\n'),n("span",{pre:!0,attrs:{class:"token directive"}},[n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("%")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("endfor")])]),e._v('\n\nint main(int argc, const char* argv[]) {\n\n    if (argc < 1) {\n        fprintf(stderr, "No run context selected.");\n        return -2;\n    }\n    \n    const char* name = argv[1];\n    '),n("span",{pre:!0,attrs:{class:"token directive"}},[n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("%")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" cont "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" contexts"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")])]),e._v('\n        if (strcmp("'),n("span",{pre:!0,attrs:{class:"token expression"}},[e._v("$"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("cont"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")])]),e._v('", name) == 0) {\n            return '),n("span",{pre:!0,attrs:{class:"token expression"}},[e._v("$"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("cont"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")])]),e._v("();\n        }\n    "),n("span",{pre:!0,attrs:{class:"token directive"}},[n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("%")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("endfor")])]),e._v("\n    fprintf(stderr, \"Non-existing run context '%s' selected.\", name);\n    return -1;\n}\n")])])]),n("h4",{attrs:{id:"het-statementsjabloon"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#het-statementsjabloon"}},[e._v("#")]),e._v(" Het statementsjabloon")]),e._v(" "),n("p",[e._v("Dit sjabloon wordt door TESTed gebruikt om statements te vertalen naar code. Dit\nomvat onder andere assignments, functieoproepen en waarden:")]),e._v(" "),n("div",{staticClass:"language-mako extra-class"},[n("pre",{pre:!0,attrs:{class:"language-mako"}},[n("code",[e._v("## Convert a statement and/or expression into Java code."),n("span",{pre:!0,attrs:{class:"token expression-tag"}},[e._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("%")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("!")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("from")]),e._v(" tested"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("utils "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" get_args "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("%")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),n("span",{pre:!0,attrs:{class:"token expression-tag"}},[e._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("%")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("!")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("from")]),e._v(" tested"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("serialisation "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" Value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" Identifier"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" FunctionCall"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" Assignment "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("%")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("%page")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("args")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[e._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')]),e._v("statement,full=False"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("/>")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token directive"}},[n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("%")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("isinstance")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("statement"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" Identifier"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")])]),e._v("\n    ## If the expression is an identifier, just echo it.\n    "),n("span",{pre:!0,attrs:{class:"token expression"}},[e._v("$"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("statement"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token directive"}},[n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("%")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("elif")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("isinstance")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("statement"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" FunctionCall"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")])]),e._v("\n    ## Delegate to the function template for function calls.\n    "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("%include")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("file")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[e._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')]),e._v("function.mako"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')])]),e._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("args")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[e._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')]),e._v("function=statement"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("/>")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token directive"}},[n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("%")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("elif")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("isinstance")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("statement"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("get_args")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("Value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")])]),e._v("\n    ## We have a value, delegate to the value template.\n    "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("%include")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("file")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[e._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')]),e._v("value.mako"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')])]),n("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("args")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[e._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')]),e._v("value=statement"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')])]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("/>")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token directive"}},[n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("%")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("else")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")])]),n("span",{pre:!0,attrs:{class:"token expression-tag"}},[e._v("\n    "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("%")]),e._v(" assert "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("isinstance")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("statement"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("get_args")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("Assignment"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("%")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token directive"}},[n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("%")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" full"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")])]),e._v("\n        "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("%include")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("file")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[e._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')]),e._v("declaration.mako"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')])]),e._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("args")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[e._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')]),e._v("tp=statement.type, value=statement.expression"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')])]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("/>")])]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token directive"}},[n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("%")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("endif")])]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token expression"}},[e._v("$"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("statement"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("variable"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")])]),e._v(" = "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("%include")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("file")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[e._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')]),e._v("statement.mako"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')])]),e._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("args")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[e._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')]),e._v("statement=statement.expression"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("/>")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token directive"}},[n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("%")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("endif")])]),e._v("\n")])])]),n("p",[e._v("De implementatie van dit sjabloon komt conceptueel neer op één groot "),n("code",[e._v("switch")]),e._v("\nstatement, dat op basis van het soort statement of expressie delegeert naar het\njuiste hulpsjabloon.")]),e._v(" "),n("p",[e._v("Een aspect dat wat meer uitleg vraagt, is de "),n("code",[e._v("full")]),e._v("-parameter die aangeeft of\nhet gegevenstype nodig is bij de declaratie van een variabele. Het verschil\nwordt duidelijk met een voorbeeld:")]),e._v(" "),n("div",{staticClass:"language-mako extra-class"},[n("pre",{pre:!0,attrs:{class:"language-mako"}},[n("code",[e._v("int variabele = 5;  // met declaratie\nvariabele = 6;      // zonder declaratie\n")])])]),n("p",[e._v("In C is deze parameter minder relevant omdat de tweede variant zelden nodig is,\nmaar deze is vooral nodig in talen zoals Java.")]),e._v(" "),n("p",[e._v("Wat ook nuttig kan zijn, is de functie "),n("code",[e._v("get_args")]),e._v(" die geïmporteerd wordt uit\n"),n("code",[e._v("tested.utils")]),e._v(". We willen op verschillende plaatsen in het sjabloon een andere\nactie doen op basis van het soort statement. Normaliter zou een eenvoudige\noproep met "),n("code",[e._v("isinstance")]),e._v(" volstaan. Nu zijn verschillende types, zoals "),n("code",[e._v("Value")]),e._v(",\n"),n("code",[e._v("Expression")]),e._v(" en "),n("code",[e._v("Statement")]),e._v(" geen echt type: ze worden geïmplementeerd als een\n"),n("code",[e._v("Union")]),e._v(". Zo luidt de definitie van "),n("code",[e._v("Expression")]),e._v(" als volgt:\n"),n("code",[e._v("Expression = Union[Identifier, FunctionCall, Value]")]),e._v(". "),n("code",[e._v("Union")]),e._v("-types kunnen niet\ngebruikt worden in "),n("code",[e._v("isinstance")]),e._v(". De "),n("code",[e._v("get_args")]),e._v("-functie lost dit probleem op door\nde "),n("code",[e._v("Union")]),e._v("-types om te zetten naar een "),n("code",[e._v("tuple")]),e._v(" van echte types. Het is beter de\nfunctie "),n("code",[e._v("get_args")]),e._v(" te veel dan te weinig te gebruiken: de functie werkt ook voor\ngewone types.")]),e._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("isinstance")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'string'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" Expression"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\nTypeError\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("isinstance")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'string'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" get_args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("Expression"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("False")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("isinstance")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'string'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" get_args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("str")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Ook gewone types")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("True")]),e._v("\n")])])]),n("h4",{attrs:{id:"overige"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#overige"}},[e._v("#")]),e._v(" Overige")]),e._v(" "),n("p",[e._v("De overige sjablonen vertalen elk een taalelement op een gelijkaardige wijze als\nhet statementsjabloon. Het gaat om volgende sjablonen:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("declaration.mako")])]),e._v(" "),n("li",[n("code",[e._v("function.mako")])]),e._v(" "),n("li",[n("code",[e._v("value.mako")])]),e._v(" "),n("li",[n("code",[e._v("value_arguments.mako")])]),e._v(" "),n("li",[n("code",[e._v("value_basic.mako")])])]),e._v(" "),n("p",[e._v("We hebben ze niet opgenomen in deze handleiding, omdat ze sterk lijken op het\nstatementsjabloon. De implementatie van deze sjablonen is te bekijken in de\n"),n("a",{attrs:{href:"https://github.com/dodona-edu/universal-judge/tree/master/tested/languages/c/templates",target:"_blank",rel:"noopener noreferrer"}},[e._v("repository van TESTed"),n("OutboundLink")],1),e._v(".")]),e._v(" "),n("h3",{attrs:{id:"hulpmodules"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#hulpmodules"}},[e._v("#")]),e._v(" Hulpmodules")]),e._v(" "),n("p",[e._v('Zoals we in het begin van deze handleiding vermeld hebben, zijn er twee\nbestanden die als "dependency" opgegeven zijn: '),n("code",[e._v("values.c")]),e._v(" en "),n("code",[e._v("values.h")]),e._v(". Deze\nbestanden implementeren het serialiseren van data naar het serialisatieformaat\nen vormen samen de "),n("code",[e._v("values")]),e._v("-module. De elementen die geserialiseerd moeten\nworden zijn:")]),e._v(" "),n("ul",[n("li",[e._v("Waarden, zoals returnwaarden.")]),e._v(" "),n("li",[e._v("Exceptions (niet het geval in C, want die bestaan niet in C).")]),e._v(" "),n("li",[e._v("Resultaten van geprogrammeerde en programmeertaalspecifieke evaluaties.")])]),e._v(" "),n("p",[e._v("Hier nemen we de implementatie opnieuw niet op, daar de implementatie van deze\nmodule volledig programmeertaalafhankelijk is. In Python is de implementatie\neenvoudig door de ingebouwde module "),n("code",[e._v("json")]),e._v(", terwijl de implementatie in C een\nstuk langer is.")]),e._v(" "),n("h3",{attrs:{id:"programmeertaal-registreren"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#programmeertaal-registreren"}},[e._v("#")]),e._v(" Programmeertaal registreren")]),e._v(" "),n("p",[e._v("Als laatste stap rest nu nog om de nieuwe programmeertaal te registreren bij\nTESTed. Hiervoor volstaat het om de programmeertaal en de bijhorende\nconfiguratieklasse toe te voegen aan het bestand "),n("code",[e._v("tested/languages/__init__.py")]),e._v("\nin de map "),n("code",[e._v("LANGUAGES")]),e._v(":")]),e._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[e._v("LANGUAGES "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'c'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" C"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'haskell'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" Haskell"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'java'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" Java"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'javascript'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" JavaScript"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'kotlin'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" Kotlin"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'python'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" Python"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'runhaskell'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" RunHaskell"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),n("p",[e._v("Om de programmeertaal manueel te testen is het volgende stappenplan aanbevolen:")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("Implementeer oplossingen in de nieuwe programmeertaal voor een of meer\noefeningen uit de map "),n("code",[e._v("exercises")]),e._v(".")])]),e._v(" "),n("li",[n("p",[e._v("Wijzig "),n("code",[e._v("tested/manual.py")]),e._v(" zodat dit bestand de oefening gebruikt waarvoor een\noplossing bestaat en stel ook de juiste programmeertaal in.")])]),e._v(" "),n("li",[n("p",[e._v("Voer uit, zoals we in het begin van het hoofdstuk besproken hebben:")]),e._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" python -m tested.manual\n")])])])])]),e._v(" "),n("p",[e._v("TESTed heeft ook een testsuite met verschillende oefeningen en scenario's. Om de\nnieuwe programmeertaal hieraan toe te voegen, moeten de juiste oplossingen\ngeïmplementeerd worden. Hiervoor wordt best gekeken naar\n"),n("a",{attrs:{href:"https://github.com/dodona-edu/universal-judge/blob/master/tests/test_functionality.py",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("tests/test_functionality.py")]),n("OutboundLink")],1),e._v(",\nmaar ook de andere testbestanden bevatten enkele benodigde testen die\nprogrammeertaalafhankelijk zijn. In dat bestand staan de verschillende testen.\nBij elke test staat welke oplossing gebruikt wordt. Als het niet duidelijk zou\nzijn wat de oplossing voor een bepaalde test moet doen, kijk dan zeker eens naar\nde bestaande oplossingen voor de programmeertalen die al voor TESTed\ngeconfigureerd waren.")])])}),[],!1,null,null,null);t.default=s.exports}}]);